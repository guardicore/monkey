from dataclasses import dataclass
from enum import Enum
from typing import Type

from monkey_island.cc.services.reporting.issue_processing.exploit_processing.processors.cred_exploit import (  # noqa: E501
    CredExploitProcessor,
)
from monkey_island.cc.services.reporting.issue_processing.exploit_processing.processors.exploit import (  # noqa: E501
    ExploitProcessor,
)
from monkey_island.cc.services.reporting.issue_processing.exploit_processing.processors.log4shell import (  # noqa: E501
    Log4ShellProcessor,
)
from monkey_island.cc.services.reporting.issue_processing.exploit_processing.processors.zerologon import (  # noqa: E501
    ZerologonExploitProcessor,
)


@dataclass
class ExploiterDescriptor:
    # Must match with class names of exploiters in Infection Monkey code
    class_name: str
    display_name: str
    processor: Type[object] = ExploitProcessor


class ExploiterDescriptorEnum(Enum):
    SMB = ExploiterDescriptor("SmbExploiter", "SMB Exploiter", CredExploitProcessor)
    WMI = ExploiterDescriptor("WmiExploiter", "WMI Exploiter", CredExploitProcessor)
    SSH = ExploiterDescriptor("SSHExploiter", "SSH Exploiter", CredExploitProcessor)
    HADOOP = ExploiterDescriptor("HadoopExploiter", "Hadoop/Yarn Exploiter", ExploitProcessor)
    MSSQL = ExploiterDescriptor("MSSQLExploiter", "MSSQL Exploiter", ExploitProcessor)
    ZEROLOGON = ExploiterDescriptor(
        "ZerologonExploiter", "Zerologon Exploiter", ZerologonExploitProcessor
    )
    POWERSHELL = ExploiterDescriptor(
        "PowerShellExploiter", "PowerShell Remoting Exploiter", ExploitProcessor
    )
    LOG4SHELL = ExploiterDescriptor("Log4ShellExploiter", "Log4Shell Exploiter", Log4ShellProcessor)

    @staticmethod
    def get_by_class_name(class_name: str) -> ExploiterDescriptor:
        return [
            descriptor.value
            for descriptor in ExploiterDescriptorEnum
            if descriptor.value.class_name == class_name
        ][0]
