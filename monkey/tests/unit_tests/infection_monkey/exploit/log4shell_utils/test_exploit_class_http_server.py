from multiprocessing import get_context

import pytest
import requests

from infection_monkey.exploit.log4shell_utils import ExploitClassHTTPServer
from infection_monkey.network import TCPPortSelector


@pytest.fixture
def ip():
    return "127.0.0.1"


@pytest.fixture
def tcp_port_selector() -> TCPPortSelector:
    context = get_context("spawn")
    return TCPPortSelector(context, context.Manager())


@pytest.fixture
def port(tcp_port_selector):
    return tcp_port_selector.get_free_tcp_port()


@pytest.fixture
def java_class():
    return b"\xde\xad\xbe\xef"


@pytest.fixture
def server(ip, port, java_class):
    server = ExploitClassHTTPServer(ip, port, java_class, 0.01)
    server.run()

    yield server

    server.stop()


@pytest.fixture
def second_server(ip, tcp_port_selector, java_class):
    server = ExploitClassHTTPServer(ip, tcp_port_selector.get_free_tcp_port(), java_class, 0.01)
    server.run()

    yield server

    server.stop()


@pytest.fixture
def exploit_url(ip, port):
    return f"http://{ip}:{port}/Exploit"


@pytest.mark.usefixtures("server")
def test_only_single_download_allowed(exploit_url, java_class):
    response_1 = requests.get(exploit_url)
    assert response_1.status_code == 200
    assert response_1.content == java_class

    response_2 = requests.get(exploit_url)
    assert response_2.status_code == 429
    assert response_2.content != java_class


def test_exploit_class_downloaded(server, exploit_url):
    assert not server.exploit_class_downloaded()

    requests.get(exploit_url)

    assert server.exploit_class_downloaded()


def test_thread_safety(server, second_server, exploit_url):
    assert not server.exploit_class_downloaded()
    assert not second_server.exploit_class_downloaded()

    requests.get(exploit_url)

    assert server.exploit_class_downloaded()
    assert not second_server.exploit_class_downloaded()
