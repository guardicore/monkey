from ipaddress import IPv4Address
from typing import List

import pytest
from monkeytypes import NetworkPort, NetworkService, OperatingSystem, PortStatus

from infection_monkey.exploit.tools import all_tcp_ports_are_closed, all_udp_ports_are_closed
from infection_monkey.i_puppet import PortScanData, PortScanDataDict, TargetHost, TargetHostPorts

TARGET_IP = IPv4Address("127.0.0.1")
PORTS_STATUS = TargetHostPorts(
    tcp_ports=PortScanDataDict(
        {
            NetworkPort(5000): PortScanData(
                port=5000, status=PortStatus.OPEN, service=NetworkService.UNKNOWN
            ),
            NetworkPort(5001): PortScanData(
                port=5001, status=PortStatus.CLOSED, service=NetworkService.SSH
            ),
            NetworkPort(6000): PortScanData(
                port=6000, status=PortStatus.OPEN, service=NetworkService.MSSQL
            ),
            NetworkPort(6001): PortScanData(
                port=6001, status=PortStatus.CLOSED, service=NetworkService.UNKNOWN
            ),
        }
    ),
    udp_ports=PortScanDataDict(
        {
            NetworkPort(7000): PortScanData(port=7000, status=PortStatus.OPEN),
            NetworkPort(7001): PortScanData(port=7001, status=PortStatus.CLOSED),
            NetworkPort(8000): PortScanData(port=8000, status=PortStatus.OPEN),
            NetworkPort(8001): PortScanData(port=8001, status=PortStatus.CLOSED),
        }
    ),
)


@pytest.fixture
def target_host() -> TargetHost:
    return TargetHost(
        ip=TARGET_IP,
        operating_system=OperatingSystem.WINDOWS,
        ports_status=PORTS_STATUS,
    )


@pytest.mark.parametrize(
    "all_ports_are_closed, ports_to_check",
    [(all_tcp_ports_are_closed, [5000, 6000]), (all_udp_ports_are_closed, [7000, 8000])],
)
def test_all_exploitation_ports_open(target_host, all_ports_are_closed, ports_to_check):
    assert not all_ports_are_closed(target_host, ports_to_check)


@pytest.mark.parametrize(
    "all_ports_are_closed, ports_to_check",
    [
        (all_tcp_ports_are_closed, [5000, 5001, 6000, 6001]),
        (all_udp_ports_are_closed, [7000, 7001, 8000, 8001]),
    ],
)
def test_some_exploitation_ports_open(target_host, all_ports_are_closed, ports_to_check):
    assert not all_ports_are_closed(target_host, ports_to_check)


@pytest.mark.parametrize(
    "all_ports_are_closed, ports_to_check",
    [(all_tcp_ports_are_closed, [5001, 6001]), (all_udp_ports_are_closed, [7001, 8001])],
)
def test_all_exploitation_ports_closed(target_host, all_ports_are_closed, ports_to_check):
    assert all_ports_are_closed(target_host, ports_to_check)


@pytest.mark.parametrize(
    "all_ports_are_closed", [(all_tcp_ports_are_closed), (all_udp_ports_are_closed)]
)
def test_no_exploitation_ports_exist(target_host, all_ports_are_closed):
    exploitation_ports: List[NetworkPort] = []

    assert all_ports_are_closed(target_host, exploitation_ports)


@pytest.mark.parametrize(
    "all_ports_are_closed, ports_to_check",
    [(all_tcp_ports_are_closed, [5000, 5001]), (all_udp_ports_are_closed, [7000, 7001])],
)
def test_host_has_no_ports_status(all_ports_are_closed, ports_to_check):
    target_host = TargetHost(
        ip=TARGET_IP,
        operating_system=OperatingSystem.WINDOWS,
        ports_status=PortScanDataDict({}),
    )

    assert not all_ports_are_closed(target_host, ports_to_check)
