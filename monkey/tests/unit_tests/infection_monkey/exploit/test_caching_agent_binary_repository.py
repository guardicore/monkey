from multiprocessing import Queue, get_context
from multiprocessing.managers import SyncManager

import pytest
from monkeytypes import OperatingSystem
from tests.unit_tests.infection_monkey.base_island_api_client import BaseIslandAPIClient

from infection_monkey.exploit import CachingAgentBinaryRepository
from infection_monkey.island_api_client import IIslandAPIClient

AGENT_BINARY_WINDOWS = b"WINDOWS_BINARY"
AGENT_BINARY_LINUX = b"LINUX_BINARY"


@pytest.fixture
def mock_island_api_client() -> IIslandAPIClient:
    return StubIslandAPIClient()


class StubIslandAPIClient(BaseIslandAPIClient):
    def __init__(self):
        self._calls = get_context("spawn").Value("i", 0)

    @property
    def calls(self):
        return self._calls.value

    def get_agent_binary(self, operating_system: OperatingSystem) -> bytes:
        with self._calls.get_lock():
            self._calls.value += 1
            if operating_system is OperatingSystem.LINUX:
                return AGENT_BINARY_LINUX
            return AGENT_BINARY_WINDOWS


@pytest.fixture
def manager() -> SyncManager:
    return get_context("spawn").Manager()


@pytest.fixture
def caching_agent_binary_repository(
    mock_island_api_client, manager
) -> CachingAgentBinaryRepository:
    return CachingAgentBinaryRepository(mock_island_api_client, manager)


@pytest.mark.slow
def test_get_agent_binary__uses_cache(mock_island_api_client, caching_agent_binary_repository):
    binary1 = caching_agent_binary_repository.get_agent_binary(OperatingSystem.WINDOWS)
    binary2 = caching_agent_binary_repository.get_agent_binary(OperatingSystem.WINDOWS)

    assert binary1.getvalue() == AGENT_BINARY_WINDOWS
    assert binary2.getvalue() == AGENT_BINARY_WINDOWS
    assert mock_island_api_client.calls == 1


def get_binary(
    agent_binary_repository: CachingAgentBinaryRepository,
    queue: Queue,
    os: OperatingSystem,
):
    agent_binary = agent_binary_repository.get_agent_binary(os)
    queue.put(agent_binary)


@pytest.mark.slow
def test_get_agent_binary__uses_multiprocess_cache(
    mock_island_api_client, caching_agent_binary_repository
):
    context = get_context("spawn")
    queue = context.Queue()

    p1 = context.Process(
        target=get_binary, args=(caching_agent_binary_repository, queue, OperatingSystem.WINDOWS)
    )
    p1.start()
    p1_binary = queue.get()
    p1.join()

    p2 = context.Process(
        target=get_binary, args=(caching_agent_binary_repository, queue, OperatingSystem.WINDOWS)
    )
    p2.start()
    p2_binary = queue.get()
    p2.join()

    assert p1_binary.getvalue() == AGENT_BINARY_WINDOWS
    assert p2_binary.getvalue() == AGENT_BINARY_WINDOWS
    assert mock_island_api_client.calls == 1


@pytest.mark.slow
def test_get_agent_binary__uses_multiprocess_cache_concurrently(
    mock_island_api_client, caching_agent_binary_repository
):
    context = get_context("spawn")
    queue = context.Queue()

    p1 = context.Process(
        target=get_binary, args=(caching_agent_binary_repository, queue, OperatingSystem.WINDOWS)
    )
    p2 = context.Process(
        target=get_binary, args=(caching_agent_binary_repository, queue, OperatingSystem.WINDOWS)
    )
    p1.start()
    p2.start()
    binary1 = queue.get()
    binary2 = queue.get()
    p1.join()
    p2.join()

    assert binary1.getvalue() == AGENT_BINARY_WINDOWS
    assert binary2.getvalue() == AGENT_BINARY_WINDOWS
    assert mock_island_api_client.calls == 1


@pytest.mark.slow
def test_get_agent_binary__uses_multiprocess_cache_concurrently_for_different_os(
    mock_island_api_client, caching_agent_binary_repository
):
    context = get_context("spawn")
    queue = context.Queue()
    binaries = []

    p1 = context.Process(
        target=get_binary, args=(caching_agent_binary_repository, queue, OperatingSystem.WINDOWS)
    )
    p2 = context.Process(
        target=get_binary, args=(caching_agent_binary_repository, queue, OperatingSystem.LINUX)
    )
    p3 = context.Process(
        target=get_binary, args=(caching_agent_binary_repository, queue, OperatingSystem.WINDOWS)
    )
    p4 = context.Process(
        target=get_binary, args=(caching_agent_binary_repository, queue, OperatingSystem.LINUX)
    )
    p1.start()
    p2.start()
    p3.start()
    p4.start()
    binaries.append(queue.get().getvalue())
    binaries.append(queue.get().getvalue())
    binaries.append(queue.get().getvalue())
    binaries.append(queue.get().getvalue())
    p1.join()
    p2.join()
    p3.join()
    p4.join()

    assert binaries.count(AGENT_BINARY_WINDOWS) == 2
    assert binaries.count(AGENT_BINARY_LINUX) == 2
    assert mock_island_api_client.calls == 2
