import threading
from io import BytesIO
from pathlib import PurePath
from typing import Type
from unittest.mock import MagicMock

import pytest

from common import OperatingSystem
from infection_monkey.exploit import IAgentBinaryRepository, RetrievalError
from infection_monkey.exploit.agent_binary_request import (
    AgentBinaryHTTPRequestHandler,
    AgentBinaryRequest,
    RequestID,
    RequestType,
)
from infection_monkey.exploit.http_agent_binary_request_handler import get_http_handler

AGENT_BINARY = b"agent_binary"
UUID_1 = RequestID("00000000-0000-0000-0000-000000000001")
UUID_2 = RequestID("00000000-0000-0000-0000-000000000002")


@pytest.fixture
def binary_request_1() -> AgentBinaryRequest:
    return AgentBinaryRequest(
        UUID_1,
        RequestType.AGENT_BINARY,
        OperatingSystem.LINUX,
        None,
        [],
        f"/agent_binary/{UUID_1}",
        threading.Event(),
    )


@pytest.fixture
def binary_request_2() -> AgentBinaryRequest:
    return AgentBinaryRequest(
        UUID_2,
        RequestType.AGENT_BINARY,
        OperatingSystem.WINDOWS,
        None,
        [],
        f"/agent_binary/{UUID_2}",
        threading.Event(),
    )


@pytest.fixture
def dropper_request_1() -> AgentBinaryRequest:
    return AgentBinaryRequest(
        UUID_1,
        RequestType.DROPPER_SCRIPT,
        OperatingSystem.LINUX,
        PurePath("/tmp"),
        [],
        f"/dropper_script/{UUID_1}",
        threading.Event(),
    )


@pytest.fixture
def dropper_request_2() -> AgentBinaryRequest:
    return AgentBinaryRequest(
        UUID_2,
        RequestType.DROPPER_SCRIPT,
        OperatingSystem.WINDOWS,
        PurePath("C:\\Windows\\Temp"),
        [],
        f"/dropper_script/{UUID_2}",
        threading.Event(),
    )


@pytest.fixture
def agent_binary_repository() -> IAgentBinaryRepository:
    return MagicMock(spec=IAgentBinaryRepository)


@pytest.fixture
def agent_binary_http_handler(
    agent_binary_repository: IAgentBinaryRepository,
) -> Type[AgentBinaryHTTPRequestHandler]:
    return get_http_handler(agent_binary_repository, {}, {}, lambda: threading.Lock())


def test_get_http_handler__provides_unique_types(agent_binary_repository: IAgentBinaryRepository):
    handler1 = get_http_handler(agent_binary_repository, {}, {}, lambda: threading.Lock())
    handler2 = get_http_handler(agent_binary_repository, {}, {}, lambda: threading.Lock())

    assert handler1 is not handler2
    assert handler1.locks is not handler2.locks
    assert handler1.requests is not handler2.requests


@pytest.mark.parametrize(
    "agent_binary_request_fixture",
    ["binary_request_1", "binary_request_2", "dropper_request_1", "dropper_request_2"],
)
def test_register_request__succeeds(
    agent_binary_http_handler: AgentBinaryHTTPRequestHandler,
    agent_binary_request_fixture: AgentBinaryRequest,
    request,
):
    agent_binary_request = request.getfixturevalue(agent_binary_request_fixture)
    agent_binary_http_handler.register_request(agent_binary_request)


@pytest.mark.parametrize("first_request_fixture", ["binary_request_1", "dropper_request_1"])
@pytest.mark.parametrize("second_request_fixture", ["binary_request_2", "dropper_request_2"])
def test_register_request__allows_multiple_requests(
    agent_binary_http_handler: AgentBinaryHTTPRequestHandler,
    first_request_fixture: AgentBinaryRequest,
    second_request_fixture: AgentBinaryRequest,
    request,
):
    first_request = request.getfixturevalue(first_request_fixture)
    second_request = request.getfixturevalue(second_request_fixture)
    agent_binary_http_handler.register_request(first_request)
    agent_binary_http_handler.register_request(second_request)


def test_register_request__fails_if_request_exists(
    agent_binary_http_handler: AgentBinaryHTTPRequestHandler,
    binary_request_1: AgentBinaryRequest,
):
    agent_binary_http_handler.register_request(binary_request_1)
    with pytest.raises(KeyError):
        agent_binary_http_handler.register_request(binary_request_1)


@pytest.mark.parametrize(
    "agent_binary_request_fixture",
    ["binary_request_1", "binary_request_2", "dropper_request_1", "dropper_request_2"],
)
def test_deregister_request__succeeds(
    agent_binary_http_handler: AgentBinaryHTTPRequestHandler,
    agent_binary_request_fixture: AgentBinaryRequest,
    request,
):
    agent_binary_request = request.getfixturevalue(agent_binary_request_fixture)
    agent_binary_http_handler.register_request(agent_binary_request)
    agent_binary_http_handler.deregister_request(agent_binary_request.id)


def test_deregister_request__fails_if_request_does_not_exist(
    agent_binary_http_handler: AgentBinaryHTTPRequestHandler,
    binary_request_1: AgentBinaryRequest,
):
    with pytest.raises(KeyError):
        agent_binary_http_handler.deregister_request(binary_request_1.id)


class MockSocket(object):
    def getsockname(self):
        return ("sockname",)


class MockRequest(object):
    _sock = MockSocket()

    def __init__(self, path):
        self._path = path

    def makefile(self, *args, **kwargs):
        if args[0] == "rb":
            return BytesIO(b"GET %s HTTP/1.0" % self._path)
        elif args[0] == "wb":
            return BytesIO(b"")
        else:
            raise ValueError("Unknown file type to make", args, kwargs)

    def sendall(*args):
        pass


def build_request(request_type: RequestType, request_id: RequestID) -> MockRequest:
    request_path = f"/{request_type.value}/{request_id}"
    return MockRequest(request_path.encode("iso-8859-1"))


def handle_request(handler: Type[AgentBinaryHTTPRequestHandler], request: MockRequest) -> None:
    handler(
        request,  # type: ignore[arg-type]
        ("1.1.1.1", 12345),
        None,  # type: ignore[arg-type]
    )


def test_agent_binary_request__succeeds(
    agent_binary_http_handler: Type[AgentBinaryHTTPRequestHandler],
    agent_binary_repository: IAgentBinaryRepository,
    binary_request_1: AgentBinaryRequest,
):
    request = binary_request_1
    http_request = build_request(request.type, request.id)
    agent_binary_repository.get_agent_binary.return_value = (  # type: ignore[attr-defined]
        AGENT_BINARY
    )

    agent_binary_http_handler.register_request(request)
    handle_request(agent_binary_http_handler, http_request)


# NOTE: We could check for a 500 here instead of raising an exception
def test_agent_binary_request__fails_if_no_binary_available(
    agent_binary_http_handler: Type[AgentBinaryHTTPRequestHandler],
    agent_binary_repository: IAgentBinaryRepository,
    binary_request_1: AgentBinaryRequest,
):
    request = binary_request_1
    http_request = build_request(request.type, request.id)
    agent_binary_repository.get_agent_binary.side_effect = (  # type: ignore[attr-defined]
        RetrievalError
    )

    agent_binary_http_handler.register_request(request)
    with pytest.raises(Exception):
        handle_request(agent_binary_http_handler, http_request)


# NOTE: We could check for a 404 here instead of raising an exception
def test_agent_binary_request__fails_if_unregistered(
    agent_binary_http_handler: Type[AgentBinaryHTTPRequestHandler],
    binary_request_1: AgentBinaryRequest,
):
    request = binary_request_1
    http_request = build_request(request.type, request.id)

    # We haven't registered the request
    with pytest.raises(Exception):
        handle_request(agent_binary_http_handler, http_request)


# NOTE: We could check for a 429 here instead of raising an exception
def test_agent_binary_request__fails_if_already_downloaded(
    agent_binary_http_handler: Type[AgentBinaryHTTPRequestHandler],
    agent_binary_repository: IAgentBinaryRepository,
    binary_request_1: AgentBinaryRequest,
):
    request = binary_request_1
    http_request = build_request(request.type, request.id)
    agent_binary_repository.get_agent_binary.return_value = (  # type: ignore[attr-defined]
        AGENT_BINARY
    )

    agent_binary_http_handler.register_request(request)
    handle_request(agent_binary_http_handler, http_request)
    with pytest.raises(Exception):
        handle_request(agent_binary_http_handler, http_request)
