from http.server import BaseHTTPRequestHandler
from ipaddress import IPv4Address
from unittest.mock import MagicMock

import pytest

from common import OperatingSystem
from infection_monkey.exploit import IAgentBinaryRepository
from infection_monkey.exploit.http_agent_binary_server import (
    HTTPAgentBinaryServer,
    Request,
    RequestID,
    RequestType,
)
from infection_monkey.network import TCPPortSelector

REQUESTOR_IP = IPv4Address("1.1.1.1")


class MockAgentBinaryHTTPHandler(BaseHTTPRequestHandler):
    mock = MagicMock()  # TODO: Check if need to reset this for each test

    @classmethod
    def register_request(cls, request: Request) -> Request:
        return cls.mock.register_request(request)

    @classmethod
    def unregister_request(cls, request_id: RequestID):
        cls.mock.unregister_request(request_id)


@pytest.fixture
def tcp_port_selector():
    return MagicMock(spec=TCPPortSelector)


@pytest.fixture
def agent_binary_repository() -> IAgentBinaryRepository:
    return MagicMock(spec=IAgentBinaryRepository)


@pytest.fixture
def http_agent_binary_server(tcp_port_selector, agent_binary_repository):
    return HTTPAgentBinaryServer(
        tcp_port_selector, agent_binary_repository, lambda: MockAgentBinaryHTTPHandler
    )


@pytest.mark.parametrize("operating_system", [os for os in OperatingSystem])
@pytest.mark.parametrize("request_type", [rt for rt in RequestType])
def test_register__succeeds(
    http_agent_binary_server: HTTPAgentBinaryServer,
    operating_system: OperatingSystem,
    request_type: RequestType,
):
    request = http_agent_binary_server.register(operating_system, request_type, REQUESTOR_IP)

    assert MockAgentBinaryHTTPHandler.mock.register_request.called_once()
    registered_request = MockAgentBinaryHTTPHandler.mock.register_request.call_args[0][0]
    assert request.operating_system == operating_system
    assert request.type == request_type
    assert registered_request.operating_system == operating_system
    assert registered_request.type == request_type


def test_register__fails_if_handler_registration_fails():
    MockAgentBinaryHTTPHandler.mock.register_request.side_effect = Exception

    with pytest.raises(Exception):
        http_agent_binary_server.register(
            OperatingSystem.LINUX, RequestType.AGENT_BINARY, REQUESTOR_IP
        )


def test_register__starts_the_server_if_not_started(
    http_agent_binary_server: HTTPAgentBinaryServer,
):
    pass


def test_register__does_not_start_the_server_if_already_started(
    https_agent_binary_server: HTTPAgentBinaryServer,
):
    pass


def test_unregister__unregisters_the_request(http_agent_binary_server: HTTPAgentBinaryServer):
    request = http_agent_binary_server.register(
        OperatingSystem.LINUX, RequestType.AGENT_BINARY, REQUESTOR_IP
    )
    http_agent_binary_server.unregister(request.id)

    assert MockAgentBinaryHTTPHandler.mock.deregister_request.called_once_with(request.id)


def test_unregister__raises_error_on_invalid_request_id(
    http_agent_binary_server: HTTPAgentBinaryServer,
):
    pass


def test_start__starts_the_server(http_agent_binary_server: HTTPAgentBinaryServer):
    pass


def test_start__fails_if_no_port_available(http_agent_binary_server: HTTPAgentBinaryServer):
    pass


def test_stop__stops_the_server(http_agent_binary_server: HTTPAgentBinaryServer):
    pass


# Other things to test:
# - Does it handle races?
# - Does it work with multiprocessing?
# - Does it work with threading?
# - Can more than one agent binary be served at a time?
# - Can more that one agent binary server be used at a time?


# Tests for the handler:
# - Does it fail if the request ID is invalid?
# - Does it serve the agent binary upon request?
# - Does it stop serving the agent binary when unregistered?
# @pytest.mark.parametrize("operating_system", [os for os in OperatingSystem])
# def test_register__fails_if_no_binary_available(
#     handler: AgentBinaryHTTPHandler,
#     agent_binary_repository: IAgentBinaryRepository,
#     operating_system: OperatingSystem,
# ):
#     agent_binary_repository.get_agent_binary.side_effect = RetrievalError
#     with pytest.raises(Exception):
#         http_agent_binary_server.register(
#             operating_system,
#             RequestType.AGENT_BINARY,
#             REQUESTOR_IP
#         )
