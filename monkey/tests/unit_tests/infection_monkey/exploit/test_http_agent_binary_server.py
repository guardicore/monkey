import threading
from dataclasses import dataclass
from http import HTTPStatus
from ipaddress import IPv4Address
from multiprocessing import get_context
from multiprocessing.managers import SyncManager
from queue import Queue
from typing import List, Tuple, Type
from unittest.mock import MagicMock

import pytest
import requests

from common import OperatingSystem
from infection_monkey.exploit.agent_binary_request import AgentBinaryRequest, RequestID, RequestType
from infection_monkey.exploit.http_agent_binary_request_handler import AgentBinaryHTTPRequestHandler
from infection_monkey.exploit.http_agent_binary_server import HTTPAgentBinaryServer
from infection_monkey.network import TCPPortSelector

REQUESTOR_IP = IPv4Address("1.1.1.1")
UUID_1 = RequestID("00000000-0000-0000-0000-000000000001")


class MockAgentBinaryHTTPRequestHandlerMT(AgentBinaryHTTPRequestHandler):
    register_requests: List[AgentBinaryRequest] = []
    deregister_requests: List[RequestID] = []

    @classmethod
    def register_request(cls, request: AgentBinaryRequest):
        cls.register_requests.append(request)
        request.bytes_downloaded.set()

    @classmethod
    def deregister_request(cls, request_id: RequestID):
        cls.deregister_requests.append(request_id)


@pytest.fixture
def mock_agent_binary_http_handler() -> Type[AgentBinaryHTTPRequestHandler]:
    class MockAgentBinaryHTTPRequestHandler(AgentBinaryHTTPRequestHandler):
        register_requests: List[AgentBinaryRequest] = []
        deregister_requests: List[RequestID] = []

        register_request_mock = MagicMock()
        deregister_request_mock = MagicMock()

        @classmethod
        def register_request(cls, request: AgentBinaryRequest):
            cls.register_requests.append(request)
            cls.register_request_mock(request)

        @classmethod
        def deregister_request(cls, request_id: RequestID):
            cls.deregister_requests.append(request_id)
            cls.deregister_request_mock(request_id)

        def do_GET(self):
            print("do_GET is getting stuff")
            self.send_response(HTTPStatus.OK)
            self.send_header("Content-Length", str(0))
            self.end_headers()

    return MockAgentBinaryHTTPRequestHandler


@pytest.fixture
def http_agent_binary_server(
    tcp_port_selector: TCPPortSelector,
    mock_agent_binary_http_handler: Type[AgentBinaryHTTPRequestHandler],
) -> HTTPAgentBinaryServer:
    return HTTPAgentBinaryServer(
        tcp_port_selector,
        lambda: mock_agent_binary_http_handler,
        lambda: threading.Event(),
        threading.Lock(),
    )


@pytest.mark.xdist_group(name="tcp_port_selector")
@pytest.mark.parametrize("operating_system", [os for os in OperatingSystem])
@pytest.mark.parametrize("request_type", [rt for rt in RequestType])
def test_register__succeeds(
    http_agent_binary_server: HTTPAgentBinaryServer,
    mock_agent_binary_http_handler: Type[AgentBinaryHTTPRequestHandler],
    operating_system: OperatingSystem,
    request_type: RequestType,
):
    request = http_agent_binary_server.register(operating_system, request_type, REQUESTOR_IP)
    http_agent_binary_server.stop()

    mock_http_handler = mock_agent_binary_http_handler
    register_request = mock_http_handler.register_request_mock  # type: ignore[attr-defined]
    assert register_request.called_once()  # type: ignore[attr-defined]
    registered_request = register_request.call_args[0][0]  # type: ignore[attr-defined]
    assert request.operating_system == operating_system
    assert request.type == request_type
    assert registered_request.operating_system == operating_system
    assert registered_request.type == request_type


@pytest.mark.xdist_group(name="tcp_port_selector")
def test_register__fails_if_handler_registration_fails(
    http_agent_binary_server: HTTPAgentBinaryServer,
    mock_agent_binary_http_handler: Type[AgentBinaryHTTPRequestHandler],
):
    mock_http_handler = mock_agent_binary_http_handler
    mock_http_handler.register_request_mock.side_effect = Exception  # type: ignore[attr-defined]

    with pytest.raises(Exception):
        http_agent_binary_server.register(
            OperatingSystem.LINUX, RequestType.AGENT_BINARY, REQUESTOR_IP
        )

    http_agent_binary_server.stop()


@pytest.mark.xdist_group(name="tcp_port_selector")
def test_register__starts_the_server_if_not_started(
    http_agent_binary_server: HTTPAgentBinaryServer,
):
    request = http_agent_binary_server.register(
        OperatingSystem.LINUX, RequestType.AGENT_BINARY, REQUESTOR_IP
    )

    response = requests.get(request.download_url)
    http_agent_binary_server.stop()
    assert response.status_code == HTTPStatus.OK


@pytest.mark.xdist_group(name="tcp_port_selector")
def test_deregister__deregisters_the_request(
    http_agent_binary_server: HTTPAgentBinaryServer,
    mock_agent_binary_http_handler: Type[AgentBinaryHTTPRequestHandler],
):
    request = http_agent_binary_server.register(
        OperatingSystem.LINUX, RequestType.AGENT_BINARY, REQUESTOR_IP
    )
    http_agent_binary_server.deregister(request.id)
    http_agent_binary_server.stop()

    deregister_request = (
        mock_agent_binary_http_handler.deregister_request_mock  # type: ignore[attr-defined]
    )
    deregister_request.assert_called_once_with(request.id)  # type: ignore[attr-defined]


def test_deregister__raises_error_on_invalid_request_id(
    http_agent_binary_server: HTTPAgentBinaryServer,
    mock_agent_binary_http_handler: Type[AgentBinaryHTTPRequestHandler],
):
    mock_http_handler = mock_agent_binary_http_handler
    mock_http_handler.deregister_request_mock.side_effect = KeyError  # type: ignore[attr-defined]
    with pytest.raises(KeyError):
        http_agent_binary_server.deregister(UUID_1)


@pytest.mark.xdist_group(name="tcp_port_selector")
def test_start__starts_the_server(http_agent_binary_server: HTTPAgentBinaryServer):
    http_agent_binary_server.start()
    request = http_agent_binary_server.register(
        OperatingSystem.LINUX, RequestType.AGENT_BINARY, REQUESTOR_IP
    )

    response = requests.get(request.download_url)
    http_agent_binary_server.stop()
    assert response.status_code == HTTPStatus.OK


@dataclass
class Connection:
    laddr: Tuple[str, int]


def test_start__fails_if_no_port_available(
    http_agent_binary_server: HTTPAgentBinaryServer,
    monkeypatch,
):
    unavailable_ports = [Connection(("", p)) for p in range(65536)]
    monkeypatch.setattr(
        "infection_monkey.network.info.psutil.net_connections", lambda: unavailable_ports
    )
    with pytest.raises(Exception):
        http_agent_binary_server.start()

    http_agent_binary_server.stop()


def register_download_request(
    server: HTTPAgentBinaryServer,
    queue,
    operating_system: OperatingSystem,
    request_type: RequestType,
):
    result = server.register(operating_system, request_type, REQUESTOR_IP)
    queue.put(result)


class GetHTTPHandler:
    def __init__(self, handler_class):
        self._handler_class = handler_class

    def __call__(self):
        return self._handler_class


class HTTPAgentBinaryServerFactory:
    def __init__(self, tcp_port_selector, get_http_handler):
        self._tcp_port_selector = tcp_port_selector
        self._get_http_handler = get_http_handler
        self._manager = None

    def __call__(self):
        if self._manager is None:
            self._manager = get_context("spawn").Manager()
        return HTTPAgentBinaryServer(
            self._tcp_port_selector,
            self._get_http_handler,
            self._manager.Event,
            self._manager.Lock(),
        )


@pytest.mark.xdist_group(name="tcp_port_selector")
def test_request__bytes_downloaded_threading(
    http_agent_binary_server: HTTPAgentBinaryServer,
    mock_agent_binary_http_handler: Type[AgentBinaryHTTPRequestHandler],
):
    # Tell the handler to "download" the file
    def register_request(request):
        request.bytes_downloaded.set()

    mock_http_handler = mock_agent_binary_http_handler
    mock_http_handler.register_request_mock.side_effect = (  # type: ignore[attr-defined]
        register_request
    )
    queue: Queue[AgentBinaryRequest] = Queue()
    thread = threading.Thread(
        target=register_download_request,
        args=(http_agent_binary_server, queue, OperatingSystem.WINDOWS, RequestType.AGENT_BINARY),
        daemon=True,
    )
    thread.start()
    request = queue.get()
    thread.join()

    assert request.bytes_downloaded.is_set()


@pytest.mark.xdist_group(name="tcp_port_selector")
def test_request__bytes_downloaded_multiprocessing(
    tcp_port_selector: TCPPortSelector,
):
    # Register a type that I can use to get the data
    SyncManager.register(
        "HTTPHandlerFactory",
        GetHTTPHandler(GetHTTPHandler(MockAgentBinaryHTTPRequestHandlerMT)),
        exposed=("__call__",),
    )
    context = get_context("spawn")
    handler_factory = context.Manager().HTTPHandlerFactory()  # type: ignore[attr-defined]
    server_factory = HTTPAgentBinaryServerFactory(tcp_port_selector, handler_factory)
    SyncManager.register("HTTPAgentBinaryServer", server_factory)

    manager = context.Manager()
    server = manager.HTTPAgentBinaryServer()  # type: ignore[attr-defined]
    queue = context.Queue()

    p1 = context.Process(  # type: ignore[attr-defined]
        target=register_download_request,
        args=(server, queue, OperatingSystem.LINUX, RequestType.AGENT_BINARY),
        daemon=True,
    )
    p1.start()
    request = queue.get()
    p1.join()

    assert request.bytes_downloaded.is_set()
