import io
from unittest.mock import MagicMock

import pytest
from monkeytypes import OperatingSystem

from infection_monkey.exploit import (
    IAgentBinaryRepository,
    PolymorphicAgentBinaryRepositoryDecorator,
)

AGENT_BINARY = b"Agent Binary Bytes!"
NULL_BYTES_LENGTH = 4
RANDOM_BYTES_LENGTH = 4


@pytest.fixture
def mock_agent_binary_repository() -> IAgentBinaryRepository:
    mabr = MagicMock(IAgentBinaryRepository)
    mabr.get_agent_binary.return_value = io.BytesIO(AGENT_BINARY)

    return mabr


@pytest.fixture
def polymorphic_agent_binary_repository(
    mock_agent_binary_repository: IAgentBinaryRepository,
) -> IAgentBinaryRepository:
    return PolymorphicAgentBinaryRepositoryDecorator(
        mock_agent_binary_repository, NULL_BYTES_LENGTH, RANDOM_BYTES_LENGTH
    )


def test_get_agent_binary(polymorphic_agent_binary_repository: IAgentBinaryRepository):
    null_bytes_start_index = len(AGENT_BINARY)
    null_bytes_stop_index = len(AGENT_BINARY) + NULL_BYTES_LENGTH

    agent_binary = polymorphic_agent_binary_repository.get_agent_binary(OperatingSystem.LINUX)
    agent_binary_bytes = agent_binary.read()

    assert agent_binary_bytes[:null_bytes_start_index] == AGENT_BINARY
    assert (
        agent_binary_bytes[null_bytes_start_index:null_bytes_stop_index]
        == b"\x00" * NULL_BYTES_LENGTH
    )


def test_get_agent_binary__random(polymorphic_agent_binary_repository: IAgentBinaryRepository):
    random_bytes_start_index = len(AGENT_BINARY) + NULL_BYTES_LENGTH

    agent_binary = polymorphic_agent_binary_repository.get_agent_binary(OperatingSystem.LINUX)
    agent_binary_bytes_1 = agent_binary.read()
    agent_binary = polymorphic_agent_binary_repository.get_agent_binary(OperatingSystem.LINUX)
    agent_binary_bytes_2 = agent_binary.read()

    assert (
        agent_binary_bytes_1[random_bytes_start_index:]
        != agent_binary_bytes_2[random_bytes_start_index:]
    )
