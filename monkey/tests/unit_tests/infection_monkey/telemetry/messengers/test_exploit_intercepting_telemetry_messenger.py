from unittest.mock import MagicMock

from infection_monkey.i_puppet.i_puppet import ExploiterResultData
from infection_monkey.model.host import VictimHost
from infection_monkey.telemetry.base_telem import BaseTelem
from infection_monkey.telemetry.exploit_telem import ExploitTelem
from infection_monkey.telemetry.messengers.exploit_intercepting_telemetry_messenger import (
    ExploitInterceptingTelemetryMessenger,
)


class TestTelem(BaseTelem):
    telem_category = None

    def __init__(self):
        pass

    def get_data(self):
        return {}


class MockExpliotTelem(ExploitTelem):
    def __init__(self, propagation_success):
        erd = ExploiterResultData()
        erd.propagation_success = propagation_success
        super().__init__("TestExploiter", VictimHost("127.0.0.1"), erd)

    def get_data(self):
        return {}


def test_generic_telemetry():
    mock_telemetry_messenger = MagicMock()
    mock_tunnel = MagicMock()

    telemetry_messenger = ExploitInterceptingTelemetryMessenger(
        mock_telemetry_messenger, mock_tunnel
    )

    telemetry_messenger.send_telemetry(TestTelem())

    assert mock_telemetry_messenger.send_telemetry.called
    assert not mock_tunnel.set_wait_for_exploited_machines.called


def test_propagation_successful_expliot_telemetry():
    mock_telemetry_messenger = MagicMock()
    mock_tunnel = MagicMock()
    mock_expliot_telem = MockExpliotTelem(True)

    telemetry_messenger = ExploitInterceptingTelemetryMessenger(
        mock_telemetry_messenger, mock_tunnel
    )

    telemetry_messenger.send_telemetry(mock_expliot_telem)

    assert mock_telemetry_messenger.send_telemetry.called
    assert mock_tunnel.set_wait_for_exploited_machines.called


def test_propagation_failed_expliot_telemetry():
    mock_telemetry_messenger = MagicMock()
    mock_tunnel = MagicMock()
    mock_expliot_telem = MockExpliotTelem(False)

    telemetry_messenger = ExploitInterceptingTelemetryMessenger(
        mock_telemetry_messenger, mock_tunnel
    )

    telemetry_messenger.send_telemetry(mock_expliot_telem)

    assert mock_telemetry_messenger.send_telemetry.called
    assert not mock_tunnel.set_wait_for_exploited_machines.called
