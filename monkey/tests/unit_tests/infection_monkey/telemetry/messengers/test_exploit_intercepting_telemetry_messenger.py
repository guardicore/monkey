from unittest.mock import MagicMock

from infection_monkey.i_puppet.i_puppet import ExploiterResultData
from infection_monkey.model.host import VictimHost
from infection_monkey.telemetry.exploit_telem import ExploitTelem
from infection_monkey.telemetry.messengers.exploit_intercepting_telemetry_messenger import (
    ExploitInterceptingTelemetryMessenger,
)


class MockExploitTelem(ExploitTelem):
    def __init__(self, propagation_success):
        erd = ExploiterResultData()
        erd.propagation_success = propagation_success
        super().__init__("TestExploiter", VictimHost("127.0.0.1"), erd)

    def get_data(self):
        return {}


def test_generic_telemetry(TestTelem):
    mock_telemetry_messenger = MagicMock()
    mock_relay = MagicMock()

    telemetry_messenger = ExploitInterceptingTelemetryMessenger(
        mock_telemetry_messenger, mock_relay
    )

    telemetry_messenger.send_telemetry(TestTelem())

    assert mock_telemetry_messenger.send_telemetry.called
    assert not mock_relay.add_potential_user.called


def test_propagation_successful_exploit_telemetry():
    mock_telemetry_messenger = MagicMock()
    mock_relay = MagicMock()
    mock_exploit_telem = MockExploitTelem(True)

    telemetry_messenger = ExploitInterceptingTelemetryMessenger(
        mock_telemetry_messenger, mock_relay
    )

    telemetry_messenger.send_telemetry(mock_exploit_telem)

    assert mock_telemetry_messenger.send_telemetry.called
    assert mock_relay.add_potential_user.called


def test_propagation_failed_exploit_telemetry():
    mock_telemetry_messenger = MagicMock()
    mock_relay = MagicMock()
    mock_exploit_telem = MockExploitTelem(False)

    telemetry_messenger = ExploitInterceptingTelemetryMessenger(
        mock_telemetry_messenger, mock_relay
    )

    telemetry_messenger.send_telemetry(mock_exploit_telem)

    assert mock_telemetry_messenger.send_telemetry.called
    assert not mock_relay.add_potential_user.called
