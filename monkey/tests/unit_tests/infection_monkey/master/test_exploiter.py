import logging
from ipaddress import IPv4Address
from queue import Queue
from threading import Barrier, Event
from typing import Callable, Collection, Iterable, Mapping, Sequence, Tuple
from unittest.mock import MagicMock

import pytest
from tests.unit_tests.infection_monkey.master.mock_puppet import MockPuppet

from common import OperatingSystem
from common.agent_configuration import AgentConfiguration, ExploitationConfiguration
from infection_monkey.i_puppet import TargetHost
from infection_monkey.master import Exploiter

logger = logging.getLogger()


@pytest.fixture(autouse=True)
def patch_queue_timeout(monkeypatch):
    monkeypatch.setattr("infection_monkey.master.exploiter.QUEUE_TIMEOUT", 0.001)


@pytest.fixture
def scan_completed() -> Event:
    return Event()


@pytest.fixture
def stop() -> Event:
    return Event()


@pytest.fixture
def callback() -> Callable:
    return MagicMock()


EXPLOITERS = {
    "MSSQLExploiter": {"timeout": 10},
    "ZerologonExploiter": {},
    "SSHExploiter": {},
    "WmiExploiter": {"timeout": 10},
}


@pytest.fixture(params=[EXPLOITERS])
def exploiter_config(
    request, default_agent_configuration: AgentConfiguration
) -> ExploitationConfiguration:
    return ExploitationConfiguration(
        options=default_agent_configuration.propagation.exploitation.options,
        exploiters=request.param,
    )


@pytest.fixture
def hosts() -> Iterable[TargetHost]:
    host_1 = TargetHost(ip=IPv4Address("10.0.0.1"))
    host_2 = TargetHost(ip=IPv4Address("10.0.0.3"))
    return [host_1, host_2]


@pytest.fixture
def hosts_to_exploit(hosts: Iterable[TargetHost]):
    return enqueue_hosts(hosts)


def enqueue_hosts(hosts: Iterable[TargetHost]) -> Queue:
    q: Queue = Queue()
    for h in hosts:
        q.put(h)

    return q


def get_host_exploit_combos_from_call_args_list(
    call_args_list: Sequence,
) -> Collection[Tuple[str, TargetHost]]:
    host_exploit_combos = set()

    for call_args in call_args_list:
        exploiter_name = call_args[0][0]
        target_host = call_args[0][1]
        host_exploit_combos.add((exploiter_name, target_host))

    return host_exploit_combos


CREDENTIALS_FOR_PROPAGATION = {"usernames": ["m0nk3y", "user"], "passwords": ["1234", "pword"]}
SERVERS = ["127.0.0.1:5000", "10.10.10.10:5007"]


@pytest.fixture
def get_credentials_for_propagation() -> Callable[..., Mapping[str, Sequence]]:
    return MagicMock(return_value=CREDENTIALS_FOR_PROPAGATION)


@pytest.fixture
def run_exploiters(
    hosts_to_exploit,
    exploiter_config,
    callback,
    scan_completed,
    stop,
    get_credentials_for_propagation,
):
    def inner(puppet, num_workers, hosts=hosts_to_exploit, exploiter_config=exploiter_config):
        # Set this so that Exploiter() exits once it has processed all victims
        scan_completed.set()

        e = Exploiter(puppet, num_workers, get_credentials_for_propagation)
        e.exploit_hosts(exploiter_config, hosts, 1, SERVERS, callback, scan_completed, stop)

    return inner


def test_exploiter(callback, hosts, run_exploiters):
    run_exploiters(MockPuppet(), 2)

    assert callback.call_count == 8
    host_exploit_combos = get_host_exploit_combos_from_call_args_list(callback.call_args_list)

    assert ("ZerologonExploiter", hosts[0]) in host_exploit_combos
    assert ("MSSQLExploiter", hosts[0]) in host_exploit_combos
    assert ("SSHExploiter", hosts[0]) in host_exploit_combos
    assert ("WmiExploiter", hosts[0]) in host_exploit_combos
    assert ("ZerologonExploiter", hosts[1]) in host_exploit_combos
    assert ("MSSQLExploiter", hosts[1]) in host_exploit_combos
    assert ("WmiExploiter", hosts[1]) in host_exploit_combos
    assert ("SSHExploiter", hosts[1]) in host_exploit_combos


def test_exploiter_order(callback, run_exploiters):
    run_exploiters(MockPuppet(), 1)

    assert callback.call_args_list[0][0][0] == "MSSQLExploiter"
    assert callback.call_args_list[1][0][0] == "ZerologonExploiter"
    assert callback.call_args_list[2][0][0] == "SSHExploiter"
    assert callback.call_args_list[3][0][0] == "WmiExploiter"
    assert callback.call_args_list[4][0][0] == "MSSQLExploiter"
    assert callback.call_args_list[5][0][0] == "ZerologonExploiter"
    assert callback.call_args_list[6][0][0] == "SSHExploiter"
    assert callback.call_args_list[7][0][0] == "WmiExploiter"


def test_credentials_passed_to_exploiter(run_exploiters):
    mock_puppet = MagicMock()
    run_exploiters(mock_puppet, 1)

    for call_args in mock_puppet.exploit_host.call_args_list:
        assert call_args[0][4].get("credentials") == CREDENTIALS_FOR_PROPAGATION


def test_stop_after_callback(
    exploiter_config,
    callback,
    scan_completed,
    stop,
    hosts_to_exploit,
    get_credentials_for_propagation,
):
    callback_barrier_count = 2

    def _callback(*_):
        # Block all threads here until 2 threads reach this barrier, then set stop
        # and test that neither thread continues to scan.
        _callback.barrier.wait()
        stop.set()

    _callback.barrier = Barrier(callback_barrier_count)

    stoppable_callback = MagicMock(side_effect=_callback)

    # Intentionally NOT setting scan_completed.set(); _callback() will set stop

    e = Exploiter(MockPuppet(), callback_barrier_count + 2, get_credentials_for_propagation)
    e.exploit_hosts(
        exploiter_config, hosts_to_exploit, 1, SERVERS, stoppable_callback, scan_completed, stop
    )

    assert stoppable_callback.call_count == 2


def test_exploiter_raises_exception(callback, hosts, hosts_to_exploit, run_exploiters):
    error_message = "Unexpected error"
    mock_puppet = MockPuppet()
    mock_puppet.exploit_host = MagicMock(side_effect=Exception(error_message))
    run_exploiters(mock_puppet, 3)

    assert callback.call_count == 8

    for i in range(0, 6):
        exploit_result_data = callback.call_args_list[i][0][2]
        assert exploit_result_data.exploitation_success is False
        assert exploit_result_data.propagation_success is False
        assert error_message in exploit_result_data.error_message


def test_windows_exploiters_run_on_windows_host(callback, hosts, hosts_to_exploit, run_exploiters):
    host = TargetHost(ip=IPv4Address("10.0.0.1"), operating_system=OperatingSystem.WINDOWS)
    q = enqueue_hosts([host])
    run_exploiters(MockPuppet(), 1, q)

    assert callback.call_count == 3
    host_exploit_combos = get_host_exploit_combos_from_call_args_list(callback.call_args_list)

    assert ("SSHExploiter", host) not in host_exploit_combos


def test_linux_exploiters_run_on_linux_host(callback, hosts, hosts_to_exploit, run_exploiters):
    host = TargetHost(ip=IPv4Address("10.0.0.1"), operating_system=OperatingSystem.LINUX)
    q = enqueue_hosts([host])
    run_exploiters(MockPuppet(), 1, q)

    assert callback.call_count == 1
    host_exploit_combos = get_host_exploit_combos_from_call_args_list(callback.call_args_list)

    assert ("SSHExploiter", host) in host_exploit_combos


def test_all_exploiters_run_on_unknown_host(callback, hosts, hosts_to_exploit, run_exploiters):
    host = TargetHost(ip=IPv4Address("10.0.0.1"))

    q = enqueue_hosts([host])
    run_exploiters(MockPuppet(), 1, q)

    assert callback.call_count == 4
    host_exploit_combos = get_host_exploit_combos_from_call_args_list(callback.call_args_list)

    assert ("ZerologonExploiter", hosts[0]) in host_exploit_combos
    assert ("MSSQLExploiter", hosts[0]) in host_exploit_combos
    assert ("SSHExploiter", host) in host_exploit_combos
    assert ("WmiExploiter", hosts[0]) in host_exploit_combos


def test_callback_skipped_on_rejected_request(
    callback, hosts, hosts_to_exploit, run_exploiters, exploiter_config
):
    exploiter_config.exploiters = {"MSSQLExploiter": {"timeout": 10}, "ZerologonExploiter": {}}
    host = TargetHost(ip=IPv4Address("10.0.0.1"), operating_system=OperatingSystem.LINUX)

    q = enqueue_hosts([host])
    run_exploiters(MockPuppet(), 1, q, exploiter_config)

    assert callback.call_count == 0


@pytest.mark.parametrize(
    "exploiter_config",
    [
        {"PowerShellExploiter": {}},
        {"WmiExploiter": {}},
        {"MSSQLExploiter": {}},
        {"SSHExploiter": {}},
    ],
    indirect=True,
)
def test_exploit_hosts__retrieves_credentials_for_hard_coded_exploiters(
    exploiter_config, run_exploiters, get_credentials_for_propagation
):
    run_exploiters(MagicMock(), 1)

    assert get_credentials_for_propagation.called


@pytest.mark.parametrize(
    "exploiter_config",
    [
        {"FakeExploiter": {}},
        {"FakeExploiter2": {}},
    ],
    indirect=True,
)
def test_exploit_hosts__does_not_retrieve_credentials_for_exploiter_plugins(
    exploiter_config, run_exploiters, get_credentials_for_propagation
):
    run_exploiters(MagicMock(), 1)

    assert not get_credentials_for_propagation.called
