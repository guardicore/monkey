from ipaddress import IPv4Address
from threading import Event
from typing import List
from unittest.mock import MagicMock

import pytest
from agent_plugins.exploiters.smb.src.smb_exploit_client import SMBExploitClient
from agent_plugins.exploiters.smb.src.smb_exploiter import SMBExploiter
from agent_plugins.exploiters.smb.src.smb_options import SMBOptions
from agent_plugins.exploiters.smb.src.smb_propagation_client import SMBPropagationClient
from tests.data_for_tests.propagation_credentials import FULL_CREDENTIALS

from common import OperatingSystem
from common.credentials import Credentials
from infection_monkey.exploit import IAgentBinaryRepository
from infection_monkey.i_puppet import TargetHost
from infection_monkey.propagation_credentials_repository import IPropagationCredentialsRepository

CREDENTIALS: List[Credentials] = []


@pytest.fixture
def mock_exploit_client() -> SMBExploitClient:
    client = MagicMock(spec=SMBExploitClient)
    client.authenticate.return_value = True
    return client


@pytest.fixture
def mock_propagation_client() -> SMBPropagationClient:
    client = MagicMock(spec=SMBPropagationClient)
    client.copy_file.return_value = "path"
    client.run_agent.return_value = True
    return client


@pytest.fixture
def mock_credentials_repository() -> IPropagationCredentialsRepository:
    repository = MagicMock(spec=IPropagationCredentialsRepository)
    repository.get_credentials.return_value = FULL_CREDENTIALS
    return repository


@pytest.fixture
def smb_exploiter(
    mock_exploit_client: SMBExploitClient,
    mock_propagation_client: SMBPropagationClient,
    mock_credentials_repository: IPropagationCredentialsRepository,
) -> SMBExploiter:
    return SMBExploiter(
        mock_exploit_client,
        mock_propagation_client,
        mock_credentials_repository,
        MagicMock(spec=IAgentBinaryRepository),
    )


@pytest.fixture
def target_host() -> TargetHost:
    return TargetHost(ip=IPv4Address("1.1.1.1"), operating_system=OperatingSystem.WINDOWS)


def test_exploit_host__exploit_succeeds(smb_exploiter: SMBExploiter, target_host: TargetHost):
    result = smb_exploiter.exploit_host(
        host=target_host,
        servers=[],
        current_depth=1,
        options=SMBOptions(),
        interrupt=Event(),
    )

    assert result.exploitation_success
    assert result.propagation_success


def test_exploit_host__exploit_fails(
    smb_exploiter: SMBExploiter, mock_exploit_client: SMBExploitClient, target_host: TargetHost
):
    mock_exploit_client.authenticate.return_value = False

    result = smb_exploiter.exploit_host(
        host=target_host,
        servers=[],
        current_depth=1,
        options=SMBOptions(),
        interrupt=Event(),
    )

    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_host__propagation_succeeds(
    smb_exploiter: SMBExploiter,
    target_host: TargetHost,
):
    result = smb_exploiter.exploit_host(
        host=target_host,
        servers=[],
        current_depth=1,
        options=SMBOptions(),
        interrupt=Event(),
    )

    assert result.exploitation_success
    assert result.propagation_success


def test_exploit_host__propagation_fails(
    smb_exploiter: SMBExploiter,
    mock_propagation_client: SMBPropagationClient,
    target_host: TargetHost,
):
    mock_propagation_client.copy_file.return_value = None

    result = smb_exploiter.exploit_host(
        host=target_host,
        servers=[],
        current_depth=1,
        options=SMBOptions(),
        interrupt=Event(),
    )

    assert result.exploitation_success
    assert not result.propagation_success


def test_exploit_host__exploit_skipped_on_interrupt(
    smb_exploiter: SMBExploiter, mock_exploit_client: SMBExploitClient, target_host: TargetHost
):
    interrupt = Event()
    interrupt.set()

    smb_exploiter.exploit_host(
        host=target_host,
        servers=[],
        current_depth=1,
        options=SMBOptions(),
        interrupt=interrupt,
    )

    assert not mock_exploit_client.authenticate.called
