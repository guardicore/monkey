from io import BytesIO
from ipaddress import IPv4Address
from threading import Event
from typing import Any, List
from unittest.mock import MagicMock

import pytest
from agent_plugins.exploiters.smb.src.smb_exploiter import SMBExploiter
from tests.data_for_tests.propagation_credentials import FULL_CREDENTIALS

from common import OperatingSystem
from common.credentials import Credentials
from infection_monkey.exploit import IAgentBinaryRepository
from infection_monkey.exploit.tools import (
    IRemoteAccessClient,
    IRemoteAccessClientBuilder,
    RemoteAuthenticationError,
    RemoteFileCopyError,
)
from infection_monkey.i_puppet import ExploiterResultData, TargetHost
from infection_monkey.propagation_credentials_repository import IPropagationCredentialsRepository

CREDENTIALS: List[Credentials] = []
OTHER_PATHS = ["other_path1", "other_path2", "other_path3"]


@pytest.fixture
def mock_exploit_client() -> IRemoteAccessClient:
    client = MagicMock(spec=IRemoteAccessClient)
    client.login.return_value = True
    client.copy_file.return_value = "path"
    client.get_available_paths.return_value = []
    client.execute.return_value = True
    return client


@pytest.fixture
def mock_exploit_client_builder(mock_exploit_client) -> IRemoteAccessClientBuilder:
    builder = MagicMock(spec=IRemoteAccessClientBuilder)
    builder.build_client.return_value = mock_exploit_client
    return builder


@pytest.fixture
def mock_credentials_repository() -> IPropagationCredentialsRepository:
    repository = MagicMock(spec=IPropagationCredentialsRepository)
    repository.get_credentials.return_value = FULL_CREDENTIALS
    return repository


@pytest.fixture
def mock_agent_binary_repository() -> IAgentBinaryRepository:
    repository = MagicMock(spec=IAgentBinaryRepository)
    repository.get_agent_binary.return_value = BytesIO(b"file")
    return repository


@pytest.fixture
def smb_exploiter(
    mock_exploit_client_builder: IRemoteAccessClientBuilder,
    mock_credentials_repository: IPropagationCredentialsRepository,
    mock_agent_binary_repository: IAgentBinaryRepository,
) -> SMBExploiter:
    return SMBExploiter(
        lambda a, b: "command",
        mock_exploit_client_builder,
        mock_credentials_repository,
        mock_agent_binary_repository,
    )


@pytest.fixture
def target_host() -> TargetHost:
    return


def run_smb_exploiter(
    smb_exploiter: SMBExploiter, interrupt: Event = Event()
) -> ExploiterResultData:
    target_host = TargetHost(ip=IPv4Address("1.1.1.1"), operating_system=OperatingSystem.WINDOWS)
    return smb_exploiter.exploit_host(
        host=target_host,
        interrupt=interrupt,
    )


def test_exploit_host__exploit_succeeds(smb_exploiter: SMBExploiter):
    result = run_smb_exploiter(smb_exploiter)
    assert result.exploitation_success
    assert result.propagation_success


def test_exploit_host__exploit_fails(
    smb_exploiter: SMBExploiter, mock_exploit_client: IRemoteAccessClient
):
    mock_exploit_client.login.side_effect = Exception()

    result = run_smb_exploiter(smb_exploiter)

    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_host__propagation_succeeds(
    smb_exploiter: SMBExploiter,
):
    result = run_smb_exploiter(smb_exploiter)

    assert result.exploitation_success
    assert result.propagation_success


def test_exploit_host__copy_fails(
    smb_exploiter: SMBExploiter,
    mock_exploit_client: IRemoteAccessClient,
):
    mock_exploit_client.copy_file.side_effect = RemoteFileCopyError()

    result = run_smb_exploiter(smb_exploiter)
    assert result.exploitation_success
    assert not result.propagation_success


class get_other_paths:
    def __init__(self, copy_file: MagicMock):
        self.copy_file = copy_file
        self.called = False

    def __call__(self, *args: Any, **kwds: Any) -> Any:
        self.copy_file.side_effect = None
        self.called = True
        return ["other_path"]


def test_exploit_host__copy_tries_other_paths(
    smb_exploiter: SMBExploiter,
    mock_exploit_client: IRemoteAccessClient,
):
    mock_exploit_client.copy_file.side_effect = RemoteFileCopyError("Failed")
    mock_exploit_client.get_available_paths = get_other_paths(mock_exploit_client.copy_file)

    result = run_smb_exploiter(smb_exploiter)
    assert mock_exploit_client.get_available_paths.called
    assert result.exploitation_success
    assert result.propagation_success


class interrupt_at_path:
    def __init__(self, interrupt: Event, path: str):
        self.interrupt = interrupt
        self.path = path
        self.last_path = None

    def __call__(self, *args: Any, **kwds: Any) -> Any:
        self.last_path = args[1]
        if args[1] == self.path:
            self.interrupt.set()
        raise RemoteFileCopyError("Failed")


@pytest.mark.parametrize("path", OTHER_PATHS)
def test_exploit_host__can_interrupt_while_trying_other_paths(
    smb_exploiter: SMBExploiter,
    mock_exploit_client: IRemoteAccessClient,
    path: str,
):
    my_interrupt = Event()
    mock_exploit_client.copy_file = interrupt_at_path(my_interrupt, path)
    mock_exploit_client.get_available_paths.return_value = OTHER_PATHS

    result = run_smb_exploiter(smb_exploiter, my_interrupt)
    assert mock_exploit_client.copy_file.last_path == path
    assert not result.propagation_success


def test_exploit_host__execute_fails(
    smb_exploiter: SMBExploiter,
    mock_exploit_client: IRemoteAccessClient,
):
    mock_exploit_client.execute.side_effect = Exception()

    result = run_smb_exploiter(smb_exploiter)
    assert result.exploitation_success
    assert not result.propagation_success


def test_exploit_host__exploit_fails_on_remote_authentication_error(
    smb_exploiter: SMBExploiter,
    mock_exploit_client: IRemoteAccessClient,
):
    mock_exploit_client.login.side_effect = RemoteAuthenticationError()

    result = run_smb_exploiter(smb_exploiter)
    assert False
    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_host__exploit_fails_on_authentication_error(
    smb_exploiter: SMBExploiter,
    mock_exploit_client: IRemoteAccessClient,
):
    mock_exploit_client.login.side_effect = Exception()

    result = run_smb_exploiter(smb_exploiter)
    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_host__propagation_fails_on_execute_error(
    smb_exploiter: SMBExploiter,
    mock_exploit_client: IRemoteAccessClient,
):
    mock_exploit_client.execute.side_effect = Exception()

    result = run_smb_exploiter(smb_exploiter)
    assert result.exploitation_success
    assert not result.propagation_success


def test_exploit_host__exploit_skipped_on_interrupt(
    smb_exploiter: SMBExploiter, mock_exploit_client: IRemoteAccessClient
):
    interrupt = Event()
    interrupt.set()

    result = run_smb_exploiter(smb_exploiter, interrupt)
    assert result == ExploiterResultData()
    assert not mock_exploit_client.login.called
