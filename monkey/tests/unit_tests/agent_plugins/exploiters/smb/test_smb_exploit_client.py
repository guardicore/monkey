from ipaddress import IPv4Address
from typing import List
from unittest.mock import MagicMock

import pytest
from agent_plugins.exploiters.smb.src.smb_exploit_client import SMBExploitClient
from agent_plugins.exploiters.smb.src.smb_options import SMBOptions
from tests.data_for_tests.propagation_credentials import FULL_CREDENTIALS

from common import OperatingSystem
from common.agent_events import ExploitationEvent
from common.credentials import Credentials
from common.event_queue import IAgentEventPublisher
from infection_monkey.exploit import IAgentBinaryRepository
from infection_monkey.i_puppet import TargetHost


@pytest.fixture
def mock_agent_event_publisher() -> IAgentEventPublisher:
    return MagicMock(spec=IAgentEventPublisher)


@pytest.fixture
def mock_agent_binary_repository() -> IAgentBinaryRepository:
    return MagicMock(spec=IAgentBinaryRepository)


@pytest.fixture
def mock_target_host() -> TargetHost:
    return TargetHost(ip=IPv4Address("1.1.1.1"), operating_system=OperatingSystem.WINDOWS)


CREDENTIALS: List[Credentials] = []


def test_authenticate__publishes_events(
    mock_agent_event_publisher: IAgentEventPublisher,
    mock_target_host: TargetHost,
):
    exploit_client = SMBExploitClient(mock_agent_event_publisher)
    exploit_client.authenticate(mock_target_host, SMBOptions(), FULL_CREDENTIALS)

    assert mock_agent_event_publisher.publish_event.called
    published_events = mock_agent_event_publisher.publish.call_args_list
    published_events = [param[0][0] for param in published_events]

    assert ExploitationEvent in [type(event) for event in published_events]


def test_authenticate__fails_if_no_credentials(
    mock_agent_event_publisher: IAgentEventPublisher,
    mock_target_host: TargetHost,
):
    exploit_client = SMBExploitClient(mock_agent_event_publisher)
    exploit_client.authenticate(mock_target_host, SMBOptions(), [])

    assert mock_agent_event_publisher.publish_event.called
    published_events = mock_agent_event_publisher.publish.call_args_list
    published_events = [param[0][0] for param in published_events]

    assert not all([event.exploitation_success for event in published_events])
