from ipaddress import IPv4Address
from pathlib import PurePath
from typing import List
from unittest.mock import MagicMock

import pytest
from agent_plugins.exploiters.smb.src.smb_client import ShareInfo, SMBClient
from agent_plugins.exploiters.smb.src.smb_exploit_client import EXECUTION_TAGS, SMBExploitClient
from agent_plugins.exploiters.smb.src.smb_options import SMBOptions
from tests.data_for_tests.propagation_credentials import FULL_CREDENTIALS

from common import OperatingSystem
from common.credentials import Credentials
from infection_monkey.exploit import IAgentBinaryRepository
from infection_monkey.exploit.tools import (
    RemoteAuthenticationError,
    RemoteCommandExecutionError,
    RemoteFileCopyError,
)
from infection_monkey.i_puppet import TargetHost

EXPLOITER_TAGS = {"smb-exploiter", "unit-test"}
COMMAND = "command"
CREDENTIALS: List[Credentials] = []
DESTINATION_PATH = PurePath("destination_path")
FILE = b"file content"
SHARED_RESOURECES = (
    ShareInfo("share1", "path1", current_uses=10, max_uses=1000),
    ShareInfo("share2", "path2", current_uses=100, max_uses=100),
    ShareInfo("share3", "", current_uses=0, max_uses=10),
)
TARGET_HOST = TargetHost(ip=IPv4Address("1.1.1.1"), operating_system=OperatingSystem.WINDOWS)


@pytest.fixture
def mock_smb_client():
    client = MagicMock(spec=SMBClient)
    client.connected.return_value = True
    client.query_shared_resources.return_value = SHARED_RESOURECES
    return client


@pytest.fixture
def mock_agent_binary_repository() -> IAgentBinaryRepository:
    return MagicMock(spec=IAgentBinaryRepository)


@pytest.fixture
def smb_exploit_client(mock_smb_client) -> SMBExploitClient:
    return SMBExploitClient(TARGET_HOST, SMBOptions(), mock_smb_client)


def test_login__succeeds(
    smb_exploit_client: SMBExploitClient,
):
    smb_exploit_client.login(FULL_CREDENTIALS[0], set())


def test_login__fails(
    mock_smb_client: SMBClient,
    smb_exploit_client: SMBExploitClient,
):
    mock_smb_client.connect_with_user.side_effect = Exception()
    with pytest.raises(RemoteAuthenticationError):
        smb_exploit_client.login(FULL_CREDENTIALS[0], set())


def test_execute__fails_if_not_authenticated(
    smb_exploit_client: SMBExploitClient,
):
    with pytest.raises(RemoteCommandExecutionError):
        smb_exploit_client.execute_detached(COMMAND, set())


def test_execute__fails_if_command_not_executed(
    mock_smb_client: SMBClient,
    smb_exploit_client: SMBExploitClient,
):
    mock_smb_client.run_service.side_effect = Exception("file")
    smb_exploit_client.login(FULL_CREDENTIALS[0], set())
    with pytest.raises(RemoteCommandExecutionError):
        smb_exploit_client.execute_detached(COMMAND, set())


def test_execute__succeeds(
    mock_smb_client: SMBClient,
    smb_exploit_client: SMBExploitClient,
):
    tags = EXPLOITER_TAGS.copy()
    smb_exploit_client.login(FULL_CREDENTIALS[0], set())
    smb_exploit_client.execute_detached(COMMAND, tags)

    assert tags == EXPLOITER_TAGS.union(EXECUTION_TAGS)


def test_copy_file__fails_if_not_authenticated(
    mock_smb_client: SMBClient,
    smb_exploit_client: SMBExploitClient,
):
    mock_smb_client.connected.return_value = False
    with pytest.raises(RemoteFileCopyError):
        smb_exploit_client.copy_file(FILE, DESTINATION_PATH, set())


def test_copy_file__fails_if_no_shares_found(
    mock_smb_client: SMBClient,
    smb_exploit_client: SMBExploitClient,
):
    mock_smb_client.query_shared_resources.return_value = ()
    smb_exploit_client.login(FULL_CREDENTIALS[0], set())
    with pytest.raises(RemoteFileCopyError):
        smb_exploit_client.copy_file(FILE, DESTINATION_PATH, set())


def test_copy_file__fails_if_unable_to_connect_to_share(
    mock_smb_client: SMBClient,
    smb_exploit_client: SMBExploitClient,
):
    mock_smb_client.connect_to_share.side_effect = Exception("failed")
    smb_exploit_client.login(FULL_CREDENTIALS[0], set())
    with pytest.raises(RemoteFileCopyError):
        smb_exploit_client.copy_file(FILE, DESTINATION_PATH, set())


def test_copy_file__fails_if_unable_to_copy_file(
    mock_smb_client: SMBClient,
    smb_exploit_client: SMBExploitClient,
):
    mock_smb_client.send_file.side_effect = Exception("file")
    smb_exploit_client.login(FULL_CREDENTIALS[0], set())
    with pytest.raises(RemoteFileCopyError):
        smb_exploit_client.copy_file(FILE, DESTINATION_PATH, set())
