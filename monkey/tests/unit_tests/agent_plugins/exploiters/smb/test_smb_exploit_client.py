from io import BytesIO
from ipaddress import IPv4Address
from threading import Event
from typing import List
from unittest.mock import MagicMock

import pytest
from agent_plugins.exploiters.smb.src.smb_client import SMBClient
from agent_plugins.exploiters.smb.src.smb_exploit_client import SMBExploitClient
from agent_plugins.exploiters.smb.src.smb_options import SMBOptions
from tests.data_for_tests.propagation_credentials import FULL_CREDENTIALS

from common import OperatingSystem
from common.credentials import Credentials
from infection_monkey.exploit import IAgentBinaryRepository
from infection_monkey.exploit.tools import RemoteFileCopyError
from infection_monkey.i_puppet import TargetHost

SHARED_RESOURECES = (
    {
        "shi2_netname": "share1",
        "shi2_path": "path1",
        "shi2_current_uses": 10,
        "shi2_max_uses": 1000,
    },
    {
        "shi2_netname": "share2",
        "shi2_path": "path2",
        "shi2_current_uses": 100,
        "shi2_max_uses": 100,
    },
    {"shi2_netname": "share3", "shi2_path": "", "shi2_current_uses": 0, "shi2_max_uses": 10},
)

FILE = BytesIO(b"file content")


@pytest.fixture
def mock_smb_client():
    client = MagicMock(spec=SMBClient)
    client.connected.return_value = True
    client.query_shared_resources.return_value = SHARED_RESOURECES
    return client


@pytest.fixture
def mock_agent_binary_repository() -> IAgentBinaryRepository:
    return MagicMock(spec=IAgentBinaryRepository)


@pytest.fixture
def mock_target_host() -> TargetHost:
    return TargetHost(ip=IPv4Address("1.1.1.1"), operating_system=OperatingSystem.WINDOWS)


CREDENTIALS: List[Credentials] = []


def test_execute__fails_if_not_authenticated(
    mock_target_host: TargetHost,
    mock_smb_client: SMBClient,
):
    exploit_client = SMBExploitClient(mock_target_host, SMBOptions(), mock_smb_client)
    with pytest.raises(Exception):
        exploit_client.execute([], 1, Event())


def test_execute__fails_if_file_not_copied(
    mock_target_host: TargetHost,
    mock_smb_client: SMBClient,
):
    exploit_client = SMBExploitClient(mock_target_host, SMBOptions(), mock_smb_client)
    exploit_client.authenticate(FULL_CREDENTIALS[0])
    with pytest.raises(Exception):
        exploit_client.execute([], 1, Event())


def test_execute__fails_if_command_not_executed(
    mock_target_host: TargetHost,
    mock_smb_client: SMBClient,
):
    mock_smb_client.run_service.side_effect = Exception("file")
    exploit_client = SMBExploitClient(mock_target_host, SMBOptions(), mock_smb_client)
    exploit_client.authenticate(FULL_CREDENTIALS[0])
    exploit_client.copy_file(FILE)
    with pytest.raises(Exception):
        exploit_client.execute([], 1, Event())


def test_copy_file__fails_if_not_authenticated(
    mock_target_host: TargetHost,
    mock_smb_client: SMBClient,
):
    mock_smb_client.connected.return_value = False
    exploit_client = SMBExploitClient(mock_target_host, SMBOptions(), mock_smb_client)
    with pytest.raises(RemoteFileCopyError):
        exploit_client.copy_file(FILE)


def test_copy_file__fails_if_no_shares_found(
    mock_target_host: TargetHost,
    mock_smb_client: SMBClient,
):
    mock_smb_client.query_shared_resources.return_value = None
    exploit_client = SMBExploitClient(mock_target_host, SMBOptions(), mock_smb_client)
    exploit_client.authenticate(FULL_CREDENTIALS[0])
    with pytest.raises(RemoteFileCopyError):
        exploit_client.copy_file(FILE)


def test_copy_file__fails_if_unable_to_connect_to_share(
    mock_target_host: TargetHost,
    mock_smb_client: SMBClient,
):
    mock_smb_client.connect_to_share.side_effect = Exception("failed")
    exploit_client = SMBExploitClient(mock_target_host, SMBOptions(), mock_smb_client)
    exploit_client.authenticate(FULL_CREDENTIALS[0])
    with pytest.raises(RemoteFileCopyError):
        exploit_client.copy_file(FILE)


def test_copy_file__fails_if_unable_to_copy_file(
    mock_target_host: TargetHost,
    mock_smb_client: SMBClient,
):
    mock_smb_client.send_file.side_effect = Exception("file")
    exploit_client = SMBExploitClient(mock_target_host, SMBOptions(), mock_smb_client)
    exploit_client.authenticate(FULL_CREDENTIALS[0])
    with pytest.raises(RemoteFileCopyError):
        exploit_client.copy_file(FILE)
