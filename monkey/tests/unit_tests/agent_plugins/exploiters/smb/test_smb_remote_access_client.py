from ipaddress import IPv4Address
from pathlib import PureWindowsPath
from typing import List
from unittest.mock import MagicMock

import pytest
from agent_plugins.exploiters.smb.src.smb_client import ShareInfo, SMBClient
from agent_plugins.exploiters.smb.src.smb_options import SMBOptions
from agent_plugins.exploiters.smb.src.smb_remote_access_client import (
    COPY_FILE_TAGS,
    EXECUTION_TAGS,
    LOGIN_TAGS,
    SHARE_DISCOVERY_TAGS,
    SMBRemoteAccessClient,
)
from tests.data_for_tests.propagation_credentials import FULL_CREDENTIALS

from common import OperatingSystem
from common.credentials import Credentials
from infection_monkey.exploit import IAgentBinaryRepository
from infection_monkey.exploit.tools import (
    RemoteAuthenticationError,
    RemoteCommandExecutionError,
    RemoteFileCopyError,
)
from infection_monkey.i_puppet import TargetHost

EXPLOITER_TAGS = {"smb-exploiter", "unit-test"}
CREDENTIALS: List[Credentials] = []
DESTINATION_PATH = PureWindowsPath("C:\\destination_path")
FILE = b"file content"
SHARED_RESOURECES = (
    ShareInfo("share1", PureWindowsPath("C:\\path1"), current_uses=10, max_uses=1000),
    ShareInfo("share2", PureWindowsPath("C:\\path2"), current_uses=100, max_uses=100),
    ShareInfo("share3", PureWindowsPath("C:\\"), current_uses=0, max_uses=10),
    ShareInfo("share4", PureWindowsPath("invalid_path"), current_uses=50, max_uses=100),
)
TARGET_HOST = TargetHost(ip=IPv4Address("1.1.1.1"), operating_system=OperatingSystem.WINDOWS)


def stub_command_builder(*args, **kwargs):
    return "command"


@pytest.fixture
def mock_smb_client():
    client = MagicMock(spec=SMBClient)
    client.connected.return_value = False

    def set_connected(value: bool):
        client.connected.return_value = value

    client.connect_with_user.side_effect = lambda *_, **__: set_connected(True)
    return client


@pytest.fixture
def mock_agent_binary_repository() -> IAgentBinaryRepository:
    return MagicMock(spec=IAgentBinaryRepository)


@pytest.fixture
def smb_remote_access_client(mock_smb_client) -> SMBRemoteAccessClient:
    return SMBRemoteAccessClient(TARGET_HOST, SMBOptions(), stub_command_builder, mock_smb_client)


def test_login__succeeds(
    smb_remote_access_client: SMBRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()

    smb_remote_access_client.login(FULL_CREDENTIALS[0], tags)

    assert tags == EXPLOITER_TAGS.union(LOGIN_TAGS)


def test_login__fails(
    mock_smb_client: SMBClient,
    smb_remote_access_client: SMBRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()
    mock_smb_client.connect_with_user.side_effect = Exception()

    with pytest.raises(RemoteAuthenticationError):
        smb_remote_access_client.login(FULL_CREDENTIALS[0], tags)

    assert tags == EXPLOITER_TAGS.union(LOGIN_TAGS)


def test_execute__fails_if_not_authenticated(
    smb_remote_access_client: SMBRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()

    with pytest.raises(RemoteCommandExecutionError):
        smb_remote_access_client.execute_agent(DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS


def test_execute__fails_if_command_not_executed(
    mock_smb_client: SMBClient,
    smb_remote_access_client: SMBRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()
    mock_smb_client.run_service.side_effect = Exception("file")
    smb_remote_access_client.login(FULL_CREDENTIALS[0], set())

    with pytest.raises(RemoteCommandExecutionError):
        smb_remote_access_client.execute_agent(DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS.union(EXECUTION_TAGS)


def test_execute__succeeds(
    mock_smb_client: SMBClient,
    smb_remote_access_client: SMBRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()

    smb_remote_access_client.login(FULL_CREDENTIALS[0], set())
    smb_remote_access_client.execute_agent(DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS.union(EXECUTION_TAGS)


def test_copy_file__fails_if_not_authenticated(
    mock_smb_client: SMBClient,
    smb_remote_access_client: SMBRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()
    mock_smb_client.connected.return_value = False

    with pytest.raises(RemoteFileCopyError):
        smb_remote_access_client.copy_file(FILE, DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS


def test_copy_file__fails_if_no_shares_found(
    mock_smb_client: SMBClient,
    smb_remote_access_client: SMBRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()
    mock_smb_client.query_shared_resources.return_value = ()
    smb_remote_access_client.login(FULL_CREDENTIALS[0], set())

    with pytest.raises(RemoteFileCopyError):
        smb_remote_access_client.copy_file(FILE, DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS.union(SHARE_DISCOVERY_TAGS)


def test_copy_file__fails_if_unable_to_connect_to_share(
    mock_smb_client: SMBClient,
    smb_remote_access_client: SMBRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()
    mock_smb_client.query_shared_resources.return_value = SHARED_RESOURECES
    mock_smb_client.connect_to_share.side_effect = Exception("failed")
    smb_remote_access_client.login(FULL_CREDENTIALS[0], set())

    with pytest.raises(RemoteFileCopyError):
        smb_remote_access_client.copy_file(FILE, DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS.union(SHARE_DISCOVERY_TAGS)


def test_copy_file__fails_if_unable_to_send_file(
    mock_smb_client: SMBClient,
    smb_remote_access_client: SMBRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()
    mock_smb_client.query_shared_resources.return_value = SHARED_RESOURECES
    mock_smb_client.send_file.side_effect = Exception("file")
    smb_remote_access_client.login(FULL_CREDENTIALS[0], set())

    with pytest.raises(RemoteFileCopyError):
        smb_remote_access_client.copy_file(FILE, DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS.union(SHARE_DISCOVERY_TAGS, COPY_FILE_TAGS)


def test_copy_file__success(
    mock_smb_client: SMBClient,
    smb_remote_access_client: SMBRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()
    mock_smb_client.query_shared_resources.return_value = SHARED_RESOURECES
    smb_remote_access_client.login(FULL_CREDENTIALS[0], set())

    smb_remote_access_client.copy_file(FILE, DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS.union(SHARE_DISCOVERY_TAGS, COPY_FILE_TAGS)


def test_get_writable_paths(
    mock_smb_client: SMBClient, smb_remote_access_client: SMBRemoteAccessClient
):
    mock_smb_client.query_shared_resources.return_value = SHARED_RESOURECES
    writable_paths = smb_remote_access_client.get_writable_paths()

    assert len(writable_paths) == 2
    assert SHARED_RESOURECES[0].path in writable_paths
    assert SHARED_RESOURECES[2].path in writable_paths
