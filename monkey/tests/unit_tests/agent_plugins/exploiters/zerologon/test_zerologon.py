from ipaddress import IPv4Address
from unittest.mock import MagicMock

import pytest
from monkeyevents import ExploitationEvent, PasswordRestorationEvent

from common.event_queue import IAgentEventPublisher
from infection_monkey.i_puppet import TargetHost
from infection_monkey.utils.ids import get_agent_id

NETBIOS_NAME = "NetBIOS Name"

USERS = ["Administrator", "Bob"]
RIDS = ["500", "1024"]
LM_HASHES = ["abc123", "098zyx"]
NT_HASHES = ["def456", "765vut"]


@pytest.fixture
def mock_agent_event_publisher():
    return MagicMock(spec=IAgentEventPublisher)


@pytest.fixture
def zerologon_exploiter_object(monkeypatch, mock_agent_event_publisher):
    from agent_plugins.exploiters.zerologon.src.zerologon import ZerologonExploiter

    def mock_report_login_attempt(**kwargs):
        return None

    obj = ZerologonExploiter()
    monkeypatch.setattr(obj, "dc_name", NETBIOS_NAME, raising=False)
    monkeypatch.setattr(obj, "report_login_attempt", mock_report_login_attempt)
    monkeypatch.setattr(obj, "host", TargetHost(ip=IPv4Address("1.1.1.1")))
    monkeypatch.setattr(obj, "agent_event_publisher", mock_agent_event_publisher)
    monkeypatch.setattr(obj, "agent_id", get_agent_id())
    return obj


@pytest.mark.slow
def test_assess_password_change_attempt_result_no_error(
    zerologon_exploiter_object, mock_agent_event_publisher
):
    dummy_password_change_attempt_result = {"ErrorCode": 0}
    assert zerologon_exploiter_object.assess_password_change_attempt_result(
        dummy_password_change_attempt_result, 0
    )
    assert mock_agent_event_publisher.publish.call_count == 1
    assert mock_agent_event_publisher.publish.call_args[0][0].__class__ is ExploitationEvent
    assert mock_agent_event_publisher.publish.call_args[0][0].success


@pytest.mark.slow
def test_assess_password_change_attempt_result_with_error(
    zerologon_exploiter_object, mock_agent_event_publisher
):
    dummy_password_change_attempt_result = {"ErrorCode": 1}
    assert not zerologon_exploiter_object.assess_password_change_attempt_result(
        dummy_password_change_attempt_result, 0
    )
    assert mock_agent_event_publisher.publish.call_count == 1
    assert mock_agent_event_publisher.publish.call_args[0][0].__class__ is ExploitationEvent
    assert not mock_agent_event_publisher.publish.call_args[0][0].success


@pytest.mark.slow
def test_assess_restoration_attempt_result_restored(
    zerologon_exploiter_object, mock_agent_event_publisher
):
    dummy_restoration_attempt_result = object()
    assert zerologon_exploiter_object.assess_restoration_attempt_result(
        dummy_restoration_attempt_result
    )
    assert mock_agent_event_publisher.publish.call_count == 1
    assert mock_agent_event_publisher.publish.call_args[0][0].__class__ is PasswordRestorationEvent
    assert mock_agent_event_publisher.publish.call_args[0][0].success


@pytest.mark.slow
def test_assess_restoration_attempt_result_not_restored(
    zerologon_exploiter_object, mock_agent_event_publisher
):
    dummy_restoration_attempt_result = False
    assert not zerologon_exploiter_object.assess_restoration_attempt_result(
        dummy_restoration_attempt_result
    )
    assert mock_agent_event_publisher.publish.call_count == 1
    assert mock_agent_event_publisher.publish.call_args[0][0].__class__ is PasswordRestorationEvent
    assert not mock_agent_event_publisher.publish.call_args[0][0].success


@pytest.mark.slow
def test__extract_user_creds_from_secrets_good_data(zerologon_exploiter_object):
    mock_dumped_secrets = [
        f"{USERS[i]}:{RIDS[i]}:{LM_HASHES[i]}:{NT_HASHES[i]}:::" for i in range(len(USERS))
    ]
    expected_extracted_creds = {
        USERS[0]: {
            "RID": int(RIDS[0]),
            "lm_hash": LM_HASHES[0],
            "nt_hash": NT_HASHES[0],
        },
        USERS[1]: {
            "RID": int(RIDS[1]),
            "lm_hash": LM_HASHES[1],
            "nt_hash": NT_HASHES[1],
        },
    }
    assert zerologon_exploiter_object._extract_user_creds_from_secrets(mock_dumped_secrets) is None
    assert zerologon_exploiter_object._extracted_creds == expected_extracted_creds


@pytest.mark.slow
def test__extract_user_creds_from_secrets_bad_data(zerologon_exploiter_object):
    mock_dumped_secrets = [
        f"{USERS[i]}:{RIDS[i]}:::{LM_HASHES[i]}:{NT_HASHES[i]}:::" for i in range(len(USERS))
    ]
    expected_extracted_creds = {
        USERS[0]: {"RID": int(RIDS[0]), "lm_hash": "", "nt_hash": ""},
        USERS[1]: {"RID": int(RIDS[1]), "lm_hash": "", "nt_hash": ""},
    }
    assert zerologon_exploiter_object._extract_user_creds_from_secrets(mock_dumped_secrets) is None
    assert zerologon_exploiter_object._extracted_creds == expected_extracted_creds
