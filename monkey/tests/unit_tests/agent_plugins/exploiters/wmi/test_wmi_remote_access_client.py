from ipaddress import IPv4Address
from pathlib import PureWindowsPath
from unittest.mock import MagicMock

import pytest
from agent_plugins.exploiters.wmi.src.smb_remote_access_client import SMBRemoteAccessClient
from agent_plugins.exploiters.wmi.src.wmi_client import WMIClient
from agent_plugins.exploiters.wmi.src.wmi_options import WMIOptions
from agent_plugins.exploiters.wmi.src.wmi_remote_access_client import (
    EXECUTION_TAGS,
    LOGIN_TAGS,
    WMIRemoteAccessClient,
)
from monkeytypes import OperatingSystem
from tests.data_for_tests.propagation_credentials import FULL_CREDENTIALS

from infection_monkey.exploit.tools import RemoteAuthenticationError, RemoteCommandExecutionError
from infection_monkey.i_puppet import TargetHost

DESTINATION_PATH = PureWindowsPath("C:\\destination_path\\agent.exe")
EXPLOITER_TAGS = {"wmi-exploiter", "unit-test"}
TARGET_HOST = TargetHost(ip=IPv4Address("1.1.1.1"), operating_system=OperatingSystem.WINDOWS)


def stub_command_builder(*args, **kwargs):
    return "command"


@pytest.fixture
def mock_smb_client():
    return MagicMock(spec=SMBRemoteAccessClient)


@pytest.fixture
def mock_wmi_client():
    client = MagicMock(spec=WMIClient)
    client.connected.return_value = False

    def set_connected(value: bool):
        client.connected.return_value = value

    client.login.side_effect = lambda *_, **__: set_connected(True)
    return client


@pytest.fixture
def wmi_remote_access_client(mock_smb_client, mock_wmi_client) -> WMIRemoteAccessClient:
    return WMIRemoteAccessClient(
        TARGET_HOST, WMIOptions(), stub_command_builder, mock_smb_client, mock_wmi_client
    )


def test_login__succeeds(
    wmi_remote_access_client: WMIRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()

    wmi_remote_access_client.login(FULL_CREDENTIALS[0], tags)

    assert tags == EXPLOITER_TAGS.union(LOGIN_TAGS)


def test_login__fails_due_to_smb(
    mock_smb_client: SMBRemoteAccessClient,
    wmi_remote_access_client: WMIRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()
    mock_smb_client.login.side_effect = RemoteAuthenticationError()

    with pytest.raises(RemoteAuthenticationError):
        wmi_remote_access_client.login(FULL_CREDENTIALS[0], tags)

    assert tags == EXPLOITER_TAGS.union(LOGIN_TAGS)


def test_login__fails_due_to_wmi(
    mock_wmi_client: WMIClient,
    wmi_remote_access_client: WMIRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()
    mock_wmi_client.login.side_effect = Exception()

    with pytest.raises(RemoteAuthenticationError):
        wmi_remote_access_client.login(FULL_CREDENTIALS[0], tags)

    assert tags == EXPLOITER_TAGS.union(LOGIN_TAGS)


def test_execute__fails_if_not_authenticated(
    wmi_remote_access_client: WMIRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()

    with pytest.raises(RemoteCommandExecutionError):
        wmi_remote_access_client.execute_agent(DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS


def test_execute__fails_if_command_not_executed(
    mock_wmi_client: WMIClient,
    wmi_remote_access_client: WMIRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()
    mock_wmi_client.execute_remote_process.side_effect = Exception("file")
    wmi_remote_access_client.login(FULL_CREDENTIALS[0], set())

    with pytest.raises(RemoteCommandExecutionError):
        wmi_remote_access_client.execute_agent(DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS.union(EXECUTION_TAGS)


def test_execute__succeeds(
    wmi_remote_access_client: WMIRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()

    wmi_remote_access_client.login(FULL_CREDENTIALS[0], set())
    wmi_remote_access_client.execute_agent(DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS.union(EXECUTION_TAGS)
