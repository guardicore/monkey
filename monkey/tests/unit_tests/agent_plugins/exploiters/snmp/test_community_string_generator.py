from agent_plugins.exploiters.snmp.src.community_string_generator import generate_community_strings
from monkeytypes import Credentials, LMHash, Password, SSHKeypair, Username

USERNAME_A_STR = "a"
USERNAME_B_STR = "b"
USERNAME_C_STR = "c"
USERNAME_A = Username(username=USERNAME_A_STR)
USERNAME_B = Username(username=USERNAME_B_STR)
USERNAME_C = Username(username=USERNAME_C_STR)
LMHASH_A_STR = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
LMHASH_A = LMHash(lm_hash=LMHASH_A_STR)
NTHASH_A_STR = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
NTHASH_A = LMHash(lm_hash=NTHASH_A_STR)
PASSWORD_A_STR = "a"
PASSWORD_B_STR = "b"
PASSWORD_C_STR = "c"
PASSWORD_A = Password(password=PASSWORD_A_STR)
PASSWORD_B = Password(password=PASSWORD_B_STR)
PASSWORD_C = Password(password=PASSWORD_C_STR)
SSHKEYPAIR_A = SSHKeypair(private_key="a", public_key="b")


def test_ordering():
    # All identities should come before all secrets
    # All identities should be in the same order as the input credentials
    # All secrets should be in the same order as the input credentials
    credentials = [
        Credentials(identity=USERNAME_A, secret=PASSWORD_A),
        Credentials(identity=USERNAME_B, secret=None),
        Credentials(identity=None, secret=PASSWORD_B),
        Credentials(identity=USERNAME_C, secret=PASSWORD_C),
    ]
    expected_result = [
        USERNAME_A_STR,
        USERNAME_B_STR,
        USERNAME_C_STR,
        PASSWORD_A_STR,
        PASSWORD_B_STR,
        PASSWORD_C_STR,
    ]

    assert list(generate_community_strings(credentials)) == expected_result


def test_identities_are_filtered():
    # The only identity type allowed is Username
    credentials = [
        Credentials(identity=USERNAME_A, secret=PASSWORD_A),
        Credentials(identity=None, secret=PASSWORD_B),
    ]
    expected_result = [USERNAME_A_STR, PASSWORD_A_STR, PASSWORD_B_STR]

    result = list(generate_community_strings(credentials))

    assert result == expected_result


def test_secrets_are_filtered():
    # The only secret type allowed is Password
    credentials = [
        Credentials(identity=None, secret=PASSWORD_A),
        Credentials(identity=USERNAME_A, secret=LMHASH_A),
        Credentials(identity=USERNAME_B, secret=PASSWORD_B),
        Credentials(identity=None, secret=NTHASH_A),
        Credentials(identity=None, secret=SSHKEYPAIR_A),
    ]
    expected_result = [USERNAME_A_STR, USERNAME_B_STR, PASSWORD_A_STR, PASSWORD_B_STR]

    result = list(generate_community_strings(credentials))

    assert result == expected_result


def test_identities_are_unique():
    credentials = [
        Credentials(identity=USERNAME_A, secret=None),
        Credentials(identity=USERNAME_A, secret=PASSWORD_A),
        Credentials(identity=USERNAME_B, secret=None),
        Credentials(identity=USERNAME_B, secret=None),
    ]
    expected_result = [USERNAME_A_STR, USERNAME_B_STR, PASSWORD_A_STR]

    result = list(generate_community_strings(credentials))

    assert result == expected_result


def test_secrets_are_unique():
    credentials = [
        Credentials(identity=None, secret=PASSWORD_A),
        Credentials(identity=USERNAME_A, secret=PASSWORD_A),
        Credentials(identity=None, secret=PASSWORD_B),
        Credentials(identity=None, secret=PASSWORD_B),
    ]
    expected_result = [USERNAME_A_STR, PASSWORD_A_STR, PASSWORD_B_STR]

    result = list(generate_community_strings(credentials))

    assert result == expected_result
