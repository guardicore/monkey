import pytest
from agent_plugins.exploiters.snmp.src.snmp_options import SNMPOptions

DOWNLOAD_TIMEOUT = 44
REQUEST_TIMEOUT = 3
RETRIES = 5


SNMP_OPTIONS_DICT = {
    "agent_binary_download_timeout": DOWNLOAD_TIMEOUT,
    "snmp_request_timeout": REQUEST_TIMEOUT,
    "snmp_retries": RETRIES,
}


SNMP_OPTIONS_OBJECT = SNMPOptions(
    agent_binary_download_timeout=DOWNLOAD_TIMEOUT,
    snmp_request_timeout=REQUEST_TIMEOUT,
    snmp_retries=RETRIES,
)

DOWNLOAD_TIMEOUT_EXCEPTION = {"agent_binary_download_timeout": -100}
REQUEST_TIMEOUT_EXCEPTION = {"snmp_request_timeout": -1}
RETRIES_EXCEPTION = {"snmp_retries": -1}


def test_snmp_options__serialization():
    assert SNMP_OPTIONS_OBJECT.model_dump(mode="json") == SNMP_OPTIONS_DICT


def test_hadoop_options__full_serialization():
    assert SNMPOptions(**SNMP_OPTIONS_OBJECT.model_dump(mode="json")) == SNMP_OPTIONS_OBJECT


def test_hadoop_options__deserialization():
    assert SNMPOptions(**SNMP_OPTIONS_DICT) == SNMP_OPTIONS_OBJECT


def test_hadoop_options__default():
    snmp_options = SNMPOptions()

    assert snmp_options.agent_binary_download_timeout == 60.0
    assert snmp_options.snmp_request_timeout == 0.5
    assert snmp_options.snmp_retries == 3


@pytest.mark.parametrize(
    "options_dict",
    [
        DOWNLOAD_TIMEOUT_EXCEPTION,
        REQUEST_TIMEOUT_EXCEPTION,
        RETRIES_EXCEPTION,
    ],
)
def test_hadoop_options_constrains(options_dict):
    with pytest.raises(ValueError):
        SNMPOptions(**options_dict)
