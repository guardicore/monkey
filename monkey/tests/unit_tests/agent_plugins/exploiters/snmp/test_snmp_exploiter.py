from ipaddress import IPv4Address
from threading import Event
from typing import Callable
from unittest.mock import MagicMock

import pytest
from agent_plugins.exploiters.snmp.src.snmp_exploit_client import SNMPExploitClient
from agent_plugins.exploiters.snmp.src.snmp_exploiter import SNMPExploiter
from agent_plugins.exploiters.snmp.src.snmp_options import SNMPOptions
from monkeytypes import OperatingSystem

from infection_monkey.exploit import (
    AgentBinaryTransform,
    IAgentOTPProvider,
    IHTTPAgentBinaryServerRegistrar,
)
from infection_monkey.i_puppet import ExploiterResult, TargetHost

TARGET_IP = IPv4Address("1.1.1.1")
DOWNLOAD_URL = "http://download.me"
COMMUNITY_STRINGS = ["public", "private"]


@pytest.fixture()
def target_host() -> TargetHost:
    return TargetHost(ip=IPv4Address("1.1.1.1"), operating_system=OperatingSystem.LINUX)


@pytest.fixture
def mock_http_agent_binary_server_registrar() -> IHTTPAgentBinaryServerRegistrar:
    mock_registrar = MagicMock(spec=IHTTPAgentBinaryServerRegistrar)
    return mock_registrar


@pytest.fixture
def mock_agent_binary_transform() -> AgentBinaryTransform:
    return MagicMock()


@pytest.fixture
def mock_snmp_exploit_client() -> SNMPExploitClient:
    mock_snmp_exploit_client = MagicMock(spec=SNMPExploitClient)
    mock_snmp_exploit_client.exploit_host.return_value = (False, False)
    return mock_snmp_exploit_client


@pytest.fixture
def mock_otp_provider():
    mock_otp_provider = MagicMock(spec=IAgentOTPProvider)
    mock_otp_provider.get_otp.return_value = "123456"
    return mock_otp_provider


@pytest.fixture
def snmp_exploiter(
    mock_snmp_exploit_client: SNMPExploitClient,
    mock_http_agent_binary_server_registrar: IHTTPAgentBinaryServerRegistrar,
    mock_agent_binary_transform: AgentBinaryTransform,
    mock_otp_provider: IAgentOTPProvider,
    agent_otp_environment_variable: str,
) -> SNMPExploiter:
    return SNMPExploiter(
        mock_snmp_exploit_client,
        mock_http_agent_binary_server_registrar,
        mock_agent_binary_transform,
        mock_otp_provider,
        agent_otp_environment_variable,
    )


@pytest.fixture
def exploit_host(
    snmp_exploiter: SNMPExploiter, target_host: TargetHost
) -> Callable[[], ExploiterResult]:
    def _inner() -> ExploiterResult:
        return snmp_exploiter.exploit_host(
            host=target_host,
            options=SNMPOptions(),
            community_strings=COMMUNITY_STRINGS,
            interrupt=Event(),
        )

    return _inner


def test_exploit_host__succeeds(
    exploit_host,
    mock_snmp_exploit_client,
    mock_http_agent_binary_server_registrar,
):
    mock_snmp_exploit_client.exploit_host.return_value = (True, True)
    result = exploit_host()

    assert mock_http_agent_binary_server_registrar.clear_reservation.called
    assert mock_http_agent_binary_server_registrar.reserve_download.called
    assert result.exploitation_success
    assert result.propagation_success


def test_exploit_host__fails_if_reserve_download_fails(
    exploit_host, mock_http_agent_binary_server_registrar
):
    mock_http_agent_binary_server_registrar.reserve_download.side_effect = Exception()
    result = exploit_host()

    assert not mock_http_agent_binary_server_registrar.clear_reservation.called
    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_host__success_returned_on_server_stop_fail(
    exploit_host, mock_snmp_exploit_client, mock_http_agent_binary_server_registrar
):
    mock_snmp_exploit_client.exploit_host.return_value = (True, True)
    mock_http_agent_binary_server_registrar.clear_reservation.side_effect = Exception()

    result = exploit_host()

    assert mock_http_agent_binary_server_registrar.clear_reservation.called
    assert result.exploitation_success
    assert result.propagation_success


def test_exploit_host__fails_on_snmp_exception(
    mock_snmp_exploit_client, exploit_host, mock_http_agent_binary_server_registrar
):
    mock_snmp_exploit_client.exploit_host.side_effect = Exception()
    result = exploit_host()

    assert mock_http_agent_binary_server_registrar.clear_reservation.called
    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_attempt_on_all_community_strings(
    snmp_exploiter: SNMPExploiter,
    mock_snmp_exploit_client: SNMPExploitClient,
    target_host: TargetHost,
):
    snmp_exploiter.exploit_host(
        host=target_host,
        options=SNMPOptions(),
        community_strings=COMMUNITY_STRINGS,
        interrupt=Event(),
    )

    community_strings_passed_to_exploit = [
        args[0][1] for args in mock_snmp_exploit_client.exploit_host.call_args_list
    ]

    assert len(community_strings_passed_to_exploit) == len(COMMUNITY_STRINGS)
    for community_string in COMMUNITY_STRINGS:
        assert community_string in community_strings_passed_to_exploit


def test_exploit_attempt_skipped_on_interrupt(
    snmp_exploiter: SNMPExploiter,
    mock_snmp_exploit_client: SNMPExploitClient,
    target_host: TargetHost,
):
    interrupt = Event()
    interrupt.set()
    snmp_exploiter.exploit_host(
        host=target_host,
        options=SNMPOptions(),
        community_strings=COMMUNITY_STRINGS,
        interrupt=interrupt,
    )

    assert mock_snmp_exploit_client.exploit_host.call_count == 0
