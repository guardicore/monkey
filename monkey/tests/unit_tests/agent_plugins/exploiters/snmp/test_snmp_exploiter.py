from ipaddress import IPv4Address
from threading import Event
from typing import Callable
from unittest.mock import MagicMock

import pytest
from agent_plugins.exploiters.snmp.src.snmp_exploit_client import SNMPExploitClient
from agent_plugins.exploiters.snmp.src.snmp_exploiter import CommunityStringGenerator, SNMPExploiter
from agent_plugins.exploiters.snmp.src.snmp_options import SNMPOptions

from common import OperatingSystem
from infection_monkey.exploit import IAgentOTPProvider
from infection_monkey.exploit.tools import HTTPBytesServer
from infection_monkey.i_puppet import ExploiterResultData, TargetHost
from infection_monkey.utils.ids import get_agent_id

AGENT_ID = get_agent_id()
TARGET_IP = IPv4Address("1.1.1.1")
SERVERS = ["10.10.10.10"]
DOWNLOAD_URL = "http://download.me"
COMMUNITY_STRINGS = ["public", "private"]


@pytest.fixture()
def target_host() -> TargetHost:
    return TargetHost(ip=IPv4Address("1.1.1.1"), operating_system=OperatingSystem.LINUX)


@pytest.fixture
def mock_bytes_server() -> HTTPBytesServer:
    mock_bytes_server = MagicMock(spec=HTTPBytesServer)
    mock_bytes_server.download_url = DOWNLOAD_URL
    mock_bytes_server.bytes_downloaded = Event()
    mock_bytes_server.bytes_downloaded.set()
    return mock_bytes_server


@pytest.fixture
def mock_snmp_exploit_client() -> SNMPExploitClient:
    mock_snmp_exploit_client = MagicMock(spec=SNMPExploitClient)
    mock_snmp_exploit_client.exploit_host.return_value = (False, False)
    return mock_snmp_exploit_client


@pytest.fixture
def mock_start_agent_binary_server(mock_bytes_server) -> HTTPBytesServer:
    return MagicMock(return_value=mock_bytes_server)


@pytest.fixture
def mock_otp_provider():
    mock_otp_provider = MagicMock(spec=IAgentOTPProvider)
    mock_otp_provider.get_otp.return_value = "123456"
    return mock_otp_provider


@pytest.fixture
def mock_community_string_generator():
    return MagicMock(return_value=COMMUNITY_STRINGS)


@pytest.fixture
def snmp_exploiter(
    mock_snmp_exploit_client: SNMPExploitClient,
    mock_start_agent_binary_server: Callable[[TargetHost], HTTPBytesServer],
    mock_community_string_generator: CommunityStringGenerator,
    mock_otp_provider: IAgentOTPProvider,
) -> SNMPExploiter:
    return SNMPExploiter(
        AGENT_ID,
        mock_snmp_exploit_client,
        mock_start_agent_binary_server,
        mock_community_string_generator,
        mock_otp_provider,
    )


@pytest.fixture
def exploit_host(
    snmp_exploiter: SNMPExploiter, target_host: TargetHost
) -> Callable[[], ExploiterResultData]:
    def _inner() -> ExploiterResultData:
        return snmp_exploiter.exploit_host(
            host=target_host,
            servers=SERVERS,
            current_depth=1,
            options=SNMPOptions(),
            interrupt=Event(),
        )

    return _inner


def test_exploit_host__succeeds(exploit_host, mock_snmp_exploit_client, mock_bytes_server):
    mock_snmp_exploit_client.exploit_host.return_value = (True, True)
    result = exploit_host()

    assert mock_bytes_server.stop.called
    assert result.exploitation_success
    assert result.propagation_success


def test_exploit_host__fails_if_server_fails_to_start(
    exploit_host, mock_start_agent_binary_server, mock_bytes_server
):
    mock_start_agent_binary_server.side_effect = Exception()
    result = exploit_host()

    assert not mock_bytes_server.stop.called
    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_host__success_returned_on_server_stop_fail(
    exploit_host, mock_snmp_exploit_client, mock_bytes_server
):
    mock_snmp_exploit_client.exploit_host.return_value = (True, True)
    mock_bytes_server.stop.side_effect = Exception()

    result = exploit_host()

    assert mock_bytes_server.stop.called
    assert result.exploitation_success
    assert result.propagation_success


def test_exploit_host__fails_on_snmp_exception(
    mock_snmp_exploit_client, exploit_host, mock_bytes_server
):
    mock_snmp_exploit_client.exploit_host.side_effect = Exception()
    result = exploit_host()

    assert mock_bytes_server.stop.called
    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_attempt_on_all_community_strings(
    snmp_exploiter: SNMPExploiter,
    mock_snmp_exploit_client: SNMPExploitClient,
    target_host: TargetHost,
):
    snmp_exploiter.exploit_host(
        host=target_host,
        servers=SERVERS,
        current_depth=1,
        options=SNMPOptions(),
        interrupt=Event(),
    )

    community_strings_passed_to_exploit = [
        args[0][1] for args in mock_snmp_exploit_client.exploit_host.call_args_list
    ]

    assert len(community_strings_passed_to_exploit) == len(COMMUNITY_STRINGS)
    for community_string in COMMUNITY_STRINGS:
        assert community_string in community_strings_passed_to_exploit


def test_exploit_attempt_skipped_on_interrupt(
    snmp_exploiter: SNMPExploiter,
    mock_snmp_exploit_client: SNMPExploitClient,
    target_host: TargetHost,
):
    interrupt = Event()
    interrupt.set()
    snmp_exploiter.exploit_host(
        host=target_host,
        servers=SERVERS,
        current_depth=1,
        options=SNMPOptions(),
        interrupt=interrupt,
    )

    assert mock_snmp_exploit_client.exploit_host.call_count == 0
