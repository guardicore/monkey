from ipaddress import IPv4Address
from threading import Event
from typing import Callable, Tuple, Type
from unittest.mock import MagicMock
from uuid import UUID

import pytest
from agent_plugins.exploiters.snmp.src.snmp_client import SNMPClient, SNMPRequestTimedOut
from agent_plugins.exploiters.snmp.src.snmp_exploit_client import SNMPExploitClient
from agent_plugins.exploiters.snmp.src.snmp_options import SNMPOptions
from monkeyevents import ExploitationEvent, PropagationEvent
from monkeytypes import OperatingSystem

from common.event_queue import IAgentEventPublisher
from infection_monkey.i_puppet import TargetHost

EXPLOITER_NAME = "SNMP"
AGENT_ID = UUID("9614480d-471b-4568-86b5-cb922a34ed8a")

COMMAND = "echo test"
COMMAND_NAME = "command0"
COMMUNITY_STRING = "community"


@pytest.fixture
def mock_snmp_client() -> MagicMock:
    client = MagicMock(spec=SNMPClient)
    return client


@pytest.fixture
def mock_agent_event_publisher() -> IAgentEventPublisher:
    return MagicMock(spec=IAgentEventPublisher)


@pytest.fixture
def mock_command_name_generator() -> Callable[[], str]:
    generator = MagicMock()
    generator.return_value = COMMAND_NAME
    return generator


@pytest.fixture
def target_host() -> TargetHost:
    return TargetHost(ip=IPv4Address("1.1.1.1"), operating_system=OperatingSystem.LINUX)


@pytest.fixture
def agent_binary_downloaded() -> Event:
    agent_binary_downloaded_event = Event()
    agent_binary_downloaded_event.set()

    return agent_binary_downloaded_event


@pytest.fixture
def snmp_exploiter_client(
    mock_agent_event_publisher: IAgentEventPublisher,
    mock_snmp_client,
    mock_command_name_generator,
) -> SNMPExploitClient:
    return SNMPExploitClient(
        AGENT_ID,
        mock_agent_event_publisher,
        EXPLOITER_NAME,
        mock_snmp_client,
        mock_command_name_generator,
    )


@pytest.fixture
def exploit_host(
    target_host, agent_binary_downloaded, snmp_exploiter_client
) -> Callable[[], Tuple[bool, bool]]:
    def _inner() -> Tuple[bool, bool]:
        return snmp_exploiter_client.exploit_host(
            target_host,
            COMMUNITY_STRING,
            COMMAND,
            agent_binary_downloaded,
            SNMPOptions(agent_binary_download_timeout=0.001),
        )

    return _inner


def test_exploit__registers_command(
    mock_snmp_client, exploit_host: Callable[[], Tuple[bool, bool]]
):
    exploit_host()

    assert mock_snmp_client.create_command.called


def test_exploit__success(exploit_host: Callable[[], Tuple[bool, bool]]):
    exploitation_success, propagation_success = exploit_host()

    assert exploitation_success
    assert propagation_success


def test_exploit__failure_if_create_command_fails(
    mock_snmp_client, exploit_host: Callable[[], Tuple[bool, bool]]
):
    mock_snmp_client.create_command.side_effect = Exception("test")

    exploitation_success, propagation_success = exploit_host()

    assert not exploitation_success
    assert not propagation_success


def test_exploit__failure_if_execute_command_fails(
    mock_snmp_client, exploit_host: Callable[[], Tuple[bool, bool]]
):
    mock_snmp_client.execute_command.side_effect = Exception("test")

    exploitation_success, propagation_success = exploit_host()

    assert not exploitation_success
    assert not propagation_success


def test_exploit__failure_if_clear_command_fails(
    mock_snmp_client, exploit_host: Callable[[], Tuple[bool, bool]]
):
    mock_snmp_client.clear_command.side_effect = Exception("test")

    exploitation_success, propagation_success = exploit_host()

    assert not exploitation_success
    assert not propagation_success


def _assert_published_events(agent_event_publisher: MagicMock, success: bool):
    published_events = agent_event_publisher.publish.call_args_list
    published_events = [param[0][0] for param in published_events]

    assert ExploitationEvent in [type(event) for event in published_events]
    assert PropagationEvent in [type(event) for event in published_events]
    assert all([event.success == success for event in published_events])


def test_exploit__sends_events_on_success(
    exploit_host: Callable[[], Tuple[bool, bool]],
    mock_agent_event_publisher: MagicMock,
):
    exploit_host()

    _assert_published_events(mock_agent_event_publisher, success=True)


def test_exploit__sends_events_on_failure(
    mock_snmp_client,
    exploit_host: Callable[[], Tuple[bool, bool]],
    mock_agent_event_publisher: MagicMock,
):
    mock_snmp_client.create_command.side_effect = Exception("test")

    exploit_host()

    _assert_published_events(mock_agent_event_publisher, success=False)


def get_event_by_type(agent_event_publisher: MagicMock, event_type: Type[Event]):
    published_events = agent_event_publisher.publish.call_args_list
    published_events = [param[0][0] for param in published_events]

    return next(event for event in published_events if isinstance(event, event_type))


def test_propagation_fails_if_binary_not_downloaded(
    agent_binary_downloaded: Event,
    exploit_host: Callable[[], Tuple[bool, bool]],
    mock_agent_event_publisher: MagicMock,
):
    agent_binary_downloaded.clear()

    exploitation_success, propagation_success = exploit_host()
    propagation_event = get_event_by_type(mock_agent_event_publisher, PropagationEvent)

    assert exploitation_success
    assert not propagation_success
    assert not propagation_event.success


def test_exploit__failure_on_get_exception(
    mock_snmp_client, exploit_host: Callable[[], Tuple[bool, bool]]
):
    mock_snmp_client.execute_command.side_effect = Exception("test")
    exploitation_success, propagation_success = exploit_host()

    assert not exploitation_success
    assert not propagation_success


def test_exploit__failure_on_create_exception(
    mock_snmp_client, exploit_host: Callable[[], Tuple[bool, bool]]
):
    mock_snmp_client.create_command.side_effect = Exception("test")
    exploitation_success, propagation_success = exploit_host()

    assert not exploitation_success
    assert not propagation_success


def test_exploit__retries_create_on_error(
    mock_snmp_client,
    exploit_host: Callable[[], Tuple[bool, bool]],
    mock_command_name_generator,
):
    mock_snmp_client.create_command.side_effect = Exception("test")

    exploit_host()

    assert mock_snmp_client.create_command.call_count > 1
    assert mock_command_name_generator.call_count == mock_snmp_client.create_command.call_count


@pytest.mark.parametrize("command_name", ["command0", "command1", "command2"])
def test_exploit__uses_command_name_generator(
    command_name,
    mock_command_name_generator,
    mock_snmp_client,
    exploit_host: Callable[[], Tuple[bool, bool]],
):
    mock_command_name_generator.return_value = command_name
    exploit_host()

    assert mock_command_name_generator.called
    assert mock_snmp_client.create_command.call_args[0][1] == command_name
    assert mock_snmp_client.execute_command.call_args[0][1] == command_name
    assert mock_snmp_client.clear_command.call_args[0][1] == command_name


@pytest.mark.parametrize("exception", [Exception(), SNMPRequestTimedOut()])
def test_exploit__clear_called_if_execute_fails(
    exception, mock_snmp_client, exploit_host: Callable[[], Tuple[bool, bool]]
):
    mock_snmp_client.execute_command.side_effect = exception

    exploit_host()

    assert mock_snmp_client.clear_command.called
