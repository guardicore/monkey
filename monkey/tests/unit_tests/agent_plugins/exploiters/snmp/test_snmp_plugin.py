from ipaddress import IPv4Address
from threading import Event
from unittest.mock import MagicMock
from uuid import UUID

import pytest
from agent_plugins.exploiters.snmp.src.plugin import SNMP_PORTS, Plugin
from agent_plugins.exploiters.snmp.src.snmp_client import SNMPClient
from agent_plugins.exploiters.snmp.src.snmp_exploiter import SNMPExploiter
from agentpluginapi import (
    ExploiterResult,
    IPropagationCredentialsRepository,
    PortScanData,
    PortScanDataDict,
    TargetHost,
    TargetHostPorts,
)
from monkeytypes import OperatingSystem, PortStatus

AGENT_ID = UUID("5c145d4e-ec61-44f7-998e-17477112f50f")
BAD_SNMP_OPTIONS_DICT = {"blah": "blah"}
TARGET_IP = IPv4Address("127.0.0.1")
EMPTY_TARGET_HOST_PORTS = TargetHostPorts()
EXPLOITER_RESULT = ExploiterResult(True, False, error_message="Test error")


@pytest.fixture
def open_snmp_ports():
    return TargetHostPorts(
        udp_ports=PortScanDataDict(
            {p: PortScanData(port=p, status=PortStatus.OPEN) for p in SNMP_PORTS}
        )
    )


@pytest.fixture
def target_host(open_snmp_ports) -> TargetHost:
    return TargetHost(
        ip=TARGET_IP,
        operating_system=OperatingSystem.LINUX,
        ports_status=open_snmp_ports,
    )


class ErrorRaisingMockSNMPExploiter(SNMPExploiter):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def exploit_host(self, *args, **kwargs) -> ExploiterResult:
        raise Exception("Test error")


@pytest.fixture
def mock_snmp_exploiter():
    exploiter = MagicMock(spec=SNMPExploiter)
    exploiter.exploit_host.return_value = EXPLOITER_RESULT
    return exploiter


@pytest.fixture
def plugin(monkeypatch, mock_snmp_exploiter) -> Plugin:
    monkeypatch.setattr(
        "agent_plugins.exploiters.snmp.src.plugin.SNMPExploiter",
        lambda *args, **kwargs: mock_snmp_exploiter,
    )
    monkeypatch.setattr(
        "agent_plugins.exploiters.snmp.src.plugin.SNMPClient",
        lambda *args, **kwargs: MagicMock(spec=SNMPClient),
    )

    return Plugin(
        plugin_name="SNMP",
        agent_id=AGENT_ID,
        agent_event_publisher=MagicMock(),
        agent_binary_repository=MagicMock(),
        http_agent_binary_server_registrar=MagicMock(),
        propagation_credentials_repository=MagicMock(spec=IPropagationCredentialsRepository),
        tcp_port_selector=MagicMock(),
        local_machine_info=MagicMock(),
        agent_command_builder_factory=MagicMock(),
    )


def test_run__fails_on_bad_options(plugin: Plugin, target_host: TargetHost):
    result = plugin.run(
        host=target_host,
        options=BAD_SNMP_OPTIONS_DICT,
        interrupt=Event(),
    )

    assert not result.exploitation_success
    assert not result.propagation_success


@pytest.mark.parametrize(
    "port_scan_data_dict",
    [
        {},
        {SNMP_PORTS[0]: PortScanData(port=SNMP_PORTS[0], status=PortStatus.OPEN)},
    ],
)
def test_run__attempts_exploit_port_status(
    plugin: Plugin,
    mock_snmp_exploiter,
    target_host: TargetHost,
    port_scan_data_dict,
):
    host = target_host
    host.ports_status.udp_ports = PortScanDataDict(port_scan_data_dict)
    result = plugin.run(
        host=host,
        options={},
        interrupt=Event(),
    )

    mock_snmp_exploiter.exploit_host.assert_called_once()  # type: ignore [attr-defined]
    assert result == EXPLOITER_RESULT


def test_run__skips_exploit_if_port_status_closed(
    plugin: Plugin,
    mock_snmp_exploiter,
    target_host: TargetHost,
):
    host = target_host
    host.ports_status.udp_ports = PortScanDataDict(
        {
            SNMP_PORTS[0]: PortScanData(port=SNMP_PORTS[0], status=PortStatus.CLOSED),
        }
    )

    result = plugin.run(
        host=host,
        options={},
        interrupt=Event(),
    )

    mock_snmp_exploiter.exploit_host.assert_not_called()  # type: ignore [attr-defined]
    assert result.exploitation_success is False
    assert result.propagation_success is False


def test_run__returns_exploiter_result(plugin: Plugin, target_host: TargetHost):
    result = plugin.run(
        host=target_host,
        options={},
        interrupt=Event(),
    )

    assert result == EXPLOITER_RESULT


def test_run__exploit_host_raises_exception(
    monkeypatch,
    plugin: Plugin,
    target_host: TargetHost,
):
    monkeypatch.setattr(
        "agent_plugins.exploiters.snmp.src.plugin.SNMPExploiter",
        ErrorRaisingMockSNMPExploiter,
    )

    plugin = Plugin(
        plugin_name="SNMP",
        agent_id=AGENT_ID,
        agent_event_publisher=MagicMock(),
        agent_binary_repository=MagicMock(),
        http_agent_binary_server_registrar=MagicMock(),
        propagation_credentials_repository=MagicMock(spec=IPropagationCredentialsRepository),
        tcp_port_selector=MagicMock(),
        local_machine_info=MagicMock(),
        agent_command_builder_factory=MagicMock(),
    )
    result = plugin.run(
        host=target_host,
        options={},
        interrupt=Event(),
    )

    assert not result.exploitation_success
    assert not result.propagation_success
