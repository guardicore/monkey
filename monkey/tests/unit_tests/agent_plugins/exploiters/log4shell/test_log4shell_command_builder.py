from unittest.mock import MagicMock

import pytest
from agent_plugins.exploiters.log4shell.src.log4shell_command_builder import build_log4shell_command
from monkeytypes import OperatingSystem

from infection_monkey.exploit import IAgentOTPProvider
from infection_monkey.i_puppet import TargetHost
from infection_monkey.model import DROPPER_ARG
from infection_monkey.utils.ids import get_agent_id

OTP = "123456"
AGENT_ID = get_agent_id()
SERVERS = ["1.1.1.1", "3.3.3.3", "127.0.0.1"]


@pytest.fixture(autouse=True)
def otp_provider() -> IAgentOTPProvider:
    provider = MagicMock(spec=IAgentOTPProvider)
    provider.get_otp.return_value = OTP
    return provider


def test_dropper_used(agent_otp_environment_variable):
    target_host = TargetHost(ip="1.1.1.1", operating_system=OperatingSystem.WINDOWS)
    command = build_log4shell_command(
        AGENT_ID,
        target_host,
        SERVERS,
        2,
        "http://some_link",
        agent_otp_environment_variable,
        OTP,
    )

    assert DROPPER_ARG in command


@pytest.mark.parametrize("os", [OperatingSystem.WINDOWS, None])
def test_windows_command(os, agent_otp_environment_variable):
    target_host = TargetHost(ip="1.1.1.1", operating_system=os)
    command = build_log4shell_command(
        AGENT_ID,
        target_host,
        SERVERS,
        2,
        "http://some_link",
        agent_otp_environment_variable,
        OTP,
    )

    assert "powershell" in command


def test_linux_command(agent_otp_environment_variable):
    target_host = TargetHost(ip="1.1.1.1", operating_system=OperatingSystem.LINUX)
    command = build_log4shell_command(
        AGENT_ID,
        target_host,
        SERVERS,
        2,
        "http://some_link",
        agent_otp_environment_variable,
        OTP,
    )

    assert "wget" in command
