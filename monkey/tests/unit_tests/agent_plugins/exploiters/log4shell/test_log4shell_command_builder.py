from ipaddress import IPv4Address
from pathlib import PurePosixPath, PureWindowsPath
from unittest.mock import MagicMock

import pytest
from agent_plugins.exploiters.log4shell.src.log4shell_command_builder import build_log4shell_command
from agentpluginapi import TargetHost
from monkeytypes import OperatingSystem

from common.command_builder import (
    DropperExecutionMode,
    IAgentCommandBuilderFactory,
    ILinuxAgentCommandBuilder,
    IWindowsAgentCommandBuilder,
    LinuxDownloadMethod,
    LinuxDownloadOptions,
    LinuxRunOptions,
    WindowsDownloadMethod,
    WindowsDownloadOptions,
    WindowsRunOptions,
    WindowsShell,
)

WINDOWS_AGENT_DESTINATION_PATH = PureWindowsPath("C:\\Windows\\Temp\\agent.exe")
LINUX_AGENT_DESTINATION_PATH = PurePosixPath("/tmp/agent")
DOWNLOAD_URL = "http://download.me"


@pytest.fixture
def linux_agent_command_builder() -> ILinuxAgentCommandBuilder:
    return MagicMock(spec=ILinuxAgentCommandBuilder)


@pytest.fixture
def windows_agent_command_builder() -> IWindowsAgentCommandBuilder:
    return MagicMock(spec=IWindowsAgentCommandBuilder)


@pytest.fixture
def agent_command_builder_factory(
    linux_agent_command_builder: ILinuxAgentCommandBuilder,
    windows_agent_command_builder: IWindowsAgentCommandBuilder,
) -> IAgentCommandBuilderFactory:
    agent_command_builder_factory = MagicMock(spec=IAgentCommandBuilderFactory)
    agent_command_builder_factory.create_linux_agent_command_builder.return_value = (
        linux_agent_command_builder
    )
    agent_command_builder_factory.create_windows_agent_command_builder.return_value = (
        windows_agent_command_builder
    )

    return agent_command_builder_factory


@pytest.fixture
def build_command(monkeypatch, agent_command_builder_factory: IAgentCommandBuilderFactory):
    def build(host: TargetHost) -> str:
        monkeypatch.setattr(
            "agent_plugins.exploiters.log4shell.src.log4shell_command_builder.get_agent_dst_path",
            lambda _: LINUX_AGENT_DESTINATION_PATH
            if host.operating_system == OperatingSystem.LINUX
            else WINDOWS_AGENT_DESTINATION_PATH,
        )
        return build_log4shell_command(
            host,
            DOWNLOAD_URL,
            agent_command_builder_factory,
        )

    return build


@pytest.mark.parametrize("os", [OperatingSystem.WINDOWS, None])
def test_windows_command(
    build_command,
    os,
    windows_agent_command_builder: IWindowsAgentCommandBuilder,
):
    target_host = TargetHost(ip=IPv4Address("1.1.1.1"), operating_system=os)
    build_command(target_host)

    expected_download_options = WindowsDownloadOptions(
        agent_destination_path=WINDOWS_AGENT_DESTINATION_PATH,
        download_method=WindowsDownloadMethod.WEB_REQUEST,
        download_url=DOWNLOAD_URL,
    )
    expected_run_options = WindowsRunOptions(
        agent_destination_path=WINDOWS_AGENT_DESTINATION_PATH,
        dropper_execution_mode=DropperExecutionMode.DROPPER,
        shell=WindowsShell.POWERSHELL,
    )

    windows_agent_command_builder.build_download_command.assert_called_with(
        expected_download_options
    )
    windows_agent_command_builder.build_run_command.assert_called_with(expected_run_options)
    windows_agent_command_builder.get_command.assert_called_once()


def test_linux_command(
    monkeypatch, build_command, linux_agent_command_builder: ILinuxAgentCommandBuilder
):
    monkeypatch.setattr(
        "infection_monkey.exploit.tools.helpers.get_agent_dst_path",
        lambda _: LINUX_AGENT_DESTINATION_PATH,
    )
    target_host = TargetHost(ip=IPv4Address("1.1.1.1"), operating_system=OperatingSystem.LINUX)
    build_command(target_host)
    expected_download_options = LinuxDownloadOptions(
        agent_destination_path=LINUX_AGENT_DESTINATION_PATH,
        download_method=LinuxDownloadMethod.WGET,
        download_url=DOWNLOAD_URL,
    )
    expected_run_options = LinuxRunOptions(
        agent_destination_path=LINUX_AGENT_DESTINATION_PATH,
        dropper_execution_mode=DropperExecutionMode.DROPPER,
    )

    linux_agent_command_builder.build_download_command.assert_called_with(expected_download_options)
    linux_agent_command_builder.build_run_command.assert_called_with(expected_run_options)
    linux_agent_command_builder.get_command.assert_called_once()
