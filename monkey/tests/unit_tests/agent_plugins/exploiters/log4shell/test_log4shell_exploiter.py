from ipaddress import IPv4Address, IPv4Interface
from threading import Event
from typing import Callable
from unittest.mock import MagicMock

import pytest
from agent_plugins.exploiters.log4shell.src.ldap_server import LDAPExploitServer
from agent_plugins.exploiters.log4shell.src.log4shell_exploit_client import Log4ShellExploitClient
from agent_plugins.exploiters.log4shell.src.log4shell_exploiter import Log4ShellExploiter
from agent_plugins.exploiters.log4shell.src.log4shell_options import Log4ShellOptions
from agent_plugins.exploiters.log4shell.src.plugin import get_ports_to_try
from agentpluginapi import (
    ExploiterResult,
    IHTTPAgentBinaryServerRegistrar,
    ITCPPortSelector,
    LocalMachineInfo,
    PortScanData,
    TargetHost,
)
from monkeytypes import NetworkPort, NetworkProtocol, NetworkService, OperatingSystem, PortStatus

from infection_monkey.exploit.tools import HTTPBytesServer
from infection_monkey.utils.ids import get_agent_id

AGENT_ID = get_agent_id()
TARGET_IP = IPv4Address("1.1.1.1")
SERVERS = ["10.10.10.10"]
DOWNLOAD_URL = "http://download.me"
HTTP_PORT = NetworkPort(12345)
HTTP_PORT_DATA = PortScanData(
    port=HTTP_PORT,
    status=PortStatus.OPEN,
    protocol=NetworkProtocol.TCP,
    service=NetworkService.HTTP,
)
CLOSED_PORT = NetworkPort(12346)
CLOSED_PORT_DATA = PortScanData(
    port=CLOSED_PORT,
    status=PortStatus.CLOSED,
    protocol=NetworkProtocol.TCP,
    service=NetworkService.HTTP,
)
CLOSED_PORT_80 = NetworkPort(80)
CLOSED_PORT_80_DATA = PortScanData(
    port=CLOSED_PORT_80,
    status=PortStatus.CLOSED,
    protocol=NetworkProtocol.TCP,
    service=NetworkService.HTTP,
)
HTTPS_PORT = NetworkPort(12347)
HTTPS_PORT_DATA = PortScanData(
    port=HTTPS_PORT,
    status=PortStatus.CLOSED,
    protocol=NetworkProtocol.TCP,
    service=NetworkService.HTTPS,
)
PORTS_TO_TRY = {HTTP_PORT, HTTPS_PORT}


@pytest.fixture(params=[OperatingSystem.WINDOWS, OperatingSystem.LINUX])
def target_host(request) -> TargetHost:
    return TargetHost(ip=IPv4Address("1.1.1.1"), operating_system=request.param)


@pytest.fixture
def local_machine_info(target_host) -> LocalMachineInfo:
    local_machine_info_mock = MagicMock(ispec=LocalMachineInfo)
    local_machine_info_mock.operating_system = target_host.operating_system
    local_machine_info_mock.get_interface_to_target.return_value = IPv4Interface("127.0.0.1/32")

    return local_machine_info_mock


@pytest.fixture
def mock_bytes_server() -> HTTPBytesServer:
    mock_bytes_server = MagicMock(spec=HTTPBytesServer)
    mock_bytes_server.download_url = DOWNLOAD_URL
    mock_bytes_server.bytes_downloaded = Event()
    mock_bytes_server.bytes_downloaded.set()
    return mock_bytes_server


@pytest.fixture
def mock_ldap_server() -> LDAPExploitServer:
    return MagicMock(spec=LDAPExploitServer)


@pytest.fixture
def mock_log4shell_exploit_client() -> Log4ShellExploitClient:
    mock_log4shell_exploit_client = MagicMock()
    mock_log4shell_exploit_client.exploit.return_value = (False, False)
    return mock_log4shell_exploit_client


@pytest.fixture
def mock_http_agent_binary_server_registrar() -> IHTTPAgentBinaryServerRegistrar:
    return MagicMock(spec=IHTTPAgentBinaryServerRegistrar)


@pytest.fixture(autouse=True)
def mock_port_selector() -> ITCPPortSelector:
    port_selector = MagicMock()
    port_selector.get_free_tcp_port.return_value = NetworkPort(1111)
    return port_selector


@pytest.fixture
def log4shell_exploiter(
    monkeypatch,
    mock_log4shell_exploit_client: Log4ShellExploitClient,
    mock_port_selector: ITCPPortSelector,
    mock_http_agent_binary_server_registrar: IHTTPAgentBinaryServerRegistrar,
    mock_ldap_server: LDAPExploitServer,
    mock_bytes_server: HTTPBytesServer,
) -> Log4ShellExploiter:
    monkeypatch.setattr(
        "agent_plugins.exploiters.log4shell.src.log4shell_exploiter.HTTPBytesServer",
        mock_bytes_server,
    )
    monkeypatch.setattr(
        "agent_plugins.exploiters.log4shell.src.log4shell_exploiter.LDAPExploitServer",
        mock_ldap_server,
    )

    mock_exploiter = Log4ShellExploiter(
        AGENT_ID,
        mock_log4shell_exploit_client,
        mock_port_selector,
        mock_http_agent_binary_server_registrar,
    )

    return mock_exploiter


@pytest.fixture
def exploit_host(
    log4shell_exploiter: Log4ShellExploiter,
    target_host: TargetHost,
    local_machine_info: LocalMachineInfo,
) -> Callable[[], ExploiterResult]:
    def _inner() -> ExploiterResult:
        return log4shell_exploiter.exploit_host(
            target_host=target_host,
            ports_to_try=PORTS_TO_TRY,
            options=Log4ShellOptions(),
            local_machine_info=local_machine_info,
            interrupt=Event(),
        )

    return _inner


def test_exploit_host__succeeds(
    exploit_host,
    mock_log4shell_exploit_client,
    mock_http_agent_binary_server_registrar,
):
    mock_log4shell_exploit_client.exploit.return_value = (True, True)
    result = exploit_host()

    assert mock_http_agent_binary_server_registrar.reserve_download.called
    assert mock_http_agent_binary_server_registrar.clear_reservation.called
    assert result.exploitation_success
    assert result.propagation_success


def test_exploit_host__fails_if_agent_binary_reservation_fails(
    exploit_host, mock_http_agent_binary_server_registrar
):
    mock_http_agent_binary_server_registrar.reserve_download.side_effect = Exception()
    result = exploit_host()

    assert not mock_http_agent_binary_server_registrar.clear_reservation.called
    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_host__fails_if_ldap_server_fails_to_start(
    target_host: TargetHost,
    local_machine_info: LocalMachineInfo,
    log4shell_exploiter: Log4ShellExploiter,
):
    log4shell_exploiter._start_ldap_server = lambda: Exception()

    result = log4shell_exploiter.exploit_host(
        target_host=target_host,
        ports_to_try=PORTS_TO_TRY,
        options=Log4ShellOptions(),
        local_machine_info=local_machine_info,
        interrupt=Event(),
    )

    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_host__success_returned_if_clear_reservation_fails(
    exploit_host, mock_log4shell_exploit_client, mock_http_agent_binary_server_registrar
):
    mock_log4shell_exploit_client.exploit.return_value = (True, True)
    mock_http_agent_binary_server_registrar.clear_reservation.side_effect = Exception()

    result = exploit_host()

    assert mock_http_agent_binary_server_registrar.clear_reservation.called
    assert result.exploitation_success
    assert result.propagation_success


def test_exploit_host__success_returned_on_ldap_server_stop_fail(
    exploit_host,
    mock_log4shell_exploit_client,
    mock_ldap_server,
):
    mock_log4shell_exploit_client.exploit.return_value = (True, True)
    mock_ldap_server.stop.side_effect = Exception()

    result = exploit_host()

    # assert mock_ldap_server.stop.called  # TODO: Why does this assert fail?
    assert result.exploitation_success
    assert result.propagation_success


def test_exploit_host__fails_when_no_target_ports(
    log4shell_exploiter: Log4ShellExploiter,
    target_host: TargetHost,
    local_machine_info: LocalMachineInfo,
):
    options = Log4ShellOptions(target_ports=[])

    result = log4shell_exploiter.exploit_host(
        target_host=target_host,
        ports_to_try=get_ports_to_try(
            host=target_host, target_ports=options.target_ports, try_all_discovered_http_ports=False
        ),
        options=options,
        local_machine_info=local_machine_info,
        interrupt=Event(),
    )

    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_host__fails_on_log4shell_exception(
    mock_log4shell_exploit_client, exploit_host, mock_http_agent_binary_server_registrar
):
    mock_log4shell_exploit_client.exploit.side_effect = Exception()
    result = exploit_host()

    assert mock_http_agent_binary_server_registrar.clear_reservation.called
    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_attempt_skipped_on_interrupt(
    log4shell_exploiter: Log4ShellExploiter,
    mock_log4shell_exploit_client: Log4ShellExploitClient,
    target_host: TargetHost,
    local_machine_info: LocalMachineInfo,
):
    options = Log4ShellOptions(target_ports=[80, 443, 8080, 8000])

    interrupt = Event()
    interrupt.set()
    log4shell_exploiter.exploit_host(
        target_host=target_host,
        ports_to_try=get_ports_to_try(
            host=target_host, target_ports=options.target_ports, try_all_discovered_http_ports=True
        ),
        options=options,
        local_machine_info=local_machine_info,
        interrupt=interrupt,
    )

    assert mock_log4shell_exploit_client.exploit.call_count == 0  # type: ignore [attr-defined]
