from ipaddress import IPv4Address
from threading import Event
from typing import Callable
from unittest.mock import MagicMock

import pytest
from agent_plugins.exploiters.log4shell.src.ldap_server import LDAPExploitServer

# from agent_plugins.exploiters.log4shell.src.log4shell_exploit_client import Log4ShellExploitClient
from agent_plugins.exploiters.log4shell.src.log4shell_exploiter import (
    Log4ShellExploiter,
    Placeholder_Log4ShellExploitClient,
)
from agent_plugins.exploiters.log4shell.src.log4shell_options import Log4ShellOptions
from agent_plugins.exploiters.log4shell.src.plugin import get_ports_to_exploit

from common import OperatingSystem
from common.types import NetworkPort, NetworkProtocol, NetworkService, PortStatus
from infection_monkey.exploit import IAgentOTPProvider
from infection_monkey.exploit.tools import HTTPBytesServer
from infection_monkey.i_puppet import ExploiterResultData, PortScanData, TargetHost
from infection_monkey.network import TCPPortSelector
from infection_monkey.utils.ids import get_agent_id

AGENT_ID = get_agent_id()
TARGET_IP = IPv4Address("1.1.1.1")
SERVERS = ["10.10.10.10"]
DOWNLOAD_URL = "http://download.me"
HTTP_PORT = NetworkPort(12345)
HTTP_PORT_DATA = PortScanData(
    port=HTTP_PORT,
    status=PortStatus.OPEN,
    protocol=NetworkProtocol.TCP,
    service=NetworkService.HTTP,
)
CLOSED_PORT = NetworkPort(12346)
CLOSED_PORT_DATA = PortScanData(
    port=CLOSED_PORT,
    status=PortStatus.CLOSED,
    protocol=NetworkProtocol.TCP,
    service=NetworkService.HTTP,
)
CLOSED_PORT_80 = NetworkPort(80)
CLOSED_PORT_80_DATA = PortScanData(
    port=CLOSED_PORT_80,
    status=PortStatus.CLOSED,
    protocol=NetworkProtocol.TCP,
    service=NetworkService.HTTP,
)
HTTPS_PORT = NetworkPort(12347)
HTTPS_PORT_DATA = PortScanData(
    port=HTTPS_PORT,
    status=PortStatus.CLOSED,
    protocol=NetworkProtocol.TCP,
    service=NetworkService.HTTPS,
)
PORTS_TO_TRY = {HTTP_PORT, HTTPS_PORT}


@pytest.fixture(params=[OperatingSystem.WINDOWS, OperatingSystem.LINUX])
def target_host(request) -> TargetHost:
    return TargetHost(ip=IPv4Address("1.1.1.1"), operating_system=request.param)


@pytest.fixture
def mock_bytes_server() -> HTTPBytesServer:
    mock_bytes_server = MagicMock(spec=HTTPBytesServer)
    mock_bytes_server.download_url = DOWNLOAD_URL
    mock_bytes_server.bytes_downloaded = Event()
    mock_bytes_server.bytes_downloaded.set()
    return mock_bytes_server


@pytest.fixture
def mock_exploit_class_server() -> HTTPBytesServer:
    mock_bytes_server = MagicMock(spec=HTTPBytesServer)
    mock_bytes_server.download_url = "https://1.1.1.1:1111"
    mock_bytes_server.bytes_downloaded = Event()
    mock_bytes_server.bytes_downloaded.set()
    return mock_bytes_server


@pytest.fixture
def mock_ldap_server() -> LDAPExploitServer:
    return MagicMock(spec=LDAPExploitServer)


@pytest.fixture
def mock_log4shell_exploit_client() -> Placeholder_Log4ShellExploitClient:
    mock_log4shell_exploit_client = MagicMock()
    mock_log4shell_exploit_client.exploit.return_value = (False, False)
    return mock_log4shell_exploit_client


@pytest.fixture
def mock_start_agent_binary_server(mock_bytes_server) -> HTTPBytesServer:
    return MagicMock(return_value=mock_bytes_server)


@pytest.fixture
def mock_otp_provider():
    mock_otp_provider = MagicMock(spec=IAgentOTPProvider)
    mock_otp_provider.get_otp.return_value = "123456"
    return mock_otp_provider


@pytest.fixture(autouse=True)
def mock_port_selector() -> TCPPortSelector:
    port_selector = MagicMock()
    port_selector.get_free_tcp_port.return_value = NetworkPort(1111)
    return port_selector


@pytest.fixture
def log4shell_exploiter(
    monkeypatch,
    target_host: TargetHost,
    mock_log4shell_exploit_client: Placeholder_Log4ShellExploitClient,
    mock_port_selector: TCPPortSelector,
    mock_start_agent_binary_server: Callable[[TargetHost], HTTPBytesServer],
    mock_otp_provider: IAgentOTPProvider,
    mock_ldap_server: LDAPExploitServer,
    mock_exploit_class_server: HTTPBytesServer,
) -> Log4ShellExploiter:
    monkeypatch.setattr(
        "agent_plugins.exploiters.log4shell.src.log4shell_exploiter.HTTPBytesServer",
        mock_exploit_class_server,
    )
    mock_exploiter = Log4ShellExploiter(
        AGENT_ID,
        target_host,
        mock_log4shell_exploit_client,
        mock_port_selector,
        mock_start_agent_binary_server,
        mock_otp_provider,
    )
    mock_exploiter._start_ldap_server = lambda: None  # type: ignore [assignment]
    mock_exploiter._ldap_server = mock_ldap_server

    return mock_exploiter


@pytest.fixture
def exploit_host(
    log4shell_exploiter: Log4ShellExploiter, target_host: TargetHost
) -> Callable[[], ExploiterResultData]:
    def _inner() -> ExploiterResultData:
        return log4shell_exploiter.exploit_host(
            target_host=target_host,
            ports_to_try=PORTS_TO_TRY,
            servers=SERVERS,
            current_depth=1,
            options=Log4ShellOptions(),
            interrupt=Event(),
        )

    return _inner


def test_exploit_host__succeeds(exploit_host, mock_log4shell_exploit_client, mock_bytes_server):
    mock_log4shell_exploit_client.exploit.return_value = (True, True)
    result = exploit_host()

    assert mock_bytes_server.stop.called
    assert result.exploitation_success
    assert result.propagation_success


def test_exploit_host__fails_if_agent_binary_server_fails_to_start(
    exploit_host, mock_start_agent_binary_server, mock_bytes_server
):
    mock_start_agent_binary_server.side_effect = Exception()
    result = exploit_host()

    assert not mock_bytes_server.stop.called
    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_host__fails_if_ldap_server_fails_to_start(target_host, log4shell_exploiter):
    log4shell_exploiter._start_ldap_server = lambda: Exception()

    result = log4shell_exploiter.exploit_host(
        target_host=target_host,
        ports_to_try=PORTS_TO_TRY,
        servers=SERVERS,
        current_depth=1,
        options=Log4ShellOptions(),
        interrupt=Event(),
    )

    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_host__success_returned_on_bytes_server_stop_fail(
    exploit_host, mock_log4shell_exploit_client, mock_bytes_server
):
    mock_log4shell_exploit_client.exploit.return_value = (True, True)
    mock_bytes_server.stop.side_effect = Exception()

    result = exploit_host()

    assert mock_bytes_server.stop.called
    assert result.exploitation_success
    assert result.propagation_success


def test_exploit_host__success_returned_on_ldap_server_stop_fail(
    target_host, log4shell_exploiter, mock_log4shell_exploit_client
):
    mock_log4shell_exploit_client.exploit.return_value = (True, True)
    log4shell_exploiter._ldap_server.stop.side_effect = lambda: Exception()

    result = log4shell_exploiter.exploit_host(
        target_host=target_host,
        ports_to_try=PORTS_TO_TRY,
        servers=SERVERS,
        current_depth=1,
        options=Log4ShellOptions(),
        interrupt=Event(),
    )

    assert log4shell_exploiter._ldap_server.stop.called
    assert result.exploitation_success
    assert result.propagation_success


def test_exploit_host__fails_when_no_target_ports(
    log4shell_exploiter: Log4ShellExploiter, target_host: TargetHost
):
    options = Log4ShellOptions(target_ports=[])

    result = log4shell_exploiter.exploit_host(
        target_host=target_host,
        ports_to_try=get_ports_to_exploit(
            host=target_host, target_ports=options.target_ports, try_all_discovered_http_ports=False
        ),
        servers=SERVERS,
        current_depth=1,
        options=options,
        interrupt=Event(),
    )

    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_host__fails_on_log4shell_exception(
    mock_log4shell_exploit_client, exploit_host, mock_bytes_server
):
    mock_log4shell_exploit_client.exploit.side_effect = Exception()
    result = exploit_host()

    assert mock_bytes_server.stop.called
    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_attempt_skipped_on_interrupt(
    log4shell_exploiter: Log4ShellExploiter,
    mock_log4shell_exploit_client: Placeholder_Log4ShellExploitClient,
    target_host: TargetHost,
):
    options = Log4ShellOptions(target_ports=[80, 443, 8080, 8000])

    interrupt = Event()
    interrupt.set()
    log4shell_exploiter.exploit_host(
        target_host=target_host,
        ports_to_try=get_ports_to_exploit(
            host=target_host, target_ports=options.target_ports, try_all_discovered_http_ports=True
        ),
        servers=SERVERS,
        current_depth=1,
        options=options,
        interrupt=interrupt,
    )

    assert mock_log4shell_exploit_client.exploit.call_count == 0  # type: ignore [attr-defined]
