from ipaddress import IPv4Address
from threading import Event
from unittest.mock import MagicMock
from uuid import UUID

import pytest
from agent_plugins.exploiters.log4shell.src.log4shell_exploiter import Log4ShellExploiter
from agent_plugins.exploiters.log4shell.src.plugin import Plugin, get_ports_to_try

from common import OperatingSystem
from common.types import NetworkPort, NetworkService, PortStatus
from infection_monkey.i_puppet import (
    ExploiterResultData,
    PortScanData,
    PortScanDataDict,
    TargetHost,
    TargetHostPorts,
)

AGENT_ID = UUID("5c145d4e-ec61-44f7-998e-17477112f50f")
BAD_HADOOP_OPTIONS_DICT = {"blah": "blah"}
TARGET_IP = IPv4Address("1.1.1.1")
OPEN_HTTP_PORT = NetworkPort(5000)
CLOSED_PORT = NetworkPort(5001)
TARGET_HOST_PORTS = TargetHostPorts(
    tcp_ports=PortScanDataDict(
        {
            OPEN_HTTP_PORT: PortScanData(
                port=OPEN_HTTP_PORT, status=PortStatus.OPEN, service=NetworkService.HTTP
            ),
            CLOSED_PORT: PortScanData(port=CLOSED_PORT, status=PortStatus.CLOSED),
        }
    )
)
TARGET_HOST = TargetHost(
    ip=TARGET_IP, operating_system=OperatingSystem.WINDOWS, ports_status=TARGET_HOST_PORTS
)
SERVERS = ["10.10.10.10"]
EXPLOITER_TARGET_PORTS = [NetworkPort(80), NetworkPort(443), NetworkPort(8080), NetworkPort(8000)]
EXPLOITER_RESULT_DATA = ExploiterResultData(True, False, error_message="Test error")


class MockLog4ShellExploiter(Log4ShellExploiter):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def exploit_host(self, *args, **kwargs) -> ExploiterResultData:
        return EXPLOITER_RESULT_DATA


class ErrorRaisingMockLog4ShellExploiter(Log4ShellExploiter):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def exploit_host(self, *args, **kwargs) -> ExploiterResultData:
        raise Exception("Test error")


@pytest.fixture
def plugin(monkeypatch) -> Plugin:
    monkeypatch.setattr(
        "agent_plugins.exploiters.log4shell.src.plugin.Log4ShellExploiter",
        MockLog4ShellExploiter,
    )

    return Plugin(
        plugin_name="Log4Shell",
        agent_id=AGENT_ID,
        agent_event_publisher=MagicMock(),
        agent_binary_repository=MagicMock(),
        tcp_port_selector=MagicMock(),
        otp_provider=MagicMock(),
    )


def test_run__fails_on_bad_options(plugin: Plugin):
    result = plugin.run(
        host=TARGET_HOST,
        servers=SERVERS,
        current_depth=1,
        options=BAD_HADOOP_OPTIONS_DICT,
        interrupt=Event(),
    )

    assert not result.exploitation_success
    assert not result.propagation_success


def test_run__returns_exploiter_result_data(plugin: Plugin):
    result = plugin.run(
        host=TARGET_HOST,
        servers=SERVERS,
        current_depth=1,
        options={"target_ports": [OPEN_HTTP_PORT]},
        interrupt=Event(),
    )

    assert result == EXPLOITER_RESULT_DATA


def test_run__exploit_host_raises_exception(monkeypatch, plugin: Plugin):
    monkeypatch.setattr(
        "agent_plugins.exploiters.log4shell.src.plugin.Log4ShellExploiter",
        ErrorRaisingMockLog4ShellExploiter,
    )

    plugin = Plugin(
        plugin_name="Log4Shell",
        agent_id=AGENT_ID,
        agent_event_publisher=MagicMock(),
        agent_binary_repository=MagicMock(),
        tcp_port_selector=MagicMock(),
        otp_provider=MagicMock(),
    )
    result = plugin.run(
        host=TARGET_HOST,
        servers=SERVERS,
        current_depth=1,
        options={},
        interrupt=Event(),
    )

    assert not result.exploitation_success
    assert not result.propagation_success


def test_get_ports_to_try__unknown_port_status():
    ports_to_try = get_ports_to_try(
        host=TARGET_HOST, target_ports=EXPLOITER_TARGET_PORTS, try_all_discovered_http_ports=False
    )

    assert len(ports_to_try) == 4
    assert all([port in ports_to_try for port in EXPLOITER_TARGET_PORTS])


def test_get_ports_to_try__try_all_discovered_http_ports():
    ports_to_try = get_ports_to_try(
        host=TARGET_HOST, target_ports=EXPLOITER_TARGET_PORTS, try_all_discovered_http_ports=True
    )

    assert len(ports_to_try) == 5
    assert all([port in ports_to_try for port in EXPLOITER_TARGET_PORTS])
    assert OPEN_HTTP_PORT in ports_to_try


def test_get_ports_to_try__do_not_try_configured_port_if_closed():
    target_ports = EXPLOITER_TARGET_PORTS + [CLOSED_PORT]

    ports_to_try = get_ports_to_try(
        host=TARGET_HOST, target_ports=target_ports, try_all_discovered_http_ports=False
    )

    assert len(ports_to_try) == 4
    assert all([port in ports_to_try for port in EXPLOITER_TARGET_PORTS])
    assert CLOSED_PORT not in ports_to_try
