import pydantic
import pytest
from agent_plugins.exploiters.rdp.src.rdp_options import RDPOptions

AGENT_BINARY_UPLOAD_TIMEOUT = 30.0
LOGIN_TIMEOUT = 60.0
RDP_CONNECT_TIMEOUT = 15.0
DOMAINS = ["MY_DOMAIN"]

RDP_OPTIONS_DICT = {
    "agent_binary_upload_timeout": AGENT_BINARY_UPLOAD_TIMEOUT,
    "domains": DOMAINS,
    "login_timeout": LOGIN_TIMEOUT,
    "rdp_connect_timeout": RDP_CONNECT_TIMEOUT,
}

RDP_OPTIONS_OBJECT = RDPOptions(
    agent_binary_upload_timeout=AGENT_BINARY_UPLOAD_TIMEOUT,
    domains=DOMAINS,
    login_timeout=LOGIN_TIMEOUT,
    rdp_connect_timeout=RDP_CONNECT_TIMEOUT,
)

AGENT_BINARY_UPLOAD_TIMEOUT_EXCEPTION = {"agent_binary_upload_timeout": 0}
AGENT_BINARY_UPLOAD_TIMEOUT_LE_EXCEPTION = {"agent_binary_upload_timeout": 101}
LOGIN_TIMEOUT_EXCEPTION = {"login_timeout": 0}
LOGIN_TIMEOUT_LE_EXCEPTION = {"login_timeout": 101}
RDP_CONNECT_TIMEOUT_EXCEPTION = {"rdp_connect_timeout": 0}
RDP_CONNECT_TIMEOUT_LE_EXCEPTION = {"rdp_connect_timeout": 101}


def test_rdp_options__serialization():
    assert RDP_OPTIONS_OBJECT.dict(simplify=True) == RDP_OPTIONS_DICT


def test_rdp_options__full_serialization():
    assert RDPOptions(**RDP_OPTIONS_OBJECT.dict(simplify=True)) == RDP_OPTIONS_OBJECT


def test_rdp_options__deserialization():
    assert RDPOptions(**RDP_OPTIONS_DICT) == RDP_OPTIONS_OBJECT


def test_rdp_options__default():
    rdp_options = RDPOptions()

    assert rdp_options.agent_binary_upload_timeout == 30.0
    assert rdp_options.login_timeout == 60.0
    assert rdp_options.rdp_connect_timeout == 15.0


@pytest.mark.parametrize(
    "options_dict",
    [
        AGENT_BINARY_UPLOAD_TIMEOUT_EXCEPTION,
        AGENT_BINARY_UPLOAD_TIMEOUT_LE_EXCEPTION,
        LOGIN_TIMEOUT_EXCEPTION,
        LOGIN_TIMEOUT_LE_EXCEPTION,
        RDP_CONNECT_TIMEOUT_EXCEPTION,
        RDP_CONNECT_TIMEOUT_LE_EXCEPTION,
    ],
)
def test_rdp_options_constraints(options_dict):
    with pytest.raises((pydantic.errors.NumberNotGtError, pydantic.errors.NumberNotLeError)):
        RDPOptions(**options_dict)


@pytest.mark.parametrize(
    "value",
    [
        None,
        1,
        1.5,
        "string",
        {"key": "value"},
    ],
)
def test_rdp_domains_constraints(value):
    with pytest.raises((pydantic.errors.NoneIsNotAllowedError, pydantic.errors.FrozenSetError)):
        RDPOptions(**{"domains": value})


def test_rdp_domains_unique():
    options = RDPOptions(**{"domains": ["MY_DOMAIN", "MY_DOMAIN", "YOUR_DOMAIN", "YOUR_DOMAIN"]})
    assert options.domains == frozenset(["MY_DOMAIN", "YOUR_DOMAIN"])
