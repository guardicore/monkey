from ipaddress import IPv4Address
from pathlib import PurePath
from typing import List
from unittest.mock import MagicMock

import pytest
from agent_plugins.exploiters.rdp.src.rdp_client import RDPClient
from agent_plugins.exploiters.rdp.src.rdp_options import RDPOptions
from agent_plugins.exploiters.rdp.src.rdp_remote_access_client import (
    COPY_FILE_TAGS,
    EXECUTION_TAGS,
    LOGIN_TAGS,
    RDPRemoteAccessClient,
)
from tests.data_for_tests.propagation_credentials import FULL_CREDENTIALS

from common import OperatingSystem
from common.credentials import Credentials
from infection_monkey.exploit.tools import (
    RemoteAuthenticationError,
    RemoteCommandExecutionError,
    RemoteFileCopyError,
)
from infection_monkey.i_puppet import TargetHost

EXPLOITER_TAGS = {"rdp-exploiter", "unit-test"}
CREDENTIALS: List[Credentials] = []
DESTINATION_PATH = PurePath("/tmp/destination_path")
FILE = b"file content"
TARGET_HOST = TargetHost(ip=IPv4Address("1.1.1.1"), operating_system=OperatingSystem.WINDOWS)


def stub_command_builder(*args, **kwargs):
    return "command"


@pytest.fixture
def mock_rdp_client():
    client = MagicMock(spec=RDPClient)
    client.connected.return_value = False

    def set_connected(value: bool):
        client.connected.return_value = value

    client.connect.side_effect = lambda *_, **__: set_connected(True)

    return client


@pytest.fixture
def rdp_remote_access_client(mock_rdp_client) -> RDPRemoteAccessClient:
    return RDPRemoteAccessClient(TARGET_HOST, RDPOptions(), stub_command_builder, mock_rdp_client)


def test_login__succeeds(
    rdp_remote_access_client: RDPRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()

    rdp_remote_access_client.login(FULL_CREDENTIALS[0], tags)

    assert tags == EXPLOITER_TAGS.union(LOGIN_TAGS)


def test_login__fails(
    mock_rdp_client: RDPClient,
    rdp_remote_access_client: RDPRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()
    mock_rdp_client.connect.side_effect = Exception()

    with pytest.raises(RemoteAuthenticationError):
        rdp_remote_access_client.login(FULL_CREDENTIALS[0], tags)

    assert tags == EXPLOITER_TAGS.union(LOGIN_TAGS)


def test_execute__fails_if_not_authenticated(
    rdp_remote_access_client: RDPRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()

    with pytest.raises(RemoteCommandExecutionError):
        rdp_remote_access_client.execute_agent(DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS


def test_execute__fails_if_command_not_executed(
    mock_rdp_client: RDPClient,
    rdp_remote_access_client: RDPRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()
    mock_rdp_client.execute_command.side_effect = Exception("file")
    rdp_remote_access_client.login(FULL_CREDENTIALS[0], set())

    with pytest.raises(RemoteCommandExecutionError):
        rdp_remote_access_client.execute_agent(DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS.union(EXECUTION_TAGS)


def test_execute__succeeds(
    rdp_remote_access_client: RDPRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()

    rdp_remote_access_client.login(FULL_CREDENTIALS[0], set())
    rdp_remote_access_client.execute_agent(DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS.union(EXECUTION_TAGS)


def test_copy_file__fails_if_not_authenticated(
    mock_rdp_client: RDPClient,
    rdp_remote_access_client: RDPRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()
    mock_rdp_client.connected.return_value = False

    with pytest.raises(RemoteFileCopyError):
        rdp_remote_access_client.copy_file(FILE, DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS


def test_copy_file__fails_if_client_copy_fails(
    mock_rdp_client: RDPClient,
    rdp_remote_access_client: RDPRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()
    mock_rdp_client.connected.return_value = True
    mock_rdp_client.copy_file.side_effect = Exception("file")

    with pytest.raises(RemoteFileCopyError):
        rdp_remote_access_client.copy_file(FILE, DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS.union(COPY_FILE_TAGS)


def test_copy_file__success(
    rdp_remote_access_client: RDPRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()
    rdp_remote_access_client.login(FULL_CREDENTIALS[0], set())

    rdp_remote_access_client.copy_file(FILE, DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS.union(COPY_FILE_TAGS)


def test_get_writable_paths__is_empty(
    rdp_remote_access_client: RDPRemoteAccessClient,
):
    assert rdp_remote_access_client.get_writable_paths() == []


def test_get_os__is_windows(
    rdp_remote_access_client: RDPRemoteAccessClient,
):
    assert rdp_remote_access_client.get_os() == OperatingSystem.WINDOWS
