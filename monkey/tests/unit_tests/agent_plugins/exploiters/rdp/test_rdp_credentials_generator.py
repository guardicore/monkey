import sys
from collections import namedtuple
from copy import copy
from typing import Sequence, Set, Type
from unittest.mock import MagicMock

import pytest
from agent_plugins.exploiters.rdp.src.rdp_credentials_generator import generate_rdp_credentials
from tests.data_for_tests.propagation_credentials import CREDENTIALS, PASSWORD_1

from common.credentials import Credentials, LMHash, NTHash, Password, Secret, Username

TEST_CREDENTIALS = copy(CREDENTIALS)
SECRET_TYPES: Set[Type[Secret]] = {Password, LMHash, NTHash}
DOMAINS: Sequence[str] = ["TEST_DOMAIN_1", "TEST_DOMAIN_2"]

LOCAL_DOMAIN = "LOCAL_DOMAIN"
LOCAL_USER = "localuser"
DomainUser = namedtuple("DomainUser", ["domain", "username"])


@pytest.fixture(scope="module")
def local_user() -> DomainUser:
    return DomainUser(LOCAL_DOMAIN, LOCAL_USER)


@pytest.fixture(scope="module", autouse=True)
def patch_win32api_get_user_name(local_user: DomainUser):
    win32api = MagicMock()
    win32api.GetUserNameEx = MagicMock(return_value=f"{local_user.domain}\\{local_user.username}")
    win32api.NameSamCompatible = None

    sys.modules["win32api"] = win32api


def assert_correct_identity_types(credentials: Sequence[Credentials]):
    for c in credentials:
        assert isinstance(c.identity, Username) or c.identity is None


def assert_correct_secret_types(credentials: Sequence[Credentials]):
    for c in credentials:
        assert type(c.secret) in SECRET_TYPES or c.secret is None


def assert_domain_users_added(credentials: Sequence[Credentials], domains: Sequence[str]):
    for c in credentials:
        if c.identity is None:
            continue

        if "\\" in c.identity.username:
            continue

        for domain in domains:
            assert (
                Credentials(
                    identity=Username(username=f"{domain}\\{c.identity.username}"),
                    secret=c.secret,
                )
                in credentials
            )


def test_brute_force_credentials_generation():
    generated_credentials = generate_rdp_credentials(
        TEST_CREDENTIALS, DOMAINS, running_from_windows=False
    )

    assert_correct_identity_types(generated_credentials)
    assert_correct_secret_types(generated_credentials)
    assert_domain_users_added(generated_credentials, DOMAINS)
    assert len(generated_credentials) == 30


def test_brute_force_credentials_generation__pulls_local_domains_on_windows():
    generated_credentials = generate_rdp_credentials(
        TEST_CREDENTIALS, DOMAINS, running_from_windows=True
    )

    assert_correct_identity_types(generated_credentials)
    assert_correct_secret_types(generated_credentials)
    assert_domain_users_added(generated_credentials, [*DOMAINS, LOCAL_DOMAIN])
    assert len(generated_credentials) == 40


def test_brute_force_credentials_generation__no_domains():
    generated_credentials = generate_rdp_credentials(
        TEST_CREDENTIALS, [], running_from_windows=False
    )

    assert len(generated_credentials) == 10


def test_brute_force_credentials_generation__no_domains_still_uses_local_domains_on_windows():
    generated_credentials = generate_rdp_credentials(
        TEST_CREDENTIALS, [], running_from_windows=True
    )

    assert_domain_users_added(generated_credentials, [LOCAL_DOMAIN])
    assert len(generated_credentials) == 20


def test_usernames_with_domain():
    input_credentials = [
        Credentials(
            identity=Username(username="domain\\testuser"), secret=Password(password=PASSWORD_1)
        )
    ]
    generated_credentials = generate_rdp_credentials(
        input_credentials, [], running_from_windows=False
    )

    assert len(generated_credentials) == 2
