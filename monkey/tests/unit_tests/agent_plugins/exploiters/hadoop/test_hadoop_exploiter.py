from ipaddress import IPv4Address
from threading import Event
from typing import Callable
from unittest.mock import MagicMock

import pytest
from agent_plugins.exploiters.hadoop.src.hadoop_exploit_client import HadoopExploitClient
from agent_plugins.exploiters.hadoop.src.hadoop_exploiter import HadoopExploiter
from agent_plugins.exploiters.hadoop.src.hadoop_options import HadoopOptions

from common import OperatingSystem
from infection_monkey.exploit.tools import HTTPBytesServer
from infection_monkey.i_puppet import ExploiterResultData
from infection_monkey.model import TargetHost

TARGET_IP = IPv4Address("1.1.1.1")
SERVERS = ["10.10.10.10"]
DOWNLOAD_URL = "http://download.me"


@pytest.fixture(params=[OperatingSystem.WINDOWS, OperatingSystem.LINUX])
def target_host(request) -> TargetHost:
    return TargetHost(ip=IPv4Address("1.1.1.1"), operating_system=request.param)


@pytest.fixture
def mock_bytes_server() -> HTTPBytesServer:
    mock_bytes_server = MagicMock(spec=HTTPBytesServer)
    mock_bytes_server.download_url = DOWNLOAD_URL
    mock_bytes_server.bytes_downloaded = Event()
    mock_bytes_server.bytes_downloaded.set()
    return mock_bytes_server


@pytest.fixture
def mock_hadoop_exploit_client() -> HadoopExploitClient:
    mock_hadoop_exploit_client = MagicMock()
    mock_hadoop_exploit_client.exploit.return_value = (False, False)
    return mock_hadoop_exploit_client


@pytest.fixture
def mock_start_agent_binary_server(mock_bytes_server) -> HTTPBytesServer:
    return MagicMock(return_value=mock_bytes_server)


@pytest.fixture
def hadoop_exploiter(
    mock_hadoop_exploit_client: HadoopExploitClient,
    mock_start_agent_binary_server: Callable[[TargetHost], HTTPBytesServer],
) -> HadoopExploiter:
    return HadoopExploiter(mock_hadoop_exploit_client, mock_start_agent_binary_server)


@pytest.fixture
def exploit_host(
    hadoop_exploiter: HadoopExploiter, target_host: TargetHost
) -> Callable[[], ExploiterResultData]:
    def _inner() -> ExploiterResultData:
        return hadoop_exploiter.exploit_host(
            target_host=target_host,
            servers=SERVERS,
            current_depth=1,
            options=HadoopOptions(),
            interrupt=Event(),
        )

    return _inner


def test_exploit_host__succeeds(exploit_host, mock_hadoop_exploit_client, mock_bytes_server):
    mock_hadoop_exploit_client.exploit.return_value = (True, True)
    result = exploit_host()

    assert mock_bytes_server.stop.called
    assert result.exploitation_success
    assert result.propagation_success


def test_exploit_host__fails_if_server_fails_to_start(
    exploit_host, mock_start_agent_binary_server, mock_bytes_server
):
    mock_start_agent_binary_server.side_effect = Exception()
    result = exploit_host()

    assert not mock_bytes_server.stop.called
    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_host__success_returned_on_server_stop_fail(
    exploit_host, mock_hadoop_exploit_client, mock_bytes_server
):
    mock_hadoop_exploit_client.exploit.return_value = (True, True)
    mock_bytes_server.stop.side_effect = Exception()

    result = exploit_host()

    assert mock_bytes_server.stop.called
    assert result.exploitation_success
    assert result.propagation_success


def test_exploit_host__fails_when_no_target_ports(
    hadoop_exploiter: HadoopExploiter, target_host: TargetHost
):
    result = hadoop_exploiter.exploit_host(
        target_host=target_host,
        servers=SERVERS,
        current_depth=1,
        options=HadoopOptions(target_ports=[]),
        interrupt=Event(),
    )

    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_host__fails_on_hadoop_exception(
    mock_hadoop_exploit_client, exploit_host, mock_bytes_server
):
    mock_hadoop_exploit_client.exploit.side_effect = Exception()
    result = exploit_host()

    assert mock_bytes_server.stop.called
    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_attempt_on_all_urls(
    hadoop_exploiter: HadoopExploiter,
    mock_hadoop_exploit_client: HadoopExploitClient,
    target_host: TargetHost,
):
    hadoop_exploiter.exploit_host(
        target_host=target_host,
        servers=SERVERS,
        current_depth=1,
        options=HadoopOptions(target_ports=[80, 443, 8080, 8000]),
        interrupt=Event(),
    )

    urls_passed_to_exploit = [
        args[0][3] for args in mock_hadoop_exploit_client.exploit.call_args_list
    ]

    assert f"http://{TARGET_IP}:80/" in urls_passed_to_exploit
    assert f"http://{TARGET_IP}:443/" in urls_passed_to_exploit
    assert f"http://{TARGET_IP}:8080/" in urls_passed_to_exploit
    assert f"http://{TARGET_IP}:8000/" in urls_passed_to_exploit


def test_exploit_attempt_skipped_on_interrupt(
    hadoop_exploiter: HadoopExploiter,
    mock_hadoop_exploit_client: HadoopExploitClient,
    target_host: TargetHost,
):
    interrupt = Event()
    interrupt.set()
    hadoop_exploiter.exploit_host(
        target_host=target_host,
        servers=SERVERS,
        current_depth=1,
        options=HadoopOptions(target_ports=[80, 443, 8080, 8000]),
        interrupt=interrupt,
    )

    assert mock_hadoop_exploit_client.exploit.call_count == 0
