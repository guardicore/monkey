from ipaddress import IPv4Address
from threading import Event
from typing import Callable
from unittest.mock import MagicMock

import pytest
from agent_plugins.exploiters.hadoop.src.hadoop_exploit_client import HadoopExploitClient
from agent_plugins.exploiters.hadoop.src.hadoop_exploiter import HadoopExploiter
from agent_plugins.exploiters.hadoop.src.hadoop_options import HadoopOptions
from monkeytypes import NetworkPort, NetworkProtocol, NetworkService, OperatingSystem, PortStatus

from infection_monkey.exploit import (
    AgentBinaryDownloadTicket,
    IAgentOTPProvider,
    IHTTPAgentBinaryServerRegistrar,
    ReservationID,
)
from infection_monkey.i_puppet import (
    ExploiterResult,
    PortScanData,
    PortScanDataDict,
    TargetHost,
    TargetHostPorts,
)
from infection_monkey.utils.ids import get_agent_id

AGENT_ID = get_agent_id()
TARGET_IP = IPv4Address("1.1.1.1")
SERVERS = ["10.10.10.10"]
DOWNLOAD_URL = "http://download.me"
HTTP_PORT = NetworkPort(12345)
HTTP_PORT_DATA = PortScanData(
    port=HTTP_PORT,
    status=PortStatus.OPEN,
    protocol=NetworkProtocol.TCP,
    service=NetworkService.HTTP,
)
CLOSED_PORT = NetworkPort(12346)
CLOSED_PORT_DATA = PortScanData(
    port=CLOSED_PORT,
    status=PortStatus.CLOSED,
    protocol=NetworkProtocol.TCP,
    service=NetworkService.HTTP,
)
CLOSED_PORT_80 = NetworkPort(80)
CLOSED_PORT_80_DATA = PortScanData(
    port=CLOSED_PORT_80,
    status=PortStatus.CLOSED,
    protocol=NetworkProtocol.TCP,
    service=NetworkService.HTTP,
)
HTTPS_PORT = NetworkPort(12347)
HTTPS_PORT_DATA = PortScanData(
    port=HTTPS_PORT,
    status=PortStatus.CLOSED,
    protocol=NetworkProtocol.TCP,
    service=NetworkService.HTTPS,
)


@pytest.fixture(params=[OperatingSystem.WINDOWS, OperatingSystem.LINUX])
def target_host(request) -> TargetHost:
    return TargetHost(ip=IPv4Address("1.1.1.1"), operating_system=request.param)


@pytest.fixture
def mock_hadoop_exploit_client() -> HadoopExploitClient:
    mock_hadoop_exploit_client = MagicMock()
    mock_hadoop_exploit_client.exploit.return_value = (False, False)
    return mock_hadoop_exploit_client


@pytest.fixture
def mock_http_agent_binary_server_registrar() -> IHTTPAgentBinaryServerRegistrar:
    http_agent_binary_server_registrar = MagicMock()
    download_completed = Event()
    download_completed.set()

    agent_binary_request = AgentBinaryDownloadTicket(
        id=ReservationID("8f53f4fb-2d33-465a-aa9c-de704a7e42b3"),
        download_url=DOWNLOAD_URL,
        download_completed=download_completed,
    )

    http_agent_binary_server_registrar.reserve_download.return_value = agent_binary_request

    return http_agent_binary_server_registrar


@pytest.fixture
def mock_otp_provider():
    mock_otp_provider = MagicMock(spec=IAgentOTPProvider)
    mock_otp_provider.get_otp.return_value = "123456"
    return mock_otp_provider


@pytest.fixture
def hadoop_exploiter(
    mock_hadoop_exploit_client: HadoopExploitClient,
    mock_http_agent_binary_server_registrar: IHTTPAgentBinaryServerRegistrar,
    mock_otp_provider: IAgentOTPProvider,
    agent_otp_environment_variable: str,
) -> HadoopExploiter:
    return HadoopExploiter(
        AGENT_ID,
        mock_hadoop_exploit_client,
        mock_http_agent_binary_server_registrar,
        mock_otp_provider,
        agent_otp_environment_variable,
    )


@pytest.fixture
def exploit_host(
    hadoop_exploiter: HadoopExploiter, target_host: TargetHost
) -> Callable[[], ExploiterResult]:
    def _inner() -> ExploiterResult:
        return hadoop_exploiter.exploit_host(
            target_host=target_host,
            servers=SERVERS,
            current_depth=1,
            options=HadoopOptions(),
            interrupt=Event(),
        )

    return _inner


def test_exploit_host__succeeds(
    exploit_host, mock_hadoop_exploit_client, mock_http_agent_binary_server_registrar
):
    mock_hadoop_exploit_client.exploit.return_value = (True, True)
    result = exploit_host()

    assert mock_http_agent_binary_server_registrar.clear_reservation.called
    assert result.exploitation_success
    assert result.propagation_success


def test_exploit_host__fails_if_server_fails_to_start(
    exploit_host, mock_http_agent_binary_server_registrar
):
    mock_http_agent_binary_server_registrar.reserve_download.side_effect = Exception()
    result = exploit_host()

    assert not mock_http_agent_binary_server_registrar.clear_reservation.called
    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_host__success_returned_on_server_stop_fail(
    exploit_host, mock_hadoop_exploit_client, mock_http_agent_binary_server_registrar
):
    mock_hadoop_exploit_client.exploit.return_value = (True, True)
    mock_http_agent_binary_server_registrar.clear_reservation.side_effect = Exception()

    result = exploit_host()

    assert mock_http_agent_binary_server_registrar.clear_reservation.called
    assert result.exploitation_success
    assert result.propagation_success


def test_exploit_host__fails_when_no_target_ports(
    hadoop_exploiter: HadoopExploiter, target_host: TargetHost
):
    result = hadoop_exploiter.exploit_host(
        target_host=target_host,
        servers=SERVERS,
        current_depth=1,
        options=HadoopOptions(target_ports=[]),
        interrupt=Event(),
    )

    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_host__fails_on_hadoop_exception(
    mock_hadoop_exploit_client, exploit_host, mock_http_agent_binary_server_registrar
):
    mock_hadoop_exploit_client.exploit.side_effect = Exception()
    result = exploit_host()

    assert mock_http_agent_binary_server_registrar.clear_reservation.called
    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_attempt_on_all_urls(
    hadoop_exploiter: HadoopExploiter,
    mock_hadoop_exploit_client: HadoopExploitClient,
    target_host: TargetHost,
):
    hadoop_exploiter.exploit_host(
        target_host=target_host,
        servers=SERVERS,
        current_depth=1,
        options=HadoopOptions(target_ports=[80, 443, 8080, 8000]),
        interrupt=Event(),
    )

    urls_passed_to_exploit = [
        args[0][3] for args in mock_hadoop_exploit_client.exploit.call_args_list
    ]

    assert len(urls_passed_to_exploit) == 4
    assert f"http://{TARGET_IP}:80/" in urls_passed_to_exploit
    assert f"http://{TARGET_IP}:443/" in urls_passed_to_exploit
    assert f"http://{TARGET_IP}:8080/" in urls_passed_to_exploit
    assert f"http://{TARGET_IP}:8000/" in urls_passed_to_exploit


def test_exploit_attempt_on_all_discovered_open_http_ports(
    hadoop_exploiter: HadoopExploiter,
    mock_hadoop_exploit_client: HadoopExploitClient,
):
    target_host = TargetHost(
        ip=IPv4Address("1.1.1.1"),
        operating_system=OperatingSystem.WINDOWS,
        ports_status=TargetHostPorts(
            tcp_ports=PortScanDataDict(
                {
                    HTTP_PORT: HTTP_PORT_DATA,
                    CLOSED_PORT: CLOSED_PORT_DATA,
                    HTTPS_PORT: HTTPS_PORT_DATA,
                }
            )
        ),
    )
    hadoop_exploiter.exploit_host(
        target_host=target_host,
        servers=SERVERS,
        current_depth=1,
        options=HadoopOptions(target_ports=[80, 443], try_all_discovered_http_ports=True),
        interrupt=Event(),
    )

    urls_passed_to_exploit = [
        args[0][3] for args in mock_hadoop_exploit_client.exploit.call_args_list
    ]

    assert len(urls_passed_to_exploit) == 3
    assert f"http://{TARGET_IP}:80/" in urls_passed_to_exploit
    assert f"http://{TARGET_IP}:443/" in urls_passed_to_exploit
    assert f"http://{TARGET_IP}:{HTTP_PORT}/" in urls_passed_to_exploit


def test_exploit_attempt_skips_configured_ports_if_closed(
    hadoop_exploiter: HadoopExploiter, mock_hadoop_exploit_client: HadoopExploitClient
):
    target_host = TargetHost(
        ip=IPv4Address("1.1.1.1"),
        operating_system=OperatingSystem.WINDOWS,
        ports_status=TargetHostPorts(
            tcp_ports=PortScanDataDict({CLOSED_PORT_80: CLOSED_PORT_80_DATA})
        ),
    )
    hadoop_exploiter.exploit_host(
        target_host=target_host,
        servers=SERVERS,
        current_depth=1,
        options=HadoopOptions(target_ports=[80, 443, 8080]),
        interrupt=Event(),
    )

    urls_passed_to_exploit = [
        args[0][3] for args in mock_hadoop_exploit_client.exploit.call_args_list
    ]

    assert len(urls_passed_to_exploit) == 2
    assert f"http://{TARGET_IP}:443/" in urls_passed_to_exploit
    assert f"http://{TARGET_IP}:8080/" in urls_passed_to_exploit


def test_exploit_attempt_skipped_on_interrupt(
    hadoop_exploiter: HadoopExploiter,
    mock_hadoop_exploit_client: HadoopExploitClient,
    target_host: TargetHost,
):
    interrupt = Event()
    interrupt.set()
    hadoop_exploiter.exploit_host(
        target_host=target_host,
        servers=SERVERS,
        current_depth=1,
        options=HadoopOptions(target_ports=[80, 443, 8080, 8000]),
        interrupt=interrupt,
    )

    assert mock_hadoop_exploit_client.exploit.call_count == 0
