from ipaddress import IPv4Address
from threading import Event
from typing import Callable, Tuple, Type
from unittest.mock import MagicMock
from uuid import UUID

import pytest
import requests
import requests_mock
from agent_plugins.exploiters.hadoop.src.hadoop_exploit_client import HadoopExploitClient
from agent_plugins.exploiters.hadoop.src.hadoop_options import HadoopOptions
from monkeyevents import ExploitationEvent, PropagationEvent
from monkeytypes import OperatingSystem

from common.event_queue import IAgentEventPublisher
from infection_monkey.i_puppet import TargetHost

SERVERS = ["1.1.1.2, 1.1.1.3"]
AGENT_ID = UUID("9614480d-471b-4568-86b5-cb922a34ed8a")
APPLICATION_ID = "application_1404198295326_0003"
NEW_APPLICATION_RESPONSE_DICT = {
    "application-id": APPLICATION_ID,
    "maximum-resource-capability": {"memory": 8192, "vCores": 32},
}

TARGET = "http://www.localhost"
NEW_APP_PATH = "/ws/v1/cluster/apps/new-application"
SUBMIT_APP_PATH = "/ws/v1/cluster/apps/"
NEW_APP_URL = f"{TARGET}{NEW_APP_PATH}"
SUBMIT_APP_URL = f"{TARGET}{SUBMIT_APP_PATH}"
URLS_TO_EXPLOIT = ["http://testurl1", "http://testurl2"]
NEW_APP_URL_1 = f"{URLS_TO_EXPLOIT[0]}{NEW_APP_PATH}"
SUBMIT_APP_URL_1 = f"{URLS_TO_EXPLOIT[0]}{SUBMIT_APP_PATH}"
NEW_APP_URL_2 = f"{URLS_TO_EXPLOIT[1]}{NEW_APP_PATH}"
SUBMIT_APP_URL_2 = f"{URLS_TO_EXPLOIT[1]}{SUBMIT_APP_PATH}"
COMMAND = "echo test"


@pytest.fixture
def mock_hadoop_server():
    with requests_mock.Mocker() as m:
        m.post(
            NEW_APP_URL,
            json=NEW_APPLICATION_RESPONSE_DICT,
        )
        m.post(SUBMIT_APP_URL, json="", status_code=202)
        m.post(
            NEW_APP_URL_1,
            json=NEW_APPLICATION_RESPONSE_DICT,
        )
        m.post(SUBMIT_APP_URL_1, json="", status_code=202)
        m.post(
            NEW_APP_URL_2,
            json=NEW_APPLICATION_RESPONSE_DICT,
        )
        m.post(SUBMIT_APP_URL_2, json="", status_code=202)
        yield m


@pytest.fixture
def mock_agent_event_publisher() -> IAgentEventPublisher:
    return MagicMock(spec=IAgentEventPublisher)


@pytest.fixture(params=[OperatingSystem.WINDOWS, OperatingSystem.LINUX])
def target_host(request) -> TargetHost:
    return TargetHost(ip=IPv4Address("1.1.1.1"), operating_system=request.param)


@pytest.fixture
def agent_binary_downloaded() -> Event:
    agent_binary_downloaded_event = Event()
    agent_binary_downloaded_event.set()

    return agent_binary_downloaded_event


@pytest.fixture
def hadoop_exploiter_client(
    request,
    mock_agent_event_publisher: IAgentEventPublisher,
) -> HadoopExploitClient:
    return HadoopExploitClient(
        AGENT_ID,
        mock_agent_event_publisher,
    )


@pytest.fixture
def exploit(
    target_host, agent_binary_downloaded, hadoop_exploiter_client
) -> Callable[[], Tuple[bool, bool]]:
    def _inner() -> Tuple[bool, bool]:
        return hadoop_exploiter_client.exploit(
            target_host,
            HadoopOptions(agent_binary_download_timeout=0.001),
            agent_binary_downloaded,
            TARGET,
            COMMAND,
        )

    return _inner


def test_exploit__new_application_request(
    mock_hadoop_server, exploit: Callable[[], Tuple[bool, bool]]
):
    exploit()

    assert mock_hadoop_server.called
    assert mock_hadoop_server.request_history[0].url == NEW_APP_URL


def test_exploit__payload(
    mock_hadoop_server, exploit: Callable[[], Tuple[bool, bool]], monkeypatch
):
    monkeypatch.setattr(
        "agent_plugins.exploiters.hadoop.src.hadoop_exploit_client.insecure_generate_random_string",
        MagicMock(return_value="random"),
    )

    exploit()
    payload = mock_hadoop_server.last_request.json()

    assert mock_hadoop_server.call_count == 2
    assert mock_hadoop_server.request_history[1].url == SUBMIT_APP_URL
    assert payload["application-id"] == APPLICATION_ID
    assert payload["application-name"] == f"{HadoopOptions().yarn_application_suffix}random"
    assert payload["am-container-spec"]["commands"]["command"] == COMMAND
    assert payload["application-type"] == "YARN"


def test_exploit__success(mock_hadoop_server, exploit: Callable[[], Tuple[bool, bool]]):
    exploitation_success, propagation_success = exploit()

    assert exploitation_success
    assert propagation_success


@pytest.mark.parametrize("status_code", [200, 404, 500])
def test_exploit__failure_if_bad_hadoop_response(
    mock_hadoop_server, exploit: Callable[[], Tuple[bool, bool]], status_code: int
):
    mock_hadoop_server.post(SUBMIT_APP_URL, json="", status_code=status_code)

    exploitation_success, propagation_success = exploit()

    assert not exploitation_success
    assert not propagation_success


def _assert_published_events(agent_event_publisher: MagicMock, success: bool):
    published_events = agent_event_publisher.publish.call_args_list
    published_events = [param[0][0] for param in published_events]

    assert ExploitationEvent in [type(event) for event in published_events]
    assert PropagationEvent in [type(event) for event in published_events]
    assert all([event.success == success for event in published_events])


def test_exploit__failure_if_request_timeout(
    mock_hadoop_server,
    exploit: Callable[[], Tuple[bool, bool]],
    mock_agent_event_publisher: MagicMock,
):
    mock_hadoop_server.post(NEW_APP_URL, exc=requests.ConnectionError)

    exploitation_success, propagation_success = exploit()

    assert not exploitation_success
    assert not propagation_success
    assert mock_hadoop_server.call_count == 1
    _assert_published_events(mock_agent_event_publisher, success=False)


def test_exploit__sends_events_on_success(
    mock_hadoop_server,
    exploit: Callable[[], Tuple[bool, bool]],
    mock_agent_event_publisher: MagicMock,
):
    exploit()

    _assert_published_events(mock_agent_event_publisher, success=True)


def test_exploit__sends_events_on_failure(
    mock_hadoop_server,
    exploit: Callable[[], Tuple[bool, bool]],
    mock_agent_event_publisher: MagicMock,
):
    mock_hadoop_server.post(SUBMIT_APP_URL, json="", status_code=500)

    exploit()

    _assert_published_events(mock_agent_event_publisher, success=False)


def get_event_by_type(agent_event_publisher: MagicMock, event_type: Type[Event]):
    published_events = agent_event_publisher.publish.call_args_list
    published_events = [param[0][0] for param in published_events]

    return next(event for event in published_events if isinstance(event, event_type))


def test_propagation_fails_if_binary_not_downloaded(
    agent_binary_downloaded: Event,
    mock_hadoop_server,
    exploit: Callable[[], Tuple[bool, bool]],
    mock_agent_event_publisher: MagicMock,
):
    agent_binary_downloaded.clear()

    exploitation_success, propagation_success = exploit()
    propagation_event = get_event_by_type(mock_agent_event_publisher, PropagationEvent)

    assert exploitation_success
    assert not propagation_success
    assert not propagation_event.success


def test_new_application_error_code(mock_hadoop_server, mock_agent_event_publisher, exploit):
    mock_hadoop_server.post(NEW_APP_URL, json="", status_code=500)

    exploitation_success, propagation_success = exploit()
    exploitation_event = get_event_by_type(mock_agent_event_publisher, ExploitationEvent)

    assert not exploitation_success
    assert not propagation_success
    assert "application ID" in exploitation_event.error_message


def test_new_application_malformed_response(
    mock_hadoop_server, mock_agent_event_publisher, exploit
):
    mock_hadoop_server.post(NEW_APP_URL, json={}, status_code=200)

    exploitation_success, propagation_success = exploit()
    exploitation_event = get_event_by_type(mock_agent_event_publisher, ExploitationEvent)

    assert not exploitation_success
    assert not propagation_success
    assert "missing the application-id" in exploitation_event.error_message
