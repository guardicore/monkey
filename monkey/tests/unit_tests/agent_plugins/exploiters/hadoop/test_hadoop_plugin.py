from ipaddress import IPv4Address
from threading import Event
from unittest.mock import MagicMock
from uuid import UUID

import pytest
from agent_plugins.exploiters.hadoop.src.plugin import Plugin

from common import OperatingSystem
from infection_monkey.exploit.tools import HTTPBytesServer
from infection_monkey.i_puppet import ExploiterResultData
from infection_monkey.model import TargetHost

AGENT_ID = UUID("5c145d4e-ec61-44f7-998e-17477112f50f")
BAD_HADOOP_OPTIONS_DICT = {"blah": "blah"}
TARGET_IP = IPv4Address("1.1.1.1")
TARGET_HOST = TargetHost(ip=TARGET_IP, operating_system=OperatingSystem.WINDOWS)
SERVERS = ["10.10.10.10"]
DOWNLOAD_URL = "http://download.me"


@pytest.fixture
def exploit_urls():
    good_result = ExploiterResultData(True, True)
    return MagicMock(result=good_result)


@pytest.fixture
def mock_bytes_server() -> HTTPBytesServer:
    mock_bytes_server = MagicMock(spec=HTTPBytesServer)
    mock_bytes_server.download_url = DOWNLOAD_URL
    mock_bytes_server.download_requested = True
    return mock_bytes_server


@pytest.fixture
def start_agent_binary_server(mock_bytes_server):
    return MagicMock(return_value=mock_bytes_server)


@pytest.fixture
def plugin(exploit_urls, start_agent_binary_server, monkeypatch) -> Plugin:
    monkeypatch.setattr(
        "agent_plugins.exploiters.hadoop.src.plugin.start_agent_binary_server",
        start_agent_binary_server,
    )
    monkeypatch.setattr(
        "agent_plugins.exploiters.hadoop.src.plugin.Hadoop.exploit_urls", exploit_urls
    )

    return Plugin(
        plugin_name="Hadoop",
        agent_id=AGENT_ID,
        agent_event_publisher=MagicMock(),
        agent_binary_repository=MagicMock(),
        tcp_port_selector=MagicMock(),
    )


def plugin_run(plugin: Plugin) -> ExploiterResultData:
    return plugin.run(
        host=TARGET_HOST,
        servers=SERVERS,
        current_depth=1,
        options={},
        interrupt=Event(),
    )


def test_run__succeeds(plugin, mock_bytes_server):
    result = plugin_run(plugin)

    assert mock_bytes_server.stop.called
    assert result.exploitation_success
    assert result.propagation_success


def test_run__fails_on_bad_options(plugin):
    result = plugin.run(
        host=TARGET_HOST,
        servers=SERVERS,
        current_depth=1,
        options=BAD_HADOOP_OPTIONS_DICT,
        interrupt=Event(),
    )

    assert not result.exploitation_success
    assert not result.propagation_success


def test_run__fails_when_no_target_ports(plugin):
    result = plugin.run(
        host=TARGET_HOST,
        servers=SERVERS,
        current_depth=1,
        options={"target_ports": []},
        interrupt=Event(),
    )

    assert not result.exploitation_success
    assert not result.propagation_success


def test_run__fails_on_hadoop_exception(exploit_urls, plugin, mock_bytes_server):
    exploit_urls.side_effect = Exception()

    result = plugin_run(plugin)

    assert mock_bytes_server.stop.called
    assert not result.exploitation_success
    assert not result.propagation_success


def test_run__fails_on_hadoop_failure(exploit_urls, plugin, mock_bytes_server):
    bad_result = ExploiterResultData()
    exploit_urls.return_value = bad_result

    result = plugin_run(plugin)

    assert mock_bytes_server.stop.called
    assert not result.exploitation_success
    assert not result.propagation_success


def test_run__fails_on_agent_binary_server_start_exception(plugin, monkeypatch):
    exceptional_start_server = MagicMock(side_effect=ValueError())
    monkeypatch.setattr(
        "agent_plugins.exploiters.hadoop.src.plugin.start_agent_binary_server",
        exceptional_start_server,
    )

    result = plugin_run(plugin)

    assert not result.exploitation_success
    assert not result.propagation_success
