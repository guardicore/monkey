from ipaddress import IPv4Address
from threading import Event
from unittest.mock import MagicMock
from uuid import UUID

import pytest
import requests_mock
from agent_plugins.exploiters.hadoop.src.hadoop import Hadoop, HadoopOptions

from common import OperatingSystem
from common.agent_events import ExploitationEvent, PropagationEvent
from common.event_queue import IAgentEventPublisher
from infection_monkey.model import TargetHost

FAKE_AGENT_ID = UUID("9614480d-471b-4568-86b5-cb922a34ed8a")
FAKE_APPLICATION_ID = "application_1404198295326_0003"
FAKE_NEW_APPLICATION_RESPONSE_JSON = {
    "application-id": FAKE_APPLICATION_ID,
    "maximum-resource-capability": {"memory": 8192, "vCores": 32},
}

NEW_APPLICATION_REQUEST_URL = "http://1.1.1.1:8088/ws/v1/cluster/apps/new-application"
SUBMIT_APPLICATION_URL = "http://1.1.1.1:8088/ws/v1/cluster/apps/"


@pytest.fixture
def mock_hadoop_server():
    with requests_mock.Mocker() as m:
        m.post(
            NEW_APPLICATION_REQUEST_URL,
            json=FAKE_NEW_APPLICATION_RESPONSE_JSON,
        )
        m.post(SUBMIT_APPLICATION_URL, json="", status_code=202)
        yield m


@pytest.fixture
def mock_agent_event_publisher() -> IAgentEventPublisher:
    return MagicMock(spec=IAgentEventPublisher)


@pytest.fixture
def mock_hadoop_exploiter(mock_agent_event_publisher: IAgentEventPublisher) -> Hadoop:
    target_host = TargetHost(ip=IPv4Address("1.1.1.1"), operating_system=OperatingSystem.WINDOWS)
    return Hadoop(target_host, HadoopOptions(), Event(), FAKE_AGENT_ID, mock_agent_event_publisher)


# Hadoop API:
# - https://hadoop.apache.org/docs/stable/hadoop-yarn/hadoop-yarn-site/WebServicesIntro.html
# - https://hadoop.apache.org/docs/stable/hadoop-yarn/hadoop-yarn-site/ResourceManagerRest.html
# - https://hadoop.apache.org/docs/stable/hadoop-yarn/hadoop-yarn-site/ResourceManagerRest.html#Cluster_New_Application_API


def test_exploit__sends_new_application_request(mock_hadoop_server, mock_hadoop_exploiter: Hadoop):
    mock_hadoop_exploiter.exploit("http://1.1.1.1:8088", "blah")

    assert mock_hadoop_server.called
    assert mock_hadoop_server.request_history[0].url == NEW_APPLICATION_REQUEST_URL


def test_exploit__sends_payload_with_app_id(mock_hadoop_server, mock_hadoop_exploiter: Hadoop):
    mock_hadoop_exploiter.exploit("http://1.1.1.1:8088", "blah")

    assert mock_hadoop_server.call_count == 2
    assert mock_hadoop_server.request_history[1].url == SUBMIT_APPLICATION_URL
    assert mock_hadoop_server.last_request.json()["application-id"] == FAKE_APPLICATION_ID


def test_exploit__success(mock_hadoop_server, mock_hadoop_exploiter: Hadoop):
    assert mock_hadoop_exploiter.exploit("http://1.1.1.1:8088", "blah")


@pytest.mark.parametrize("status_code", [200, 404, 500])
def test_exploit__failure_if_bad_hadoop_response(
    mock_hadoop_server, mock_hadoop_exploiter: Hadoop, status_code: int
):
    mock_hadoop_server.post(SUBMIT_APPLICATION_URL, json="", status_code=status_code)
    assert not mock_hadoop_exploiter.exploit("http://1.1.1.1:8088", "blah")


def test_exploit__sends_successful_propagation_event_on_success(
    mock_hadoop_server, mock_hadoop_exploiter: Hadoop, mock_agent_event_publisher
):
    mock_hadoop_exploiter.exploit("http://1.1.1.1:8088", "blah")

    propagation_events = [
        arg[0]
        for _, arg, _ in mock_agent_event_publisher.publish.mock_calls
        if isinstance(arg[0], PropagationEvent)
    ]

    assert propagation_events[-1].success


def test_exploit__sends_unsuccessful_propagation_event_on_failure(
    mock_hadoop_server, mock_hadoop_exploiter: Hadoop, mock_agent_event_publisher
):
    mock_hadoop_server.post(SUBMIT_APPLICATION_URL, json="", status_code=500)
    mock_hadoop_exploiter.exploit("http://1.1.1.1:8088", "blah")

    propagation_events = [
        arg[0]
        for _, arg, _ in mock_agent_event_publisher.publish.mock_calls
        if isinstance(arg[0], PropagationEvent)
    ]

    assert not propagation_events[-1].success


def test_exploit__sends_successful_exploitation_event_on_success(
    mock_hadoop_server, mock_hadoop_exploiter: Hadoop, mock_agent_event_publisher
):
    mock_hadoop_exploiter.exploit("http://1.1.1.1:8088", "blah")

    exploitation_events = [
        arg[0]
        for _, arg, _ in mock_agent_event_publisher.publish.mock_calls
        if isinstance(arg[0], ExploitationEvent)
    ]

    assert exploitation_events[-1].success


def test_exploit__sends_unsuccessful_exploitation_event_on_failure(
    mock_hadoop_server, mock_hadoop_exploiter: Hadoop, mock_agent_event_publisher
):
    mock_hadoop_server.post(SUBMIT_APPLICATION_URL, json="", status_code=500)
    mock_hadoop_exploiter.exploit("http://1.1.1.1:8088", "blah")

    exploitation_events = [
        arg[0]
        for _, arg, _ in mock_agent_event_publisher.publish.mock_calls
        if isinstance(arg[0], ExploitationEvent)
    ]

    assert not exploitation_events[-1].success
