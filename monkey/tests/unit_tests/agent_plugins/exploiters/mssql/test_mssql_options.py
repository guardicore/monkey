import pytest
from agent_plugins.exploiters.mssql.src.mssql_options import MSSQLOptions

from common.types import NetworkPort

TARGET_PORTS = [NetworkPort(22), NetworkPort(80), NetworkPort(443), NetworkPort(2222)]
TRY_DISCOVERED_MSSQL_PORTS = True
TRY_UNKNOWN_SERVICE_PORTS = True
SERVER_TIMEOUT = 11.2
DOWNLOAD_TIMEOUT = 44


MSSQL_OPTIONS_DICT = {
    "target_ports": TARGET_PORTS,
    "try_discovered_mssql_ports": TRY_DISCOVERED_MSSQL_PORTS,
    "try_unknown_service_ports": TRY_UNKNOWN_SERVICE_PORTS,
    "server_timeout": SERVER_TIMEOUT,
    "agent_binary_download_timeout": DOWNLOAD_TIMEOUT,
}


MSSQL_OPTIONS_OBJECT = MSSQLOptions(
    target_ports=TARGET_PORTS,
    try_discovered_mssql_ports=TRY_DISCOVERED_MSSQL_PORTS,
    try_unknown_service_ports=TRY_UNKNOWN_SERVICE_PORTS,
    server_timeout=SERVER_TIMEOUT,
    agent_binary_download_timeout=DOWNLOAD_TIMEOUT,
)

TARGET_PORTS_EXCEPTION = {"target_ports": [-1, 70000]}
SERVER_TIMEOUT_EXCEPTION = {"server_timeout": 0}
DOWNLOAD_TIMEOUT_EXCEPTION = {"agent_binary_download_timeout": -100}


def test_mssql_options__serialization():
    assert MSSQL_OPTIONS_OBJECT.model_dump(mode="json") == MSSQL_OPTIONS_DICT


def test_mssql_options__full_serialization():
    assert MSSQLOptions(**MSSQL_OPTIONS_OBJECT.model_dump(mode="json")) == MSSQL_OPTIONS_OBJECT


def test_msqql_options__deserialization():
    assert MSSQLOptions(**MSSQL_OPTIONS_DICT) == MSSQL_OPTIONS_OBJECT


def test_MSSQL_options__default():
    mssql_options = MSSQLOptions()

    assert mssql_options.target_ports == [1433]
    assert mssql_options.try_discovered_mssql_ports is False
    assert mssql_options.try_unknown_service_ports is False
    assert mssql_options.server_timeout == 15.0
    assert mssql_options.agent_binary_download_timeout == 60.0


@pytest.mark.parametrize(
    "options_dict",
    [
        TARGET_PORTS_EXCEPTION,
        SERVER_TIMEOUT_EXCEPTION,
        DOWNLOAD_TIMEOUT_EXCEPTION,
    ],
)
def test_mssql_options_constrains(options_dict):
    with pytest.raises(ValueError):
        MSSQLOptions(**options_dict)
