from ipaddress import IPv4Address
from threading import Event
from typing import Callable
from unittest.mock import MagicMock

import pytest
from agent_plugins.exploiters.mssql.src.mssql_exploit_client import MSSQLExploitClient
from agent_plugins.exploiters.mssql.src.mssql_exploiter import MSSQLExploiter
from agent_plugins.exploiters.mssql.src.mssql_options import MSSQLOptions
from monkeytypes import AgentID, Credentials, OperatingSystem
from tests.data_for_tests.propagation_credentials import IDENTITIES, SECRETS

from infection_monkey.exploit import (
    AgentBinaryDownloadTicket,
    IAgentOTPProvider,
    IHTTPAgentBinaryServerRegistrar,
    ReservationID,
)
from infection_monkey.exploit.tools import HTTPBytesServer
from infection_monkey.i_puppet import ExploiterResult, TargetHost

TARGET_IP = IPv4Address("1.1.1.1")
DOWNLOAD_URL = "http://download.me"
AGENT_ID = AgentID("8f53f4fb-2d33-465a-aa9c-de704a7e42b3")
SERVERS = ["0.0.0.0", "1.1.1.1"]
BRUTE_FORCE_CREDENTIALS = [
    Credentials(identity=IDENTITIES[0], secret=SECRETS[0]),
    Credentials(identity=IDENTITIES[0], secret=SECRETS[3]),
    Credentials(identity=IDENTITIES[2], secret=SECRETS[0]),
    Credentials(identity=IDENTITIES[2], secret=SECRETS[3]),
]


@pytest.fixture()
def target_host() -> TargetHost:
    return TargetHost(ip=IPv4Address("1.1.1.1"), operating_system=OperatingSystem.LINUX)


@pytest.fixture
def mock_bytes_server() -> HTTPBytesServer:
    mock_bytes_server = MagicMock(spec=HTTPBytesServer)
    mock_bytes_server.download_url = DOWNLOAD_URL
    mock_bytes_server.bytes_downloaded = Event()
    mock_bytes_server.bytes_downloaded.set()
    return mock_bytes_server


@pytest.fixture
def mock_mssql_exploit_client() -> MSSQLExploitClient:
    mock_mssql_exploit_client = MagicMock(spec=MSSQLExploitClient)
    mock_mssql_exploit_client.exploit_host.return_value = (False, False)
    return mock_mssql_exploit_client


@pytest.fixture
def mock_http_agent_binary_server_registrar() -> IHTTPAgentBinaryServerRegistrar:
    http_agent_binary_server_registrar = MagicMock()
    download_completed = Event()
    download_completed.set()

    agent_binary_request = AgentBinaryDownloadTicket(
        id=ReservationID("8f53f4fb-2d33-465a-aa9c-de704a7e42b3"),
        download_url=DOWNLOAD_URL,
        download_completed=download_completed,
    )
    http_agent_binary_server_registrar.reserve_download.return_value = agent_binary_request
    return http_agent_binary_server_registrar


@pytest.fixture
def mock_otp_provider():
    mock_otp_provider = MagicMock(spec=IAgentOTPProvider)
    mock_otp_provider.get_otp.return_value = "123456"
    return mock_otp_provider


@pytest.fixture
def mssql_exploiter(
    mock_mssql_exploit_client: MSSQLExploitClient,
    mock_http_agent_binary_server_registrar: IHTTPAgentBinaryServerRegistrar,
    mock_otp_provider: IAgentOTPProvider,
    agent_otp_environment_variable: str,
) -> MSSQLExploiter:
    return MSSQLExploiter(
        AGENT_ID,
        mock_mssql_exploit_client,
        mock_http_agent_binary_server_registrar,
        mock_otp_provider,
        agent_otp_environment_variable,
    )


@pytest.fixture
def exploit_host(
    mssql_exploiter: MSSQLExploiter, target_host: TargetHost
) -> Callable[[], ExploiterResult]:
    def _inner() -> ExploiterResult:
        return mssql_exploiter.exploit_host(
            target_host=target_host,
            servers=SERVERS,
            current_depth=1,
            options=MSSQLOptions(),
            brute_force_credentials=BRUTE_FORCE_CREDENTIALS,
            interrupt=Event(),
            ports_to_try=set(),
        )

    return _inner


def test_exploit_host__succeeds(
    exploit_host, mock_mssql_exploit_client, mock_http_agent_binary_server_registrar
):
    mock_mssql_exploit_client.exploit_host.return_value = (True, True)
    result = exploit_host()

    assert mock_http_agent_binary_server_registrar.clear_reservation.called
    assert result.exploitation_success
    assert result.propagation_success


def test_exploit_host__fails_if_server_fails_to_start(
    exploit_host, mock_http_agent_binary_server_registrar
):
    mock_http_agent_binary_server_registrar.reserve_download.side_effect = Exception()
    result = exploit_host()

    assert not mock_http_agent_binary_server_registrar.clear_reservation.called
    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_host__success_returned_on_server_stop_fail(
    exploit_host, mock_mssql_exploit_client, mock_http_agent_binary_server_registrar
):
    mock_mssql_exploit_client.exploit_host.return_value = (True, True)
    mock_http_agent_binary_server_registrar.clear_reservation.side_effect = Exception()

    result = exploit_host()

    assert mock_http_agent_binary_server_registrar.clear_reservation.called
    assert result.exploitation_success
    assert result.propagation_success


def test_exploit_host__fails_on_mssql_exception(
    mock_mssql_exploit_client, exploit_host, mock_http_agent_binary_server_registrar
):
    mock_mssql_exploit_client.exploit_host.side_effect = Exception()
    result = exploit_host()

    assert mock_http_agent_binary_server_registrar.clear_reservation.called
    assert not result.exploitation_success
    assert not result.propagation_success


def test_exploit_attempt_on_all_brute_force_credentials(
    mssql_exploiter: MSSQLExploiter,
    mock_mssql_exploit_client: MSSQLExploitClient,
    target_host: TargetHost,
):
    mssql_exploiter.exploit_host(
        target_host=target_host,
        options=MSSQLOptions(),
        servers=SERVERS,
        current_depth=1,
        brute_force_credentials=BRUTE_FORCE_CREDENTIALS,
        interrupt=Event(),
        ports_to_try=set(),
    )

    credentials_passed_to_exploit = [
        args[0][2] for args in mock_mssql_exploit_client.exploit_host.call_args_list
    ]

    assert len(credentials_passed_to_exploit) == len(BRUTE_FORCE_CREDENTIALS)
    for credentials in BRUTE_FORCE_CREDENTIALS:
        assert credentials in credentials_passed_to_exploit


def test_exploit_attempt_skipped_on_interrupt(
    mssql_exploiter: MSSQLExploiter,
    mock_mssql_exploit_client: MSSQLExploitClient,
    target_host: TargetHost,
):
    interrupt = Event()
    interrupt.set()
    mssql_exploiter.exploit_host(
        target_host=target_host,
        servers=SERVERS,
        current_depth=1,
        options=MSSQLOptions(),
        brute_force_credentials=BRUTE_FORCE_CREDENTIALS,
        interrupt=interrupt,
        ports_to_try=set(),
    )

    assert mock_mssql_exploit_client.exploit_host.call_count == 0
