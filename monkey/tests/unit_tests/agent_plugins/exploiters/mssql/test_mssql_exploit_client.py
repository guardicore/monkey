from ipaddress import IPv4Address
from threading import Event
from typing import Callable, Tuple, Type
from unittest.mock import MagicMock
from uuid import UUID

import pytest
from agent_plugins.exploiters.mssql.src.mssql_client import MSSQLClient
from agent_plugins.exploiters.mssql.src.mssql_exploit_client import MSSQLExploitClient
from agent_plugins.exploiters.mssql.src.mssql_options import MSSQLOptions
from monkeyevents import ExploitationEvent, PropagationEvent
from monkeytypes import (
    Credentials,
    NetworkPort,
    NetworkProtocol,
    NetworkService,
    OperatingSystem,
    PortStatus,
)
from tests.data_for_tests.propagation_credentials import IDENTITIES, SECRETS

from common.event_queue import IAgentEventPublisher
from infection_monkey.i_puppet import PortScanData, TargetHost

EXPLOITER_NAME = "MSSQL"
AGENT_ID = UUID("9614480d-471b-4568-86b5-cb922a34ed8a")

DOWNLOAD_COMMAND = "echo download"
LAUNCH_COMMAND = "echo launch"
CREDENTIALS = (Credentials(identity=IDENTITIES[0], secret=SECRETS[0]),)

TCP_PORT = NetworkPort(12345)
TCP_PORT_DATA = PortScanData(
    port=TCP_PORT,
    status=PortStatus.OPEN,
    protocol=NetworkProtocol.TCP,
    service=NetworkService.MSSQL,
)
CLOSED_PORT = NetworkPort(12346)
CLOSED_PORT_DATA = PortScanData(
    port=CLOSED_PORT,
    status=PortStatus.CLOSED,
    protocol=NetworkProtocol.TCP,
    service=NetworkService.MSSQL,
)
UNKNOWN_PORT = NetworkPort(12347)
UNKNOWN_PORT_DATA = PortScanData(
    port=UNKNOWN_PORT,
    status=PortStatus.OPEN,
    protocol=NetworkProtocol.TCP,
    service=NetworkService.UNKNOWN,
)


@pytest.fixture
def mock_mssql_client() -> MagicMock:
    client = MagicMock(spec=MSSQLClient)
    return client


@pytest.fixture
def mock_agent_event_publisher() -> IAgentEventPublisher:
    return MagicMock(spec=IAgentEventPublisher)


@pytest.fixture
def target_host() -> TargetHost:
    return TargetHost(ip=IPv4Address("1.1.1.1"), operating_system=OperatingSystem.WINDOWS)


@pytest.fixture
def agent_binary_downloaded() -> Event:
    agent_binary_downloaded_event = Event()
    agent_binary_downloaded_event.set()

    return agent_binary_downloaded_event


@pytest.fixture
def mssql_exploit_client(
    mock_agent_event_publisher: IAgentEventPublisher,
    mock_mssql_client,
) -> MSSQLExploitClient:
    return MSSQLExploitClient(
        EXPLOITER_NAME,
        AGENT_ID,
        mock_agent_event_publisher,
        mock_mssql_client,
    )


@pytest.fixture
def exploit_host(
    target_host, agent_binary_downloaded, mssql_exploit_client
) -> Callable[[], Tuple[bool, bool]]:
    def _inner() -> Tuple[bool, bool]:
        return mssql_exploit_client.exploit_host(
            target_host,
            MSSQLOptions(agent_binary_download_timeout=0.001),
            CREDENTIALS,
            DOWNLOAD_COMMAND,
            LAUNCH_COMMAND,
            agent_binary_downloaded,
            set(),
        )

    return _inner


def test_exploit__registers_command(
    mock_mssql_client, exploit_host: Callable[[], Tuple[bool, bool]]
):
    exploit_host()

    assert mock_mssql_client.run_command.call_count == 2


def test_exploit__success(exploit_host: Callable[[], Tuple[bool, bool]]):
    exploitation_success, propagation_success = exploit_host()

    assert exploitation_success
    assert propagation_success


def test_exploit__failure_if_login_fails(
    mock_mssql_client, exploit_host: Callable[[], Tuple[bool, bool]]
):
    mock_mssql_client.login.side_effect = Exception("test")

    exploitation_success, propagation_success = exploit_host()

    assert not exploitation_success
    assert not propagation_success


def _assert_published_events(agent_event_publisher: MagicMock, success: bool):
    published_events = agent_event_publisher.publish.call_args_list
    published_events = [param[0][0] for param in published_events]

    assert ExploitationEvent in [type(event) for event in published_events]
    assert PropagationEvent in [type(event) for event in published_events]
    assert all([event.success == success for event in published_events])


def test_exploit__sends_events_on_success(
    exploit_host: Callable[[], Tuple[bool, bool]],
    mock_agent_event_publisher: MagicMock,
):
    exploit_host()

    _assert_published_events(mock_agent_event_publisher, success=True)


def test_exploit__sends_events_on_failure(
    mock_mssql_client,
    exploit_host: Callable[[], Tuple[bool, bool]],
    mock_agent_event_publisher: MagicMock,
):
    mock_mssql_client.login.side_effect = Exception("test")

    exploit_host()
    published_events = mock_agent_event_publisher.publish.call_args_list
    published_events = [param[0][0] for param in published_events]

    assert ExploitationEvent in [type(event) for event in published_events]
    assert all([event.success is False for event in published_events])


def get_event_by_type(agent_event_publisher: MagicMock, event_type: Type[Event]):
    published_events = agent_event_publisher.publish.call_args_list
    published_events = [param[0][0] for param in published_events]

    return next(event for event in published_events if isinstance(event, event_type))


def test_propagation_fails_if_binary_not_downloaded(
    agent_binary_downloaded: Event,
    exploit_host: Callable[[], Tuple[bool, bool]],
    mock_agent_event_publisher: MagicMock,
):
    agent_binary_downloaded.clear()

    exploitation_success, propagation_success = exploit_host()
    propagation_event = get_event_by_type(mock_agent_event_publisher, PropagationEvent)

    assert exploitation_success
    assert not propagation_success
    assert not propagation_event.success


def test_exploit__failure_on_run_exception(
    mock_mssql_client, exploit_host: Callable[[], Tuple[bool, bool]]
):
    mock_mssql_client.login.side_effect = Exception("test")
    exploitation_success, propagation_success = exploit_host()

    assert not exploitation_success
    assert not propagation_success


def test_propagation__failure_on_run_exception(
    mock_mssql_client, exploit_host: Callable[[], Tuple[bool, bool]]
):
    mock_mssql_client.run_command.side_effect = Exception("test")
    exploitation_success, propagation_success = exploit_host()

    assert exploitation_success
    assert not propagation_success
