from ipaddress import IPv4Address
from pathlib import PureWindowsPath
from typing import List
from unittest.mock import MagicMock

import pytest
from agent_plugins.exploiters.powershell.src.powershell_client import PowerShellClient
from agent_plugins.exploiters.powershell.src.powershell_options import PowerShellOptions
from agent_plugins.exploiters.powershell.src.powershell_remote_access_client import (
    COPY_FILE_TAGS,
    EXECUTION_TAGS,
    LOGIN_TAGS,
    PowerShellRemoteAccessClient,
)
from tests.data_for_tests.propagation_credentials import FULL_CREDENTIALS

from common import OperatingSystem
from common.credentials import Credentials
from infection_monkey.exploit import IAgentBinaryRepository
from infection_monkey.exploit.tools import (
    RemoteAuthenticationError,
    RemoteCommandExecutionError,
    RemoteFileCopyError,
)
from infection_monkey.i_puppet import TargetHost

EXPLOITER_TAGS = {"powershell-exploiter", "unit-test"}
CREDENTIALS: List[Credentials] = []
DESTINATION_PATH = PureWindowsPath("C:\\destination_path")
FILE = b"file content"
TARGET_HOST = TargetHost(ip=IPv4Address("1.1.1.1"), operating_system=OperatingSystem.WINDOWS)


def stub_command_builder(*args, **kwargs):
    return "command"


@pytest.fixture
def mock_powershell_client():
    client = MagicMock(spec=PowerShellClient)
    client.connected.return_value = False

    def set_connected(value: bool):
        client.connected.return_value = value

    client.connect.side_effect = lambda *_, **__: set_connected(True)

    return client


@pytest.fixture
def mock_agent_binary_repository() -> IAgentBinaryRepository:
    return MagicMock(spec=IAgentBinaryRepository)


@pytest.fixture
def powershell_remote_access_client(mock_powershell_client) -> PowerShellRemoteAccessClient:
    return PowerShellRemoteAccessClient(
        TARGET_HOST, PowerShellOptions(), stub_command_builder, mock_powershell_client
    )


def test_login__succeeds(
    powershell_remote_access_client: PowerShellRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()

    powershell_remote_access_client.login(FULL_CREDENTIALS[0], tags)

    assert tags == EXPLOITER_TAGS.union(LOGIN_TAGS)


def test_login__fails(
    mock_powershell_client: PowerShellClient,
    powershell_remote_access_client: PowerShellRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()
    mock_powershell_client.connect.side_effect = Exception()

    with pytest.raises(RemoteAuthenticationError):
        powershell_remote_access_client.login(FULL_CREDENTIALS[0], tags)

    assert tags == EXPLOITER_TAGS.union(LOGIN_TAGS)


def test_execute__fails_if_not_authenticated(
    powershell_remote_access_client: PowerShellRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()

    with pytest.raises(RemoteCommandExecutionError):
        powershell_remote_access_client.execute_agent(DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS


def test_execute__fails_if_command_not_executed(
    mock_powershell_client: PowerShellClient,
    powershell_remote_access_client: PowerShellRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()
    mock_powershell_client.execute_cmd_as_detached_process.side_effect = Exception("file")
    powershell_remote_access_client.login(FULL_CREDENTIALS[0], set())

    with pytest.raises(RemoteCommandExecutionError):
        powershell_remote_access_client.execute_agent(DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS.union(EXECUTION_TAGS)


def test_execute__succeeds(
    mock_powershell_client: PowerShellClient,
    powershell_remote_access_client: PowerShellRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()

    powershell_remote_access_client.login(FULL_CREDENTIALS[0], set())
    powershell_remote_access_client.execute_agent(DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS.union(EXECUTION_TAGS)


def test_copy_file__fails_if_not_authenticated(
    mock_powershell_client: PowerShellClient,
    powershell_remote_access_client: PowerShellRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()
    mock_powershell_client.connected.return_value = False

    with pytest.raises(RemoteFileCopyError):
        powershell_remote_access_client.copy_file(FILE, DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS


def test_copy_file__fails_if_client_copy_fails(
    mock_powershell_client: PowerShellClient,
    powershell_remote_access_client: PowerShellRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()
    mock_powershell_client.connected.return_value = True
    mock_powershell_client.copy_file.return_value = True
    mock_powershell_client.copy_file.side_effect = Exception("file")

    with pytest.raises(RemoteFileCopyError):
        powershell_remote_access_client.copy_file(FILE, DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS


def test_copy_file__success(
    mock_powershell_client: PowerShellClient,
    powershell_remote_access_client: PowerShellRemoteAccessClient,
):
    tags = EXPLOITER_TAGS.copy()
    powershell_remote_access_client.login(FULL_CREDENTIALS[0], set())

    powershell_remote_access_client.copy_file(FILE, DESTINATION_PATH, tags)

    assert tags == EXPLOITER_TAGS.union(COPY_FILE_TAGS)


def test_get_writtable_paths__is_empty(
    powershell_remote_access_client: PowerShellRemoteAccessClient,
):
    assert powershell_remote_access_client.get_writable_paths() == []
