import pytest
from agent_plugins.exploiters.powershell.src.powershell_auth_options import (
    AUTH_BASIC,
    AUTH_NEGOTIATE,
    AUTH_NTLM,
    ENCRYPTION_AUTO,
    ENCRYPTION_NEVER,
    get_auth_options,
)

from common.credentials import Credentials, LMHash, NTHash, Password, Username

CREDENTIALS_WITH_PASSWORD = Credentials(
    identity=Username(username="user1"), secret=Password(password="password1")
)
CREDENTIALS_EMPTY_PASSWORD = Credentials(
    identity=Username(username="user2"), secret=Password(password="")
)
CREDENTIALS_NONE_PASSWORD = Credentials(identity=Username(username="user3"), secret=None)
CREDENTIALS_LM_HASH = Credentials(
    identity=Username(username="user4"), secret=LMHash(lm_hash="c080132b6f2a0c4e5d1029cc06f48a92")
)
CREDENTIALS_NT_HASH = Credentials(
    identity=Username(username="user5"), secret=NTHash(nt_hash="E9F85516721DDC218359AD5280DB4450")
)


@pytest.mark.parametrize(
    "credentials, host_fixture, expected_ssl",
    [
        # SSL is enabled if the host has an open HTTPS port
        (CREDENTIALS_WITH_PASSWORD, "https_only_host", True),
        (CREDENTIALS_WITH_PASSWORD, "http_and_https_both_enabled_host", True),
        # SSL is enabled if the credentials password is None AND the host has an open HTTPS port
        (CREDENTIALS_NONE_PASSWORD, "https_only_host", True),
        (CREDENTIALS_NONE_PASSWORD, "http_only_host", False),
        # SSL is disabled if the host has no open HTTPS port
        (CREDENTIALS_WITH_PASSWORD, "http_only_host", False),
        (CREDENTIALS_WITH_PASSWORD, "powershell_disabled_host", False),
        # SSL is disabled if the credentials password is empty
        (CREDENTIALS_EMPTY_PASSWORD, "https_only_host", False),
        (CREDENTIALS_EMPTY_PASSWORD, "http_only_host", False),
    ],
)
def test_get_auth_options__ssl(credentials, host_fixture, expected_ssl, request):
    host = request.getfixturevalue(host_fixture)
    auth_options = get_auth_options(credentials, host)
    assert auth_options.ssl is expected_ssl


@pytest.mark.parametrize(
    "credentials, expected_auth",
    [
        # Basic auth is used if the credentials password is empty
        (CREDENTIALS_EMPTY_PASSWORD, AUTH_BASIC),
        # Negotiate auth is used if the credentials is password or cached (None)
        (CREDENTIALS_WITH_PASSWORD, AUTH_NEGOTIATE),
        (CREDENTIALS_NONE_PASSWORD, AUTH_NEGOTIATE),
        # NTLM auth is used if the credentials is LM or NT hash
        (CREDENTIALS_LM_HASH, AUTH_NTLM),
        (CREDENTIALS_NT_HASH, AUTH_NTLM),
    ],
)
def test_get_auth_options__auth_type(credentials, expected_auth, http_only_host):
    auth_options = get_auth_options(credentials, http_only_host)

    assert auth_options.auth_type == expected_auth


@pytest.mark.parametrize(
    "credentials, expected_encryption",
    [
        (CREDENTIALS_WITH_PASSWORD, ENCRYPTION_AUTO),
        (CREDENTIALS_EMPTY_PASSWORD, ENCRYPTION_NEVER),
        (CREDENTIALS_NONE_PASSWORD, ENCRYPTION_AUTO),
    ],
)
def test_get_auth_options__encryption_with_password(
    credentials, expected_encryption, http_only_host
):
    auth_options = get_auth_options(credentials, http_only_host)

    assert auth_options.encryption == expected_encryption
