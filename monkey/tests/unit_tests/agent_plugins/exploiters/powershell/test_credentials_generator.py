import sys
from collections import namedtuple
from copy import copy
from typing import Optional, Sequence, Set, Type
from unittest.mock import MagicMock

import pytest
from agent_plugins.exploiters.powershell.src.credentials_generator import (
    generate_powershell_credentials,
)
from tests.data_for_tests.propagation_credentials import CREDENTIALS, IDENTITIES, SECRETS

from common.credentials import Credentials, LMHash, NTHash, Password, Secret, Username

TEST_DOMAIN = "TEST-DOMAIN"
LOCAL_USER = "localuser"
LOCAL_USER_IDENTITY = Username(username=LOCAL_USER)

DomainUser = namedtuple("DomainUser", ["domain", "username"])


@pytest.fixture(scope="module")
def local_user():
    return DomainUser(TEST_DOMAIN, LOCAL_USER)


@pytest.fixture(scope="module", autouse=True)
def patch_win32api_get_user_name(local_user):
    win32api = MagicMock()
    win32api.GetUserNameEx = MagicMock(return_value=f"{local_user.domain}\\{local_user.username}")
    win32api.NameSamCompatible = None

    sys.modules["win32api"] = win32api


INPUT_IDENTITIES = [i for i in IDENTITIES if isinstance(i, Username)]
assert len(INPUT_IDENTITIES) == 2

SECRET_TYPES: Set[Type[Secret]] = {Password, LMHash, NTHash}
INPUT_SECRETS: Sequence[Optional[Secret]] = [s for s in SECRETS if type(s) in SECRET_TYPES]
assert len(INPUT_SECRETS) == 5

TEST_CREDENTIALS = copy(CREDENTIALS)


def assert_cached_credentials_in_results(credentials: Sequence[Credentials]):
    assert Credentials(identity=None, secret=None) in credentials


def assert_cached_credentials_not_in_results(credentials: Sequence[Credentials]):
    assert Credentials(identity=None, secret=None) not in credentials


def assert_cached_password_credentials_in_results(
    credentials: Sequence[Credentials], running_on_windows: bool
):
    for i in INPUT_IDENTITIES:
        assert Credentials(identity=i, secret=None) in credentials

    if running_on_windows:
        assert Credentials(identity=LOCAL_USER_IDENTITY, secret=None) in credentials


def assert_empty_password_credentials_in_results(
    credentials: Sequence[Credentials], running_on_windows: bool
):
    for i in INPUT_IDENTITIES:
        assert Credentials(identity=i, secret=Password(password="")) in credentials

    if running_on_windows:
        assert (
            Credentials(identity=LOCAL_USER_IDENTITY, secret=Password(password="")) in credentials
        )


def assert_correct_identity_types(credentials: Sequence[Credentials]):
    for c in credentials:
        assert isinstance(c.identity, Username) or c.identity is None


def assert_correct_secret_types(credentials: Sequence[Credentials]):
    for c in credentials:
        assert type(c.secret) in SECRET_TYPES or c.secret is None


def assert_domain_users_added(credentials: Sequence[Credentials]):
    for c in credentials:
        if c.identity is None:
            continue

        if "\\" not in c.identity.username:
            assert (
                Credentials(
                    identity=Username(username=f"{TEST_DOMAIN}\\{c.identity.username}"),
                    secret=c.secret,
                )
                in credentials
            )


def assert_local_domain_usernames_added(credentials: Sequence[Credentials]):
    for c in credentials:
        if c.identity is None:
            continue

        if "\\" not in c.identity.username:
            assert (
                Credentials(
                    identity=Username(username=f".\\{c.identity.username}"), secret=c.secret
                )
                in credentials
            )


def test_empty_windows_true():
    generated_credentials = generate_powershell_credentials([], True)

    assert_cached_credentials_in_results(generated_credentials)


def test_empty_windows_false():
    generated_credentials = generate_powershell_credentials([], False)

    assert len(generated_credentials) == 0


def test_usernames_only_windows_true():
    input_credentials = [Credentials(identity=i, secret=None) for i in INPUT_IDENTITIES]
    generated_credentials = generate_powershell_credentials(input_credentials, True)

    assert_cached_credentials_in_results(generated_credentials)
    assert_cached_password_credentials_in_results(generated_credentials, True)
    assert_empty_password_credentials_in_results(generated_credentials, True)
    assert_domain_users_added(generated_credentials)
    assert_local_domain_usernames_added(generated_credentials)
    assert len(generated_credentials) == 19


def test_usernames_only_windows_false():
    input_credentials = [Credentials(identity=i, secret=None) for i in INPUT_IDENTITIES]
    generated_credentials = generate_powershell_credentials(input_credentials, False)

    assert len(generated_credentials) == 4
    assert_empty_password_credentials_in_results(generated_credentials, False)
    assert_local_domain_usernames_added(generated_credentials)
    assert_cached_credentials_not_in_results(generated_credentials)


def test_secrets_only_windows_true():
    input_credentials = [Credentials(identity=None, secret=s) for s in INPUT_SECRETS]
    generated_credentials = generate_powershell_credentials(input_credentials, True)

    assert len(generated_credentials) == 22


def test_secrets_only_windows_false():
    input_credentials = [Credentials(identity=None, secret=s) for s in INPUT_SECRETS]
    generated_credentials = generate_powershell_credentials(input_credentials, False)

    assert len(generated_credentials) == 0


def test_brute_force_credentials_generation__windows_true():
    generated_credentials = generate_powershell_credentials(TEST_CREDENTIALS, True)

    assert_correct_identity_types(generated_credentials)
    assert_correct_secret_types(generated_credentials)
    assert_cached_credentials_in_results(generated_credentials)
    assert_cached_password_credentials_in_results(generated_credentials, True)
    assert_empty_password_credentials_in_results(generated_credentials, True)
    assert_domain_users_added(generated_credentials)
    assert_local_domain_usernames_added(generated_credentials)
    assert len(generated_credentials) == 64


def test_brute_force_credentials_generation__windows_false():
    generated_credentials = generate_powershell_credentials(TEST_CREDENTIALS, False)

    assert_correct_identity_types(generated_credentials)
    assert_correct_secret_types(generated_credentials)
    assert_local_domain_usernames_added(generated_credentials)
    assert_cached_credentials_not_in_results(generated_credentials)
    assert len(generated_credentials) == 24


def test_usernames_with_domain_windows_true():
    input_credentials = [Credentials(identity=Username(username="domain\\testuser"), secret=None)]
    generated_credentials = generate_powershell_credentials(input_credentials, True)

    assert len(generated_credentials) == 9


@pytest.mark.parametrize(
    "local_username", [LOCAL_USER, f".\\{LOCAL_USER}", f"{TEST_DOMAIN}\\{LOCAL_USER}"]
)
def test_local_username_in_input(local_username):
    input_credentials = [Credentials(identity=Username(username=local_username), secret=None)]
    generated_credentials = generate_powershell_credentials(input_credentials, True)

    assert len(generated_credentials) == 7
