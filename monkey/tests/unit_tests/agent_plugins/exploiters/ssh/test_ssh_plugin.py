from ipaddress import IPv4Address
from threading import Event
from unittest.mock import MagicMock
from uuid import UUID

import pytest
from agent_plugins.exploiters.ssh.src.plugin import SSH_PORTS, Plugin
from monkeytypes import OperatingSystem

from common.types import PortStatus
from infection_monkey.exploit.tools import BruteForceExploiter
from infection_monkey.i_puppet import (
    ExploiterResult,
    PortScanData,
    PortScanDataDict,
    TargetHost,
    TargetHostPorts,
)
from infection_monkey.propagation_credentials_repository import IPropagationCredentialsRepository

AGENT_ID = UUID("5c145d4e-ec61-44f7-998e-17477112f50f")
BAD_SSH_OPTIONS_DICT = {"blah": "blah"}
TARGET_IP = IPv4Address("127.0.0.1")
OPEN_SSH_PORTS = TargetHostPorts(
    tcp_ports=PortScanDataDict({p: PortScanData(port=p, status=PortStatus.OPEN) for p in SSH_PORTS})
)
EMPTY_TARGET_HOST_PORTS = TargetHostPorts()
SERVERS = ["192.168.1.1"]
EXPLOITER_RESULT = ExploiterResult(True, False, error_message="Test error")


@pytest.fixture
def target_host() -> TargetHost:
    return TargetHost(
        ip=TARGET_IP,
        operating_system=OperatingSystem.WINDOWS,
        ports_status=OPEN_SSH_PORTS,
    )


@pytest.fixture
def propagation_credentials_repository():
    return MagicMock(spec=IPropagationCredentialsRepository)


class ErrorRaisingMockSSHExploiter(BruteForceExploiter):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def exploit_host(self, *args, **kwargs) -> ExploiterResult:
        raise Exception("Test error")


@pytest.fixture
def mock_ssh_exploiter():
    exploiter = MagicMock(spec=BruteForceExploiter)
    exploiter.exploit_host.return_value = EXPLOITER_RESULT
    return exploiter


@pytest.fixture
def plugin(
    monkeypatch,
    propagation_credentials_repository: IPropagationCredentialsRepository,
    mock_ssh_exploiter: BruteForceExploiter,
) -> Plugin:
    monkeypatch.setattr(
        "agent_plugins.exploiters.ssh.src.plugin.BruteForceExploiter",
        lambda *args, **kwargs: mock_ssh_exploiter,
    )

    return Plugin(
        plugin_name="SSH",
        agent_id=AGENT_ID,
        agent_event_publisher=MagicMock(),
        agent_binary_repository=MagicMock(),
        propagation_credentials_repository=propagation_credentials_repository,
        otp_provider=MagicMock(),
    )


def test_run__fails_on_bad_options(plugin: Plugin, target_host: TargetHost):
    result = plugin.run(
        host=target_host,
        servers=SERVERS,
        current_depth=1,
        options=BAD_SSH_OPTIONS_DICT,
        interrupt=Event(),
    )

    assert not result.exploitation_success
    assert not result.propagation_success


def test_run__attempts_exploit_if_port_status_unknown(
    plugin: Plugin,
    mock_ssh_exploiter: BruteForceExploiter,
    target_host: TargetHost,
):
    host = target_host.model_copy(deep=True)
    host.ports_status.tcp_ports = PortScanDataDict({})
    result = plugin.run(
        host=host,
        servers=SERVERS,
        current_depth=1,
        options={},
        interrupt=Event(),
    )

    mock_ssh_exploiter.exploit_host.assert_called_once()  # type: ignore [attr-defined]
    assert result == EXPLOITER_RESULT


def test_run__attempts_exploit_if_port_status_open(
    plugin: Plugin,
    mock_ssh_exploiter: BruteForceExploiter,
    target_host: TargetHost,
):
    host = target_host.model_copy(deep=True)
    host.ports_status.tcp_ports = PortScanDataDict(
        {SSH_PORTS[0]: PortScanData(port=SSH_PORTS[0], status=PortStatus.OPEN)}
    )
    result = plugin.run(
        host=host,
        servers=SERVERS,
        current_depth=1,
        options={},
        interrupt=Event(),
    )

    mock_ssh_exploiter.exploit_host.assert_called_once()  # type: ignore [attr-defined]
    assert result == EXPLOITER_RESULT


def test_run__skips_exploit_if_port_status_closed(
    plugin: Plugin,
    mock_ssh_exploiter: BruteForceExploiter,
    target_host: TargetHost,
):
    host = target_host.model_copy(deep=True)
    host.ports_status.tcp_ports = PortScanDataDict(
        {
            SSH_PORTS[0]: PortScanData(port=SSH_PORTS[0], status=PortStatus.CLOSED),
        }
    )

    result = plugin.run(
        host=host,
        servers=SERVERS,
        current_depth=1,
        options={},
        interrupt=Event(),
    )

    mock_ssh_exploiter.exploit_host.assert_not_called()  # type: ignore [attr-defined]
    assert result.exploitation_success is False
    assert result.propagation_success is False


def test_run__returns_exploiter_result(plugin: Plugin, target_host: TargetHost):
    result = plugin.run(
        host=target_host,
        servers=SERVERS,
        current_depth=1,
        options={},
        interrupt=Event(),
    )

    assert result == EXPLOITER_RESULT


def test_run__exploit_host_raises_exception(
    monkeypatch,
    plugin: Plugin,
    propagation_credentials_repository: IPropagationCredentialsRepository,
    target_host: TargetHost,
):
    monkeypatch.setattr(
        "agent_plugins.exploiters.ssh.src.plugin.BruteForceExploiter",
        ErrorRaisingMockSSHExploiter,
    )

    plugin = Plugin(
        plugin_name="SSH",
        agent_id=AGENT_ID,
        agent_event_publisher=MagicMock(),
        agent_binary_repository=MagicMock(),
        propagation_credentials_repository=propagation_credentials_repository,
        otp_provider=MagicMock(),
    )
    result = plugin.run(
        host=target_host,
        servers=SERVERS,
        current_depth=1,
        options={},
        interrupt=Event(),
    )

    assert not result.exploitation_success
    assert not result.propagation_success
