from ipaddress import IPv4Address
from unittest.mock import MagicMock
from uuid import UUID

import pytest
from monkeyevents import ExploitationEvent

from monkey_island.cc.agent_event_handlers import update_nodes_on_exploitation
from monkey_island.cc.models import CommunicationType
from monkey_island.cc.repositories import NetworkModelUpdateFacade

SUCCESSFUL_EXPLOITATION_EVENT = ExploitationEvent(
    source=UUID("012e7238-7b81-4108-8c7f-0787bc3f3c10"),
    target=IPv4Address("10.0.0.10"),
    timestamp=0,
    success=True,
    exploiter_name="test",
)
FAILED_EXPLOITATION_EVENT = ExploitationEvent(
    source=UUID("012e7238-7b81-4108-8c7f-0787bc3f3c10"),
    target=IPv4Address("10.0.0.10"),
    timestamp=0,
    success=False,
    exploiter_name="test",
    error_message="something went wrong",
)


@pytest.fixture
def network_model_update_facade() -> NetworkModelUpdateFacade:
    return MagicMock(spec=NetworkModelUpdateFacade)


def test_update_on_successful_exploit(network_model_update_facade: NetworkModelUpdateFacade):
    handler = update_nodes_on_exploitation(network_model_update_facade)

    handler(SUCCESSFUL_EXPLOITATION_EVENT)

    network_model_update_facade.upsert_communication_from_event.assert_called_with(  # type: ignore[attr-defined]  # noqa E501
        SUCCESSFUL_EXPLOITATION_EVENT, CommunicationType.EXPLOITED
    )


def test_no_update_on_failed_exploit(network_model_update_facade: NetworkModelUpdateFacade):
    handler = update_nodes_on_exploitation(network_model_update_facade)

    handler(FAILED_EXPLOITATION_EVENT)

    network_model_update_facade.upsert_communication_from_event.assert_not_called()  # type: ignore[attr-defined]  # noqa E501
