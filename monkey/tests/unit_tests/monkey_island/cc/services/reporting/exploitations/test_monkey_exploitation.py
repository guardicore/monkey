from ipaddress import IPv4Address, IPv4Interface
from uuid import UUID

from monkeyevents import ExploitationEvent
from monkeytypes import OperatingSystem
from tests.data_for_tests.agent_plugin.manifests import (
    EXPLOITER_NAME_1,
    EXPLOITER_NAME_2,
    EXPLOITER_TITLE_1,
    PLUGIN_MANIFESTS,
)

from monkey_island.cc.models import Machine
from monkey_island.cc.services.reporting.exploitations.monkey_exploitation import (
    get_exploits_used_on_node,
)

TARGET_IP_STR = "192.168.1.10"
OTHER_IP_STR = "192.168.99.99"
AGENT_ID = UUID("012e7238-7b81-4108-8c7f-0787bc3f3c10")
TIMESTAMP = 1664371327.4067292

EXPLOITER_NAME_3 = "MockExploiter3"
EXPLOITER_NAME_4 = "MockExploiter4"


EVENT_1 = ExploitationEvent(
    source=AGENT_ID,
    timestamp=TIMESTAMP,
    target=IPv4Address(TARGET_IP_STR),
    success=True,
    exploiter_name=EXPLOITER_NAME_3,  # doesn't have a manifest
)

EVENT_2 = ExploitationEvent(
    source=AGENT_ID,
    timestamp=TIMESTAMP,
    target=IPv4Address(OTHER_IP_STR),  # different IP
    success=True,
    exploiter_name=EXPLOITER_NAME_4,
)

EVENT_3 = ExploitationEvent(
    source=AGENT_ID,
    timestamp=TIMESTAMP,
    target=IPv4Address(TARGET_IP_STR),
    success=True,
    exploiter_name=EXPLOITER_NAME_1,
)

EVENT_4 = ExploitationEvent(
    source=AGENT_ID,
    timestamp=TIMESTAMP,
    target=IPv4Address(TARGET_IP_STR),
    success=True,
    exploiter_name=EXPLOITER_NAME_2,
)


MACHINE = Machine(
    id=1,
    hardware_id=101,
    island=True,
    network_interfaces=[IPv4Interface(TARGET_IP_STR)],
    operating_system=OperatingSystem.WINDOWS,
)


def test_get_exploits_used_on_node__2_exploits():
    exploits = get_exploits_used_on_node(MACHINE, [EVENT_1, EVENT_2], PLUGIN_MANIFESTS)
    assert sorted(exploits) == sorted([EXPLOITER_NAME_3])


def test_get_exploits_used_on_node__duplicate_exploits():
    exploits = get_exploits_used_on_node(MACHINE, [EVENT_2, EVENT_2], PLUGIN_MANIFESTS)
    assert exploits == []


def test_get_exploits_used_on_node__returns_only_exploits_for_node():
    exploits = get_exploits_used_on_node(MACHINE, [EVENT_1, EVENT_2, EVENT_3], PLUGIN_MANIFESTS)
    assert sorted(exploits) == sorted([EXPLOITER_NAME_3, EXPLOITER_TITLE_1])


def test_get_exploits_used_on_node__duplicate_plugin_exploits():
    exploits = get_exploits_used_on_node(MACHINE, [EVENT_3, EVENT_3], PLUGIN_MANIFESTS)
    assert exploits == [EXPLOITER_TITLE_1]


def test_get_exploits_used_on_node__mixed_exploits():
    exploits = get_exploits_used_on_node(
        MACHINE, [EVENT_1, EVENT_2, EVENT_3, EVENT_4], PLUGIN_MANIFESTS
    )
    assert sorted(exploits) == sorted([EXPLOITER_NAME_3, EXPLOITER_TITLE_1, EXPLOITER_NAME_2])


def test_get_exploits_used_on_node__empty_plugin_manifests():
    exploits = get_exploits_used_on_node(MACHINE, [EVENT_1, EVENT_2, EVENT_3], {})
    assert sorted(exploits) == sorted([])


def test_get_exploits_used_on_node__empty_title():
    exploits = get_exploits_used_on_node(MACHINE, [EVENT_4], PLUGIN_MANIFESTS)
    assert sorted(exploits) == sorted([EXPLOITER_NAME_2])
