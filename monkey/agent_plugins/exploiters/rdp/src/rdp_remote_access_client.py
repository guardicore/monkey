import logging
from pathlib import PurePath
from typing import Callable, Collection, Set

from common import OperatingSystem
from common.agent_events import AgentEventTag
from common.credentials import Credentials
from common.tags import (
    BRUTE_FORCE_T1110_TAG,
    INGRESS_TOOL_TRANSFER_T1105_TAG,
    REMOTE_SERVICES_T1021_TAG,
)
from common.types import NetworkPort
from infection_monkey.exploit.tools import (
    IRemoteAccessClient,
    RemoteAuthenticationError,
    RemoteCommandExecutionError,
    RemoteFileCopyError,
)
from infection_monkey.i_puppet import TargetHost

from .rdp_client import RDPClient
from .rdp_options import RDPOptions

logger = logging.getLogger(__name__)


LOGIN_TAGS = {
    REMOTE_SERVICES_T1021_TAG,
    BRUTE_FORCE_T1110_TAG,
}
COPY_FILE_TAGS = {
    REMOTE_SERVICES_T1021_TAG,
    INGRESS_TOOL_TRANSFER_T1105_TAG,
}
EXECUTION_TAGS = {
    REMOTE_SERVICES_T1021_TAG,
}

RDP_PORTS = [NetworkPort(3389)]


class RDPRemoteAccessClient(IRemoteAccessClient):
    def __init__(
        self,
        host: TargetHost,
        options: RDPOptions,
        command_builder: Callable[[PurePath], str],
    ):
        self._host = host
        self._options = options
        self._build_command = command_builder
        self._client = RDPClient()

    def login(self, credentials: Credentials, tags: Set[AgentEventTag]):
        try:
            self._client.connect(
                self._host, credentials, RDP_PORTS[0], self._options.rdp_connect_timeout
            )
        except Exception as err:
            raise RemoteAuthenticationError("Failed to login to RDP server") from err

    def get_os(self) -> OperatingSystem:
        return OperatingSystem.WINDOWS

    def execute_agent(self, agent_binary_path: PurePath, tags: Set[AgentEventTag]):
        try:
            command = self._build_command(agent_binary_path)
            self._client.execute_command(command)
        except Exception as err:
            raise RemoteCommandExecutionError("Failed to execute agent") from err

    def copy_file(self, file: bytes, dest: PurePath, tags: Set[AgentEventTag]):
        try:
            self._client.copy_file(file, dest, self._options.login_timeout)
        except Exception as err:
            raise RemoteFileCopyError("Failed to copy file to RDP server") from err

    def get_writable_paths(self) -> Collection[PurePath]:
        return []
