from dataclasses import dataclass
from enum import Enum

from common.credentials import Credentials, LMHash, NTHash, Password, get_plaintext
from common.types import NetworkPort, PortStatus
from infection_monkey.i_puppet import TargetHost

POWERSHELL_SSL_PORT = NetworkPort(5986)


class AuthenticationType(Enum):
    BASIC = "basic"
    NEGOTIATE = "negotiate"
    NTLM = "ntlm"


class EncryptionSetting(Enum):
    AUTO = "auto"
    NEVER = "never"


@dataclass
class AuthOptions:
    auth_type: AuthenticationType
    encryption: EncryptionSetting
    ssl: bool


def get_auth_options(credentials: Credentials, host: TargetHost) -> AuthOptions:
    ssl = _get_ssl(credentials, host)
    auth_type = _get_auth_type(credentials)
    encryption = _get_encryption(credentials)

    return AuthOptions(auth_type, encryption, ssl)


def _get_ssl(credentials: Credentials, host: TargetHost) -> bool:
    # Passwordless login only works with SSL false,
    # AuthenticationType.BASIC and EncryptionSetting.NEVER
    if isinstance(credentials.secret, Password):
        if get_plaintext(credentials.secret.password) == "":
            return False

    # Check if default PSRemoting ports are open. Prefer with SSL, if both are.
    if (
        POWERSHELL_SSL_PORT in host.ports_status.tcp_ports
        and host.ports_status.tcp_ports[POWERSHELL_SSL_PORT].status == PortStatus.OPEN
    ):  # Default for HTTPS
        return True

    return False


def _get_auth_type(credentials: Credentials):
    if isinstance(credentials.secret, Password):
        if get_plaintext(credentials.secret.password) == "":
            return AuthenticationType.BASIC

    if isinstance(credentials.secret, LMHash) or isinstance(credentials.secret, NTHash):
        return AuthenticationType.NTLM

    return AuthenticationType.NEGOTIATE


def _get_encryption(credentials: Credentials):
    secret = None
    if isinstance(credentials.secret, Password):
        secret = get_plaintext(credentials.secret.password)
    return EncryptionSetting.NEVER if secret == "" else EncryptionSetting.AUTO
