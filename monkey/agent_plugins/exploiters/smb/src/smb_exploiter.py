import logging
from typing import Iterable, Sequence

from common.credentials import Credentials
from common.types import Event
from infection_monkey.i_puppet import ExploiterResultData, TargetHost

from .smb_exploit_client import SMBExploitClient
from .smb_options import SMBOptions
from .smb_propagation_client import SMBPropagationClient

logger = logging.getLogger(__name__)


class SMBExploiter:
    def __init__(
        self,
        credentials: Iterable[Credentials],
        exploit_client: SMBExploitClient,
        propagation_client: SMBPropagationClient,
    ):
        self._credentials = credentials
        self._exploit_client = exploit_client
        self._propagation_client = propagation_client

    def exploit_host(
        self,
        host: TargetHost,
        servers: Sequence[str],
        current_depth: int,
        options: SMBOptions,
        interrupt: Event,
    ) -> ExploiterResultData:
        if interrupt.is_set():
            return ExploiterResultData()

        result = self._exploit_client.exploit(host, self._credentials, options)
        if not result:
            return ExploiterResultData()
        if interrupt.is_set():
            return ExploiterResultData(exploitation_success=result is not None)

        path, credentials = result
        propagated = self._propagation_client.propagate(
            host, path, credentials, servers, current_depth, options, interrupt
        )
        return ExploiterResultData(exploitation_success=True, propagation_success=propagated)
