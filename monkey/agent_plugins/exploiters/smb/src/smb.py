import logging
from typing import Type

# SMB
from impacket.dcerpc.v5 import srvs, transport
from impacket.dcerpc.v5.rpcrt import DCERPC_v5
from impacket.smbconnection import SMB2_DIALECT_002, SMB2_DIALECT_21, SMB_DIALECT, SMBConnection

from common.credentials import Credentials, LMHash, NTHash, Password, get_plaintext
from infection_monkey.i_puppet import TargetHost

logger = logging.getLogger(__name__)


class SMB:
    @classmethod
    def create_connection(self, host: TargetHost) -> SMBConnection:
        # Create a SMB connection with the credentials
        try:
            return SMBConnection(
                str(host.ip), str(host.ip), sess_port=445, preferredDialect=SMB_DIALECT
            )
        except Exception as err:
            logger.debug(
                f"Failed to create SMB connection to {host} on port 445. Trying port 139: {err}"
            )

            try:
                return SMBConnection("*SMBSEVER", str(host.ip), sess_port=139)
            except Exception as err:
                logger.debug(f"Failed to create SMB connection to {host} on port 139: {err}")
                return None

    @classmethod
    def get_dialect(self, smb: SMBConnection) -> str:
        return {
            SMB_DIALECT: "SMBv1",
            SMB2_DIALECT_002: "SMBv2.0",
            SMB2_DIALECT_21: "SMBv2.1",
        }.get(smb.getDialect(), "SMBv3.0")

    @classmethod
    def login(self, smb: SMBConnection, credentials: Credentials) -> bool:
        """True if login succeeded, False otherwise"""
        try:
            smb.login(
                credentials.identity,
                secret_for_type(credentials, Password),
                "",
                secret_for_type(credentials, LMHash),
                secret_for_type(credentials, NTHash),
            )
        except Exception as err:
            logger.debug(f"Failed to login to with user {credentials.identity}: {err}")
            return False
        return True

    @classmethod
    def logout_guest(self, smb: SMBConnection) -> bool:
        if smb.isGuestSession() > 0:
            try:
                smb.logoff()
            except Exception:
                # TODO: If we failed to logout, we should handle that
                pass

            return True
        return False

    @classmethod
    def query_server_info(self, smb: SMBConnection):
        try:
            info = SMB.execute_rpc_call(smb, "hNetrServerGetInfo", 102)
        except Exception as err:
            logger.debug(f"Failed to query server info: {err}")
            return None

        return info

    @classmethod
    def query_shared_resources(self, smb: SMBConnection):
        try:
            shares = SMB.execute_rpc_call(smb, "hNetrShareEnum", 2)
        except Exception as err:
            logger.debug(f"Failed to query shared resources: {err}")
            return None

        return shares

    @staticmethod
    def execute_rpc_call(smb, rpc_func, *args):
        dce = SMB.get_dce_bind(smb)
        rpc_method_wrapper = getattr(srvs, rpc_func, None)
        if not rpc_method_wrapper:
            raise ValueError("Cannot find RPC method '%s'" % (rpc_method_wrapper,))

        return rpc_method_wrapper(dce, *args)

    @staticmethod
    def get_dce_bind(smb: SMBConnection) -> DCERPC_v5:
        rpctransport = transport.SMBTransport(
            smb.getRemoteHost(), smb.getRemoteHost(), filename=r"\srvsvc", smb_connection=smb
        )
        dce = rpctransport.get_dce_rpc()
        dce.connect()
        dce.bind(srvs.MSRPC_UUID_SRVS)

        return dce


def secret_for_type(credentials: Credentials, secret_type: Type) -> str:
    return get_plaintext(credentials.secret) if type(credentials.secret) == secret_type else ""
