import logging
from typing import Type

# SMB
from impacket.dcerpc.v5 import srvs, transport
from impacket.dcerpc.v5.rpcrt import DCERPC_v5
from impacket.smbconnection import SMB_DIALECT, SMBConnection

from common.credentials import Credentials, LMHash, NTHash, Password, get_plaintext
from infection_monkey.i_puppet import TargetHost

logger = logging.getLogger(__name__)


def create_smb_connection(host: TargetHost) -> SMBConnection:
    # Create a SMB connection with the credentials
    try:
        return SMBConnection(
            str(host.ip), str(host.ip), sess_port=445, preferredDialect=SMB_DIALECT
        )
    except Exception as err:
        logger.debug(
            f"Failed to create SMB connection to {host} on port 445. Trying port 139: {err}"
        )

        try:
            return SMBConnection("*SMBSEVER", str(host.ip), sess_port=139)
        except Exception as err:
            logger.debug(f"Failed to create SMB connection to {host} on port 139: {err}")
            return None


def smb_login(smb: SMBConnection, credentials: Credentials) -> bool:
    """True if login succeeded, False otherwise"""
    try:
        smb.login(
            credentials.identity,
            _secret_for_type(credentials, Password),
            "",
            _secret_for_type(credentials, LMHash),
            _secret_for_type(credentials, NTHash),
        )
    except Exception as err:
        logger.debug(f"Failed to login to with user {credentials.identity}: {err}")
        return False
    return True


def _secret_for_type(credentials: Credentials, secret_type: Type) -> str:
    return get_plaintext(credentials.secret) if type(credentials.secret) == secret_type else ""


def logout_guest(smb: SMBConnection) -> bool:
    if smb.isGuestSession() > 0:
        try:
            smb.logoff()
        except Exception:
            # TODO: If we failed to logout, we should handle that
            pass

            return True
    return False
