import logging
from typing import Sequence

from common.credentials import Credentials
from common.event_queue import IAgentEventPublisher
from common.types import Event
from infection_monkey.i_puppet import TargetHost

from .smb_options import SMBOptions

logger = logging.getLogger(__name__)


# TODO: Use the command builder, and pass it servers, current_depth
class SMBPropagationClient:
    """Manages the RPC/SMB connection, Propagation events"""

    def __init__(self, agent_event_publisher: IAgentEventPublisher):
        self._agent_event_publisher = agent_event_publisher

    def propagate(
        self,
        host: TargetHost,
        path: str,
        credentials: Credentials,
        servers: Sequence[str],
        current_depth: int,
        options: SMBOptions,
        interrupt: Event,
    ) -> bool:
        """Do all of the propagation stuff"""

        if not self._run_agent(host, path):
            logger.debug(f"Failed to run agent on {host}")
            return False

        return True

    def _run_agent(self, host, path: str):
        # - Create RPC connection
        # - Build agent run command
        # - Use RPC to run the agent on the victim
        pass
