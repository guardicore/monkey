import logging
from pprint import pformat
from typing import Any, Dict, Sequence
from uuid import UUID

# common imports
from common.event_queue import IAgentEventPublisher
from common.types import Event
from common.utils.code_utils import del_key

# dependencies to get rid of or internalize
from infection_monkey.exploit import IAgentBinaryRepository
from infection_monkey.i_puppet import ExploiterResultData, TargetHost
from infection_monkey.propagation_credentials_repository import IPropagationCredentialsRepository

logger = logging.getLogger(__name__)


class Plugin:
    def __init__(
        self,
        *,
        plugin_name: str,
        agent_id: UUID,
        agent_event_publisher: IAgentEventPublisher,
        agent_binary_repository: IAgentBinaryRepository,
        propagation_credentials_repository: IPropagationCredentialsRepository,
        **kwargs,
    ):
        # TODO: Initialize exploiter
        self._agent_event_publisher = agent_event_publisher
        self._agent_binary_repository = agent_binary_repository
        self._propagation_credentials_repository = propagation_credentials_repository
        self._credentials = propagation_credentials_repository.get_credentials()

    def run(
        self,
        *,
        host: TargetHost,
        servers: Sequence[str],
        current_depth: int,
        options: Dict[str, Any],
        interrupt: Event,
        **kwargs,
    ) -> ExploiterResultData:
        # HTTP ports options are hack because they are needed in fingerprinters
        del_key(options, "http_ports")

        try:
            logger.debug(f"Parsing options: {pformat(options)}")
            # TODO: Parse options
        except Exception as err:
            msg = f"Failed to parse SMB options: {err}"
            logger.exception(msg)
            return ExploiterResultData(error_message=msg)

        try:
            logger.debug(f"Running SMB exploiter on host {host.ip}")
            # TODO: Run exploiter
        except Exception as err:
            msg = f"An unexpected exception occurred while attempting to exploit host: {err}"
            logger.exception(msg)
            return ExploiterResultData(error_message=msg)
