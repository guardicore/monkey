"""
    Remote code execution on HADOOP server with YARN and default settings
    Implementation is based on code from
    https://github.com/vulhub/vulhub/tree/master/hadoop/unauthorized-yarn
"""

import logging
from functools import partial
from pprint import pformat
from typing import Any, Dict, Sequence
from uuid import UUID

# common imports
from common.event_queue import IAgentEventPublisher
from common.types import Event
from common.utils.code_utils import del_key

# dependencies to get rid of or internalize
from infection_monkey.exploit import IAgentBinaryRepository
from infection_monkey.exploit.tools.http_agent_binary_server import start_agent_binary_server
from infection_monkey.i_puppet import ExploiterResultData
from infection_monkey.model import TargetHost
from infection_monkey.network import TCPPortSelector

from .hadoop_exploit_client import HadoopExploitClient
from .hadoop_exploiter import HadoopExploiter
from .hadoop_options import HadoopOptions

logger = logging.getLogger(__name__)


class Plugin:
    def __init__(
        self,
        *,
        plugin_name: str,
        agent_id: UUID,
        agent_event_publisher: IAgentEventPublisher,
        agent_binary_repository: IAgentBinaryRepository,
        tcp_port_selector: TCPPortSelector,
        **kwargs,
    ):
        hadoop_exploit_client = HadoopExploitClient(agent_id, agent_event_publisher)
        agent_binary_server_factory = partial(
            start_agent_binary_server,
            agent_binary_repository=agent_binary_repository,
            tcp_port_selector=tcp_port_selector,
        )

        self._hadoop_exploiter = HadoopExploiter(hadoop_exploit_client, agent_binary_server_factory)

    def run(
        self,
        *,
        host: TargetHost,
        servers: Sequence[str],
        current_depth: int,
        options: Dict[str, Any],
        interrupt: Event,
        **kwargs,
    ) -> ExploiterResultData:
        # HTTP ports options are hack because they are needed in fingerprinters
        del_key(options, "http_ports")

        try:
            logger.debug(f"Parsing options: {pformat(options)}")
            hadoop_options = HadoopOptions(**options)
        except Exception as err:
            msg = f"Failed to parse Hadoop options: {err}"
            logger.exception(msg)
            return ExploiterResultData(error_message=msg)

        logger.debug(f"Running Hadoop exploiter on host {host.ip}")
        return self._hadoop_exploiter.exploit_host(
            host, servers, current_depth, hadoop_options, interrupt
        )
