import logging
from functools import partial
from pprint import pformat
from typing import Any, Dict, Sequence

# common imports
from common.event_queue import IAgentEventPublisher
from common.types import AgentID, Event
from common.utils.code_utils import del_key

# dependencies to get rid of or internalize
from infection_monkey.exploit import IAgentBinaryRepository, IAgentOTPProvider
from infection_monkey.exploit.tools import all_udp_ports_are_closed
from infection_monkey.exploit.tools.http_agent_binary_server import start_agent_binary_server
from infection_monkey.i_puppet import ExploiterResultData, TargetHost
from infection_monkey.network import TCPPortSelector
from infection_monkey.propagation_credentials_repository import IPropagationCredentialsRepository

from .community_string_generator import generate_community_strings
from .snmp_exploit_client import SNMPExploitClient
from .snmp_exploiter import SNMPExploiter, StubSNMPOptions

logger = logging.getLogger(__name__)


SNMP_PORTS = [161]


def should_attempt_exploit(host: TargetHost) -> bool:
    return not all_udp_ports_are_closed(host, SNMP_PORTS)


class Plugin:
    def __init__(
        self,
        *,
        plugin_name: str,
        agent_id: AgentID,
        agent_event_publisher: IAgentEventPublisher,
        agent_binary_repository: IAgentBinaryRepository,
        propagation_credentials_repository: IPropagationCredentialsRepository,
        tcp_port_selector: TCPPortSelector,
        otp_provider: IAgentOTPProvider,
        **kwargs,
    ):
        exploit_client = SNMPExploitClient(agent_id, agent_event_publisher, plugin_name)
        agent_binary_server_factory = partial(
            start_agent_binary_server,
            agent_binary_repository=agent_binary_repository,
            tcp_port_selector=tcp_port_selector,
        )
        get_community_strings = partial(
            generate_community_strings, propagation_credentials_repository
        )
        self._snmp_exploiter = SNMPExploiter(
            agent_id,
            exploit_client,
            agent_binary_server_factory,
            get_community_strings,
            otp_provider,
        )

    def run(
        self,
        *,
        host: TargetHost,
        servers: Sequence[str],
        current_depth: int,
        options: Dict[str, Any],
        interrupt: Event,
        **kwargs,
    ) -> ExploiterResultData:
        # HTTP ports options are hack because they are needed in fingerprinters
        del_key(options, "http_ports")

        try:
            logger.debug(f"Parsing options: {pformat(options)}")
            snmp_options = StubSNMPOptions(**options)
        except Exception as err:
            msg = f"Failed to parse SNMP options: {err}"
            logger.exception(msg)
            return ExploiterResultData(error_message=msg)

        if not should_attempt_exploit(host):
            msg = f"Host {host.ip} has no open SNMP ports"
            logger.debug(msg)
            return ExploiterResultData(
                exploitation_success=False, propagation_success=False, error_message=msg
            )

        try:
            logger.debug(f"Running SNMP exploiter on host {host.ip}")
            return self._snmp_exploiter.exploit_host(
                host, servers, current_depth, snmp_options, interrupt
            )
        except Exception as err:
            msg = f"An unexpected exception occurred while attempting to exploit host: {err}"
            logger.exception(msg)
            return ExploiterResultData(error_message=msg)
