from functools import singledispatch
from ipaddress import IPv4Address

from infection_monkey.network.relay.tcp_relay import TCPRelay
from infection_monkey.telemetry.exploit_telem import ExploitTelem
from infection_monkey.telemetry.i_telem import ITelem
from infection_monkey.telemetry.messengers.i_telemetry_messenger import ITelemetryMessenger
from infection_monkey.tunnel import MonkeyTunnel


class ExploitInterceptingTelemetryMessenger(ITelemetryMessenger):
    def __init__(
        self, telemetry_messenger: ITelemetryMessenger, tunnel: MonkeyTunnel, relay: TCPRelay
    ):
        self._telemetry_messenger = telemetry_messenger
        self._tunnel = tunnel
        self._relay = relay

    def send_telemetry(self, telemetry: ITelem):
        _send_telemetry(telemetry, self._telemetry_messenger, self._tunnel, self._relay)


# Note: We can use @singledispatchmethod instead of @singledispatch if we migrate to Python 3.8 or
# later.
@singledispatch
def _send_telemetry(
    telemetry: ITelem,
    telemetry_messenger: ITelemetryMessenger,
    tunnel: MonkeyTunnel,
    relay: TCPRelay,
):
    telemetry_messenger.send_telemetry(telemetry)


@_send_telemetry.register
def _(
    telemetry: ExploitTelem,
    telemetry_messenger: ITelemetryMessenger,
    tunnel: MonkeyTunnel,
    relay: TCPRelay,
):
    if telemetry.propagation_result is True:
        tunnel.set_wait_for_exploited_machines()
        if relay:
            relay.add_potential_user(IPv4Address(telemetry.host["ip_addr"]))

    telemetry_messenger.send_telemetry(telemetry)
