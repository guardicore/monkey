from functools import singledispatch

from infection_monkey.telemetry.exploit_telem import ExploitTelem
from infection_monkey.telemetry.i_telem import ITelem
from infection_monkey.telemetry.messengers.i_telemetry_messenger import ITelemetryMessenger
from infection_monkey.tunnel import MonkeyTunnel


class ExploitInterceptingTelemetryMessenger(ITelemetryMessenger):
    def __init__(self, telemetry_messenger: ITelemetryMessenger, tunnel: MonkeyTunnel):
        self._telemetry_messenger = telemetry_messenger
        self._tunnel = tunnel

    def send_telemetry(self, telemetry: ITelem):
        _send_telemetry(telemetry, self._telemetry_messenger, self._tunnel)


# Note: We can use @singledispatchmethod instead of @singledispatch if we migrate to Python 3.8 or
# later.
@singledispatch
def _send_telemetry(
    telemetry: ITelem, telemetry_messenger: ITelemetryMessenger, tunnel: MonkeyTunnel
):
    telemetry_messenger.send_telemetry(telemetry)


@_send_telemetry.register
def _(telemetry: ExploitTelem, telemetry_messenger: ITelemetryMessenger, tunnel: MonkeyTunnel):
    if telemetry.propagation_result is True:
        tunnel.set_wait_for_exploited_machines()

    telemetry_messenger.send_telemetry(telemetry)
