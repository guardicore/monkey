from functools import singledispatch
from ipaddress import IPv4Address

from infection_monkey.network.relay import RelayUserHandler
from infection_monkey.telemetry.exploit_telem import ExploitTelem
from infection_monkey.telemetry.i_telem import ITelem
from infection_monkey.telemetry.messengers.i_telemetry_messenger import ITelemetryMessenger


class ExploitInterceptingTelemetryMessenger(ITelemetryMessenger):
    def __init__(
        self, telemetry_messenger: ITelemetryMessenger, relay_user_handler: RelayUserHandler
    ):
        self._telemetry_messenger = telemetry_messenger
        self._relay_user_handler = relay_user_handler

    def send_telemetry(self, telemetry: ITelem):
        _send_telemetry(telemetry, self._telemetry_messenger, self._relay_user_handler)


# Note: We can use @singledispatchmethod instead of @singledispatch if we migrate to Python 3.8 or
# later.
@singledispatch
def _send_telemetry(
    telemetry: ITelem,
    telemetry_messenger: ITelemetryMessenger,
    relay_user_handler: RelayUserHandler,
):
    telemetry_messenger.send_telemetry(telemetry)


@_send_telemetry.register
def _(
    telemetry: ExploitTelem,
    telemetry_messenger: ITelemetryMessenger,
    relay_user_handler: RelayUserHandler,
):
    if telemetry.propagation_result is True:
        if relay_user_handler:
            address = IPv4Address(str(telemetry.host["ip_addr"]))
            relay_user_handler.add_potential_user(address)

    telemetry_messenger.send_telemetry(telemetry)
