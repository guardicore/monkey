from typing import Dict, Sequence, Type

from common.event_queue import IAgentEventQueue
from common.types import Event
from infection_monkey.model import TargetHost
from infection_monkey.network.info import TCPPortSelector

from . import IAgentBinaryRepository
from .HostExploiter import HostExploiter


class ExploiterWrapper:
    """
    This class is a temporary measure to allow existing exploiters to play nicely within the
    confines of the IPuppet interface. It keeps a reference to an IAgentEventQueue that is passed
    to all exploiters. Additionally, it constructs a new instance of the exploiter for each call to
    exploit_host(). When exploiters are refactored into plugins, this class will likely go away.
    """

    class Inner:
        def __init__(
            self,
            exploit_class: Type[HostExploiter],
            event_queue: IAgentEventQueue,
            agent_binary_repository: IAgentBinaryRepository,
            tcp_port_selector: TCPPortSelector,
        ):
            self._exploit_class = exploit_class
            self._event_queue = event_queue
            self._agent_binary_repository = agent_binary_repository
            self._tcp_port_selector = tcp_port_selector

        def run(
            self,
            host: TargetHost,
            servers: Sequence[str],
            current_depth: int,
            options: Dict,
            interrupt: Event,
        ):
            exploiter = self._exploit_class()
            return exploiter.exploit_host(
                host,
                servers,
                current_depth,
                self._event_queue,
                self._agent_binary_repository,
                self._tcp_port_selector,
                options,
                interrupt,
            )

    def __init__(
        self,
        event_queue: IAgentEventQueue,
        agent_binary_repository: IAgentBinaryRepository,
        tcp_port_selector: TCPPortSelector,
    ):
        self._event_queue = event_queue
        self._agent_binary_repository = agent_binary_repository
        self._tcp_port_selector = tcp_port_selector

    def wrap(self, exploit_class: Type[HostExploiter]):
        return ExploiterWrapper.Inner(
            exploit_class, self._event_queue, self._agent_binary_repository, self._tcp_port_selector
        )
