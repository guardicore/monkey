from typing import Dict, Type

from infection_monkey.model import VictimHost
from infection_monkey.telemetry.messengers.i_telemetry_messenger import ITelemetryMessenger

from .HostExploiter import HostExploiter


class ExploiterWrapper:
    """
    This class is a temporary measure to allow existing exploiters to play nicely within the
    confines of the IPuppet interface. It keeps a reference to an ITelemetryMessenger that is passed
    to all exploiters. Additionally, it constructs a new instance of the exploiter for each call to
    exploit_host(). When exploiters are refactored into plugins, this class will likely go away.
    """

    class Inner:
        def __init__(
            self, exploit_class: Type[HostExploiter], telemetry_messenger: ITelemetryMessenger
        ):
            self._exploit_class = exploit_class
            self._telemetry_messenger = telemetry_messenger

        def exploit_host(self, host: VictimHost, options: Dict):
            exploiter = self._exploit_class()
            return exploiter.exploit_host(host, self._telemetry_messenger, options)

    def __init__(self, telemetry_messenger: ITelemetryMessenger):
        self._telemetry_messenger = telemetry_messenger

    def wrap(self, exploit_class: Type[HostExploiter]):
        return ExploiterWrapper.Inner(exploit_class, self._telemetry_messenger)
