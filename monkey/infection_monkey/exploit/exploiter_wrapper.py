import threading
from typing import Dict, Type

from common.event_queue import IEventQueue
from infection_monkey.model import VictimHost
from infection_monkey.telemetry.messengers.i_telemetry_messenger import ITelemetryMessenger

from . import IAgentBinaryRepository
from .HostExploiter import HostExploiter


class ExploiterWrapper:
    """
    This class is a temporary measure to allow existing exploiters to play nicely within the
    confines of the IPuppet interface. It keeps a reference to an ITelemetryMessenger that is passed
    to all exploiters. Additionally, it constructs a new instance of the exploiter for each call to
    exploit_host(). When exploiters are refactored into plugins, this class will likely go away.
    """

    class Inner:
        def __init__(
            self,
            exploit_class: Type[HostExploiter],
            telemetry_messenger: ITelemetryMessenger,
            event_queue: IEventQueue,
            agent_binary_repository: IAgentBinaryRepository,
        ):
            self._exploit_class = exploit_class
            self._telemetry_messenger = telemetry_messenger
            self._event_queue = event_queue
            self._agent_binary_repository = agent_binary_repository

        def exploit_host(
            self, host: VictimHost, current_depth: int, options: Dict, interrupt: threading.Event
        ):
            exploiter = self._exploit_class()
            return exploiter.exploit_host(
                host,
                current_depth,
                self._telemetry_messenger,
                self._event_queue,
                self._agent_binary_repository,
                options,
                interrupt,
            )

    def __init__(
        self,
        telemetry_messenger: ITelemetryMessenger,
        event_queue: IEventQueue,
        agent_binary_repository: IAgentBinaryRepository,
    ):
        self._telemetry_messenger = telemetry_messenger
        self._event_queue = event_queue
        self._agent_binary_repository = agent_binary_repository

    def wrap(self, exploit_class: Type[HostExploiter]):
        return ExploiterWrapper.Inner(
            exploit_class,
            self._telemetry_messenger,
            self._event_queue,
            self._agent_binary_repository,
        )
