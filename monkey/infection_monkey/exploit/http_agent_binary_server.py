import threading
from dataclasses import dataclass
from enum import Enum
from http.server import BaseHTTPRequestHandler
from ipaddress import IPv4Address
from typing import Callable, Optional, Type

from common import OperatingSystem
from common.types import Event
from infection_monkey.exploit import IAgentBinaryRepository
from infection_monkey.network import TCPPortSelector

RequestID = int


class RequestType(Enum):
    AGENT_BINARY = "agent_binary"
    DROPPER_SCRIPT = "dropper_script"


@dataclass(frozen=True)
class AgentBinaryRequest:
    id: RequestID
    type: RequestType
    operating_system: OperatingSystem
    download_url: str
    bytes_downloaded: Event


AgentBinaryHTTPHandlerFactory = Callable[[], Type[BaseHTTPRequestHandler]]


class HTTPAgentBinaryServer:
    """
    Serves Agent binaries over HTTP

    Allows clients to register for an Agent binary to be served. The server will serve the
    requested binary until it is unregistered or the server is stopped.

    :param tcp_port_selector: The TCP port selector to use
    :param agent_binary_repository: The Agent binary repository to use
    :param poll_interval: The interval to poll for server shutdown, in seconds
    """

    def __init__(
        self,
        tcp_port_selector: TCPPortSelector,
        agent_binary_repository: IAgentBinaryRepository,
        get_http_handler: AgentBinaryHTTPHandlerFactory,
        poll_interval: float = 0.5,
    ):
        self._tcp_port_selector = tcp_port_selector
        self._handler_class = get_http_handler()

    def register(
        self,
        operating_system: OperatingSystem,
        request_type: RequestType,
        requestor_ip: IPv4Address,
    ) -> AgentBinaryRequest:
        """
        Registers an Agent to be served

        :param operating_system: The operating system for the Agent binary to serve
        :param request_type: The type of request to serve
        :param requestor_ip: The IP address of the client that will download the Agent binary
        :raises RuntimeError: If the binary could not be served
        :returns: The request
        """
        request = AgentBinaryRequest(
            1, request_type, operating_system, "http://localhost", threading.Event()
        )
        self._handler_class.register_request(request)

        return request

    def unregister(self, request_id: RequestID) -> None:
        """
        Unregister an Agent binary from being served

        :param request_id: The ID of the request to unregister
        :raises KeyError: If the request ID is not registered
        """
        self._handler_class.unregister_request(request_id)

    def start(self):
        pass

    def stop(self, timeout: Optional[float] = None):
        pass
