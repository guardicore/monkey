from dataclasses import dataclass

from infection_monkey.exploit.powershell_utils.credentials import Credentials, SecretType
from infection_monkey.model.host import TargetHost

AUTH_BASIC = "basic"
AUTH_NEGOTIATE = "negotiate"
AUTH_NTLM = "ntlm"
ENCRYPTION_AUTO = "auto"
ENCRYPTION_NEVER = "never"


@dataclass
class AuthOptions:
    auth_type: str
    encryption: str
    ssl: bool


def get_auth_options(credentials: Credentials, host: TargetHost) -> AuthOptions:
    ssl = _get_ssl(credentials, host)
    auth_type = _get_auth_type(credentials)
    encryption = _get_encryption(credentials)

    return AuthOptions(auth_type, encryption, ssl)


def _get_ssl(credentials: Credentials, host: TargetHost) -> bool:
    # Passwordless login only works with SSL false, AUTH_BASIC and ENCRYPTION_NEVER
    if credentials.secret == "":
        return False

    # Check if default PSRemoting ports are open. Prefer with SSL, if both are.
    if "tcp-5986" in host.services:  # Default for HTTPS
        return True

    if "tcp-5985" in host.services:  # Default for HTTP
        return False

    return False


def _get_auth_type(credentials: Credentials):
    if credentials.secret == "":
        return AUTH_BASIC

    if credentials.secret_type in {SecretType.LM_HASH, SecretType.NT_HASH}:
        return AUTH_NTLM

    return AUTH_NEGOTIATE


def _get_encryption(credentials: Credentials):
    return ENCRYPTION_NEVER if credentials.secret == "" else ENCRYPTION_AUTO
