from multiprocessing import get_context
from multiprocessing.managers import SyncManager
from typing import Optional

from infection_monkey.exploit import IAgentBinaryRepository
from infection_monkey.network import TCPPortSelector

from .http_agent_binary_server import AgentBinaryHTTPHandlerFactory, HTTPAgentBinaryServer


class HTTPAgentBinaryServerFactory:
    # Both the handler and the server need to run on the same process because
    # the server needs to know the handler's class to be able to instantiate it.
    def __init__(
        self,
        tcp_port_selector: TCPPortSelector,
        agent_binary_repository: IAgentBinaryRepository,
        get_http_handler: AgentBinaryHTTPHandlerFactory,
    ):
        self._tcp_port_selector = tcp_port_selector
        self._agent_binary_repository = agent_binary_repository
        self._get_http_handler = get_http_handler
        self._manager: Optional[SyncManager] = None

    def _get_manager(self) -> SyncManager:
        if self._manager is None:
            SyncManager.register(
                "HTTPHandlerFactory", self._get_http_handler, exposed=("__call__",)
            )
            manager = get_context("spawn").Manager()
            self._manager = manager
            return manager

        return self._manager

    def __call__(self):
        manager = self._get_manager()

        get_http_handler = manager.HTTPHandlerFactory(  # type: ignore[attr-defined]
            self._agent_binary_repository
        )
        return HTTPAgentBinaryServer(
            self._tcp_port_selector,
            get_http_handler,
            manager.Event,
            manager.Lock(),
        )
