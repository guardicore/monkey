import logging
import os
import os.path
import urllib.error
import urllib.parse
import urllib.request
from threading import Lock

from infection_monkey.model import DOWNLOAD_TIMEOUT
from infection_monkey.network.firewall import app as firewall
from infection_monkey.network.info import get_free_tcp_port
from infection_monkey.transport import HTTPServer, LockedHTTPServer
from infection_monkey.exploit.tools.helpers import try_get_target_monkey
from infection_monkey.network.tools import get_interface_to_target

__author__ = 'itamar'

LOG = logging.getLogger(__name__)


class HTTPTools(object):

    @staticmethod
    def create_transfer(host, src_path, local_ip=None, local_port=None):
        if not local_port:
            local_port = get_free_tcp_port()

        if not local_ip:
            local_ip = get_interface_to_target(host.ip_addr)

        if not firewall.listen_allowed():
            return None, None

        httpd = HTTPServer(local_ip, local_port, src_path)
        httpd.daemon = True
        httpd.start()

        return "http://%s:%s/%s" % (local_ip, local_port, urllib.parse.quote(os.path.basename(src_path))), httpd

    @staticmethod
    def try_create_locked_transfer(host, src_path, local_ip=None, local_port=None):
        http_path, http_thread = HTTPTools.create_locked_transfer(host, src_path, local_ip, local_port)
        if not http_path:
            raise Exception("Http transfer creation failed.")
        LOG.info("Started http server on %s", http_path)
        return http_path, http_thread

    @staticmethod
    def create_locked_transfer(host, src_path, local_ip=None, local_port=None):
        """
        Create http server for file transfer with a lock
        :param host: Variable with target's information
        :param src_path: Monkey's path on current system
        :param local_ip: IP where to host server
        :param local_port: Port at which to host monkey's download
        :return: Server address in http://%s:%s/%s format and LockedHTTPServer handler
        """
        # To avoid race conditions we pass a locked lock to http servers thread
        lock = Lock()
        lock.acquire()
        if not local_port:
            local_port = get_free_tcp_port()

        if not local_ip:
            local_ip = get_interface_to_target(host.ip_addr)

        if not firewall.listen_allowed():
            LOG.error("Firewall is not allowed to listen for incomming ports. Aborting")
            return None, None

        httpd = LockedHTTPServer(local_ip, local_port, src_path, lock)
        httpd.start()
        lock.acquire()
        return "http://%s:%s/%s" % (local_ip, local_port, urllib.parse.quote(os.path.basename(src_path))), httpd


class MonkeyHTTPServer(HTTPTools):
    def __init__(self, host):
        super(MonkeyHTTPServer, self).__init__()
        self.http_path = None
        self.http_thread = None
        self.host = host

    def start(self):
        # Get monkey exe for host and it's path
        src_path = try_get_target_monkey(self.host)
        self.http_path, self.http_thread = MonkeyHTTPServer.try_create_locked_transfer(self.host, src_path)

    def stop(self):
        if not self.http_path or not self.http_thread:
            raise RuntimeError("Can't stop http server that wasn't started!")
        self.http_thread.join(DOWNLOAD_TIMEOUT)
        self.http_thread.stop()
