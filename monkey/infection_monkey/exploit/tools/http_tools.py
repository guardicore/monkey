import logging
import urllib.error
import urllib.parse
import urllib.request
from threading import Lock
from typing import Optional, Tuple

from infection_monkey.exploit import IAgentBinaryRepository
from infection_monkey.network.firewall import app as firewall
from infection_monkey.network.info import TCPPortSelector
from infection_monkey.network.tools import get_interface_to_target
from infection_monkey.transport import LockedHTTPServer

logger = logging.getLogger(__name__)


class HTTPTools(object):
    @staticmethod
    def try_create_locked_transfer(
        host,
        agent_binary_repository: IAgentBinaryRepository,
        tcp_port_selector: TCPPortSelector,
        local_ip=None,
        local_port: Optional[int] = None,
    ):
        http_path, http_thread = HTTPTools.create_locked_transfer(
            host, agent_binary_repository, tcp_port_selector, local_ip, local_port
        )
        if not http_path:
            raise Exception("Http transfer creation failed.")
        logger.info("Started http server on %s", http_path)
        return http_path, http_thread

    @staticmethod
    def create_locked_transfer(
        host,
        agent_binary_repository: IAgentBinaryRepository,
        tcp_port_selector: TCPPortSelector,
        local_ip=None,
        local_port: Optional[int] = None,
    ) -> Tuple[Optional[str], Optional[LockedHTTPServer]]:
        """
        Create http server for file transfer with a lock
        :param host: Variable with target's information
        :param src_path: Monkey's path on current system
        :param agent_binary_repository: Repository to download Monkey agents
        :param local_ip: IP where to host server
        :param local_port: Port at which to host monkey's download
        :return: Server address in http://%s:%s/%s format and LockedHTTPServer handler
        """
        # To avoid race conditions we pass a locked lock to http servers thread
        lock = Lock()
        lock.acquire()
        if not local_port:
            local_port = tcp_port_selector.get_free_tcp_port()

        if not local_ip:
            local_ip = get_interface_to_target(str(host.ip))

        if not firewall.listen_allowed():
            logger.error("Firewall is not allowed to listen for incoming ports. Aborting")
            return None, None

        httpd = LockedHTTPServer(
            local_ip,
            local_port,
            host.operating_system,
            agent_binary_repository,
            lock,
        )
        httpd.start()
        lock.acquire()
        return (
            f"http://{local_ip}:{local_port}/{urllib.parse.quote(host.operating_system.value)}",
            httpd,
        )
