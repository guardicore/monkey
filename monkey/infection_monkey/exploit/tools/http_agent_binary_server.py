from typing import Optional

from common.types import SocketAddress
from infection_monkey.exploit import IAgentBinaryRepository
from infection_monkey.exploit.tools import HTTPBytesServer
from infection_monkey.model import TargetHost
from infection_monkey.network import TCPPortSelector
from infection_monkey.network.tools import get_interface_to_target


class HTTPAgentBinaryServer:
    """
    An HTTP server that serves a single agent binary
    """

    def __init__(
        self,
        target_host: TargetHost,
        agent_binary_repository: IAgentBinaryRepository,
        tcp_port_selector: TCPPortSelector,
    ):
        bind_address = HTTPAgentBinaryServer._get_bind_address(target_host, tcp_port_selector)
        agent_binary = agent_binary_repository.get_agent_binary(target_host.operating_system).read()

        self._server = HTTPBytesServer(bind_address, agent_binary)

    @staticmethod
    def _get_bind_address(
        target_host: TargetHost, tcp_port_selector: TCPPortSelector
    ) -> SocketAddress:
        bind_ip = get_interface_to_target(str(target_host.ip))
        bind_port = tcp_port_selector.get_free_tcp_port()

        return SocketAddress(ip=bind_ip, port=bind_port)

    def start(self):
        """
        Runs the HTTP server in the background and blocks until the server has successfully started
        """

        return self._server.start()

    def stop(self, timeout: Optional[float] = None):
        """
        Stops the HTTP server.

        :param timeout: A floating point number of seconds to wait for the server to stop. If this
                        argument is None (the default), the method blocks until the HTTP server
                        terminates. If `timeout` is a positive floating point number, this method
                        blocks for at most `timeout` seconds.
        """
        return self._server.stop(timeout)

    @property
    def download_requested(self) -> bool:
        """
        Returns whether or not a victim has downloaded the bytes from the server.

        :return: True if the victim has downloaded the bytes from the server. False
                 otherwise.
        """
        return self._server.download_requested

    @property
    def download_url(self) -> str:
        """
        Returns the URL that should be used to download the bytes from the server

        :return: The URL that should be used to download the bytes from the server
        """
        return self._server.download_url
