{
    "id": "tbxb2cGgUiJQ8Btma0fp",
    "name": "Add a simple Post Breach action",
    "task": {
        "dod": "You should add a new PBA to the Monkey which creates a new user on the machine.",
        "tests": [],
        "hints": [
            "See `ScheduleJobs` PBA for an example of a PBA which only uses shell commands.",
            "Make sure to add the PBA to the configuration as well.",
            "MITRE ATT&CK technique T1136 articulates that adversaries may create an account to maintain access to victim systems, therefore, the BackdoorUser PBA is relevant to it. Make sure to map this PBA to the MITRE ATT&CK configuration and report."
        ]
    },
    "content": [
        {
            "type": "text",
            "text": "Read [our documentation about adding a new PBA](https://www.guardicore.com/infectionmonkey/docs/development/adding-post-breach-actions/).\n\nAfter that we want you to add the BackdoorUser PBA. The commands that add users for Win and Linux can be retrieved from `get_commands_to_add_user` - make sure you see how to use this function correctly. \n\nNote that the PBA should impact the T1136 MITRE technique as well! \n\n# Manual test to confirm\n\n1. Run the Monkey Island\n2. Make sure your new PBA is enabled by default in the config - for this test, disable network scanning, exploiting, and all other PBAs\n3. Run Monkey\n4. See the PBA in the security report\n5, See the PBA in the MITRE report in the relevant technique\n"
        },
        {
            "type": "snippet",
            "path": "monkey/common/common_consts/post_breach_consts.py",
            "comments": [],
            "firstLineNumber": 1,
            "lines": [
                " POST_BREACH_COMMUNICATE_AS_NEW_USER = \"Communicate as new user\"",
                "*POST_BREACH_BACKDOOR_USER = \"Backdoor user\"",
                "+# Swimmer: PUT THE NEW CONST HERE!",
                " POST_BREACH_FILE_EXECUTION = \"File execution\"",
                " POST_BREACH_SHELL_STARTUP_FILE_MODIFICATION = \"Modify shell startup file\"",
                " POST_BREACH_HIDDEN_FILES = \"Hide files and directories\""
            ]
        },
        {
            "type": "snippet",
            "path": "monkey/infection_monkey/post_breach/actions/add_user.py",
            "comments": [],
            "firstLineNumber": 1,
            "lines": [
                "*from common.common_consts.post_breach_consts import POST_BREACH_BACKDOOR_USER",
                "*from infection_monkey.config import WormConfiguration",
                " from infection_monkey.post_breach.pba import PBA",
                " from infection_monkey.utils.users import get_commands_to_add_user",
                " ",
                " ",
                " class BackdoorUser(PBA):",
                "     def __init__(self):",
                "*        linux_cmds, windows_cmds = get_commands_to_add_user(",
                "+        pass  # Swimmer: Impl here!",
                "*            WormConfiguration.user_to_add,",
                "*            WormConfiguration.remote_user_pass)",
                "*        super(BackdoorUser, self).__init__(",
                "*            POST_BREACH_BACKDOOR_USER,",
                "*            linux_cmd=' '.join(linux_cmds),",
                "*            windows_cmd=windows_cmds)"
            ]
        },
        {
            "type": "snippet",
            "path": "monkey/monkey_island/cc/services/attack/technique_reports/T1136.py",
            "comments": [],
            "firstLineNumber": 1,
            "lines": [
                "*from common.common_consts.post_breach_consts import POST_BREACH_BACKDOOR_USER, POST_BREACH_COMMUNICATE_AS_NEW_USER",
                " from monkey_island.cc.services.attack.technique_reports.pba_technique import PostBreachTechnique",
                " ",
                " __author__ = \"shreyamalviya\""
            ]
        },
        {
            "type": "snippet",
            "path": "monkey/monkey_island/cc/services/attack/technique_reports/T1136.py",
            "comments": [],
            "firstLineNumber": 9,
            "lines": [
                "     unscanned_msg = \"Monkey didn't try creating a new user on the network's systems.\"",
                "     scanned_msg = \"Monkey tried creating a new user on the network's systems, but failed.\"",
                "     used_msg = \"Monkey created a new user on the network's systems.\"",
                "*    pba_names = [POST_BREACH_BACKDOOR_USER, POST_BREACH_COMMUNICATE_AS_NEW_USER]",
                "+    pba_names = [POST_BREACH_COMMUNICATE_AS_NEW_USER]"
            ]
        },
        {
            "type": "snippet",
            "path": "monkey/monkey_island/cc/services/config_schema/definitions/post_breach_actions.py",
            "comments": [],
            "firstLineNumber": 4,
            "lines": [
                "                    \"might do after breaching a new machine. Used in ATT&CK and Zero trust reports.\",",
                "     \"type\": \"string\",",
                "     \"anyOf\": [",
                "*        {",
                "+        # Swimmer: Add new PBA here to config!",
                "*            \"type\": \"string\",",
                "*            \"enum\": [",
                "*                \"BackdoorUser\"",
                "*            ],",
                "*            \"title\": \"Back door user\",",
                "*            \"safe\": True,",
                "*            \"info\": \"Attempts to create a new user on the system and delete it afterwards.\",",
                "*            \"attack_techniques\": [\"T1136\"]",
                "*        },",
                "         {",
                "             \"type\": \"string\",",
                "             \"enum\": ["
            ]
        },
        {
            "type": "text",
            "text": "Take a look at the configuration of the island again - see the \"command to run after breach\" option we offer the user? It's implemented exactly like you did right now but each user can do it for themselves. \n\nHowever, what if the PBA needs to do stuff which is more complex than just running a few commands? In that case... "
        }
    ],
    "file_version": "2.0.0",
    "meta": {
        "app_version": "0.3.8-0",
        "file_blobs": {
            "monkey/common/common_consts/post_breach_consts.py": "25e6679cb1623aae1a732deb05cc011a452743e3",
            "monkey/infection_monkey/post_breach/actions/add_user.py": "a85845840d9cb37529ad367e159cd9001929e759",
            "monkey/monkey_island/cc/services/attack/technique_reports/T1136.py": "d9d86e08ea4aeb0a6bee3f483e4fea50ee6cd200",
            "monkey/monkey_island/cc/services/config_schema/definitions/post_breach_actions.py": "857e80da477ab31dbc00ed0a3f1cd49b69b505fa"
        }
    }
}
